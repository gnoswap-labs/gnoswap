package position

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v2/gns"

	pl "gno.land/r/gnoswap/v2/pool"
)

// 1. Create Pool
func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(consts.GNOT, consts.GNS_PATH, fee500, common.TickMathGetSqrtRatioAtTick(-10000).ToString())
}

func TestMintPosition(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // WRAP

	// prepare 50000005ugnot (5 for refund test)
	std.TestIssueCoins(admin, std.Coins{{"ugnot", 50000005}})
	shouldEQ(t, ugnotBalanceOf(admin), uint64(50000005))
	shouldEQ(t, ugnotBalanceOf(consts.POSITION_ADDR), uint64(200000000))

	// send & set orig send
	banker := std.GetBanker(std.BankerTypeRealmIssue)
	banker.SendCoins(admin, consts.POSITION_ADDR, std.Coins{{"ugnot", 50000005}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 50000005}}, nil)

	shouldEQ(t, ugnotBalanceOf(admin), uint64(0))

	adminOldWugnotBalance := wugnot.BalanceOf(a2u(admin))
	shouldEQ(t, adminOldWugnotBalance, uint64(0))

	tokenId, liquidity, amount0, amount1 := Mint(
		consts.GNS_PATH,
		consts.GNOT,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		admin,
		admin,
	)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, getNextId(), uint64(2))
	shouldEQ(t, amount0, "50000000")
	shouldEQ(t, amount1, "18394892")

	position := positions[tokenId]
	shouldEQ(t, position.poolKey, "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:500")

	// SPEND ALL WUGNOT
	shouldEQ(t, wugnot.BalanceOf(a2u(admin)), uint64(0))

	shouldEQ(t, ugnotBalanceOf(admin), uint64(5))
	// 1. 50000005 ugnot sent
	// 2. 50000005 ugnot wrapped to wugnot
	// 3. 50000000 wugnot spent to mint (amount1)
	// 4. refund 50000005 - 50000000 = 5

}

func TestIncreaseLiquidity(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // WRAP

	pool := getPoolFromLpTokenId(uint64(1))
	oldLiquidity := pool.PoolGetLiquidity()

	// prepare 10000005ugnot (5 for refund test)
	std.TestIssueCoins(admin, std.Coins{{"ugnot", 10000005}})
	shouldEQ(t, ugnotBalanceOf(admin), uint64(10000010))
	shouldEQ(t, ugnotBalanceOf(consts.POSITION_ADDR), uint64(200000000))

	// send & set orig send
	banker := std.GetBanker(std.BankerTypeRealmIssue)
	banker.SendCoins(admin, consts.POSITION_ADDR, std.Coins{{"ugnot", 10000005}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 10000005}}, nil)

	shouldEQ(t, ugnotBalanceOf(admin), uint64(5))
	shouldEQ(t, wugnot.BalanceOf(a2u(admin)), uint64(0))

	_, _, m0, m1, _ := IncreaseLiquidity( // tokenId, liq, a0, a1, poolPath
		uint64(1),   // tokenId
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)
	shouldEQ(t, m0, "10000000")
	shouldEQ(t, m1, "3678979")

	newLiquidity := pool.PoolGetLiquidity()

	shouldEQ(t, newLiquidity.Gt(oldLiquidity), true)

	// SPEND ALL WUGNOT
	shouldEQ(t, wugnot.BalanceOf(a2u(admin)), uint64(0))

	shouldEQ(t, ugnotBalanceOf(admin), uint64(10))
	// 1. 10000005 ugnot sent
	// 2. 10000005 ugnot wrapped to wugnot
	// 3. 10000000 wugnot spent to mint (amount1)
	// 4. refund 10000005 - 10000000 = 5
	// 5. user already had 5 ugnot = 5 + 5
}

func TestDecreaseLiquidityWrapped(t *testing.T) {
	std.TestSetRealm(adminRealm)

	oldLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()

	userWugnotBalance := wugnot.BalanceOf(a2u(admin))
	shouldEQ(t, userWugnotBalance, uint64(0))

	userUgnotBalance := ugnotBalanceOf(admin)
	shouldEQ(t, userUgnotBalance, uint64(10))

	_, _, _, _, a0, a1, _ := DecreaseLiquidity( // tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath
		uint64(1),   // tokenId
		20,          // liquidityRatio
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
		false,       // unwrapResult
	)

	userWugnotBalance = wugnot.BalanceOf(a2u(admin)) // wrapped result, so wunogt increased
	shouldEQ(t, userWugnotBalance, uint64(11999999))

	userUgnotBalance = ugnotBalanceOf(admin) // wrapped result, so ugnot didn't change
	shouldEQ(t, userUgnotBalance, uint64(10))

	newLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()
	shouldEQ(t, true, newLiquidity.Lt(oldLiquidity))

	// check fee left
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1, true)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
}

func TestDecreaseLiquidityUnwrapped(t *testing.T) {
	std.TestSetRealm(adminRealm)

	oldLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()

	userWugnotBalance := wugnot.BalanceOf(a2u(admin))
	shouldEQ(t, userWugnotBalance, uint64(11999999))

	userUgnotBalance := ugnotBalanceOf(admin)
	shouldEQ(t, userUgnotBalance, uint64(10))

	_, _, _, _, a0, a1, _ := DecreaseLiquidity( // tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath
		uint64(1),   // tokenId
		50,          // liquidityRatio
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
		true,        // unwrapResult
	)

	userWugnotBalance = wugnot.BalanceOf(a2u(admin)) // unwrapped result, so wugnot didn't change
	shouldEQ(t, userWugnotBalance, uint64(11999999))

	userUgnotBalance = ugnotBalanceOf(admin) // unwrapped result, so ugnot decreased
	shouldEQ(t, userUgnotBalance, uint64(24000009))

	newLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()
	shouldEQ(t, true, newLiquidity.Lt(oldLiquidity))

	// check fee left
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1, false)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
}
