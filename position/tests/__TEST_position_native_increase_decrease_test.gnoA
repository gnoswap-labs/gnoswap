package position

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v2/gns"

	pl "gno.land/r/gnoswap/v2/pool"
)

// 1. Create Pool
func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(consts.GNS_PATH, consts.GNOT, fee500, common.TickMathGetSqrtRatioAtTick(10000).ToString()) // x2.71814592682522526700950038502924144268035888671875
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool CreatePool [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500}]}
}

func TestMintPosition(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // WRAP

	// prepare 50000005ugnot (5 for refund test)
	std.TestIssueCoins(gsa, std.Coins{{"ugnot", 50000005}})
	shouldEQ(t, ugnotBalanceOf(gsa), 50000005)
	shouldEQ(t, ugnotBalanceOf(consts.POSITION_ADDR), 200000000)

	// send & set orig send
	banker := std.GetBanker(std.BankerTypeRealmIssue)
	banker.SendCoins(gsa, consts.POSITION_ADDR, std.Coins{{"ugnot", 50000005}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 50000005}}, nil)

	shouldEQ(t, ugnotBalanceOf(gsa), 0)

	gsaOldWugnotBalance := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, gsaOldWugnotBalance, 0)

	tokenId, liquidity, amount0, amount1 := Mint(
		consts.GNS_PATH,
		consts.GNOT,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/position Mint [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500} {p_tickLower 8000} {p_tickUpper 12000} {tokenId 1} {liquidity 318704392} {amount0 18394892} {amount1 50000000}]}

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, "50000000")
	shouldEQ(t, amount1, "18394892")

	position := positions[tokenId]
	shouldEQ(t, position.poolKey, "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:500")

	// SPEND ALL WUGNOT
	shouldEQ(t, wugnot.BalanceOf(a2u(gsa)), 0)

	shouldEQ(t, ugnotBalanceOf(gsa), 5)
	// 1. 50000005 ugnot sent
	// 2. 50000005 ugnot wrapped to wugnot
	// 3. 50000000 wugnot spent to mint (amount1)
	// 4. refund 50000005 - 50000000 = 5

}

func TestIncreaseLiquidity(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // WRAP

	pool := getPoolFromLpTokenId(uint64(1))
	oldLiquidity := pool.PoolGetLiquidity()

	// prepare 10000005ugnot (5 for refund test)
	std.TestIssueCoins(gsa, std.Coins{{"ugnot", 10000005}})
	shouldEQ(t, ugnotBalanceOf(gsa), 10000010)
	shouldEQ(t, ugnotBalanceOf(consts.POSITION_ADDR), 200000000)

	// send & set orig send
	banker := std.GetBanker(std.BankerTypeRealmIssue)
	banker.SendCoins(gsa, consts.POSITION_ADDR, std.Coins{{"ugnot", 10000005}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 10000005}}, nil)

	shouldEQ(t, ugnotBalanceOf(gsa), 5)
	shouldEQ(t, wugnot.BalanceOf(a2u(gsa)), 0)

	_, _, m0, m1, _ := IncreaseLiquidity( // tokenId, liq, a0, a1, poolPath
		uint64(1),   // tokenId
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/position IncreaseLiquidity [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500} {liquidity 63740878} {amount0 3678979} {amount1 10000000}]}
	shouldEQ(t, m0, "10000000")
	shouldEQ(t, m1, "3678979")

	newLiquidity := pool.PoolGetLiquidity()

	shouldEQ(t, newLiquidity.Gt(oldLiquidity), true)

	// SPEND ALL WUGNOT
	shouldEQ(t, wugnot.BalanceOf(a2u(gsa)), 0)

	shouldEQ(t, ugnotBalanceOf(gsa), 10)
	// 1. 10000005 ugnot sent
	// 2. 10000005 ugnot wrapped to wugnot
	// 3. 10000000 wugnot spent to mint (amount1)
	// 4. refund 10000005 - 10000000 = 5
	// 5. user already had 5 ugnot = 5 + 5
}

func TestDecreaseLiquidityWrapped(t *testing.T) {

	std.TestSetOrigCaller(gsa)

	oldLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()

	userWugnotBalance := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, userWugnotBalance, 0)

	userUgnotBalance := ugnotBalanceOf(gsa)
	shouldEQ(t, userUgnotBalance, 10)

	_, _, _, _, a0, a1, _ := DecreaseLiquidity( // tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath
		uint64(1),   // tokenId
		20,          // liquidityRatio
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
		false,       // unwrapResult
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool HandleWithdrawalFee [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/v2/position} {p_tokenId 1} {p_token0Path gno.land/r/gnoswap/v2/gns} {p_token1Path gno.land/r/demo/wugnot} {fee0Amount 0} {fee1Amount 0}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/position CollectFee [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {fee0 0} {fee1 0} {poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/position DecreaseLiquidity [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {p_liquidityRatio 20} {poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500} {liquidity 76489054} {fee0 0} {fee1 0} {amount0 4414773} {amount1 11999999}]}

	userWugnotBalance = wugnot.BalanceOf(a2u(gsa)) // wrapped result, so wunogt increased
	shouldEQ(t, userWugnotBalance, 11999999)

	userUgnotBalance = ugnotBalanceOf(gsa) // wrapped result, so ugnot didn't change
	shouldEQ(t, userUgnotBalance, 10)

	newLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()
	shouldEQ(t, true, newLiquidity.Lt(oldLiquidity))

	// check fee left
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool HandleWithdrawalFee [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/v2/position} {p_tokenId 1} {p_token0Path gno.land/r/gnoswap/v2/gns} {p_token1Path gno.land/r/demo/wugnot} {fee0Amount 0} {fee1Amount 0}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/position CollectFee [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {fee0 0} {fee1 0} {poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500}]}

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
}

func TestDecreaseLiquidityUnwrapped(t *testing.T) {

	std.TestSetOrigCaller(gsa)

	oldLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()

	userWugnotBalance := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, userWugnotBalance, 11999999)

	userUgnotBalance := ugnotBalanceOf(gsa)
	shouldEQ(t, userUgnotBalance, 10)

	_, _, _, _, a0, a1, _ := DecreaseLiquidity( // tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath
		uint64(1),   // tokenId
		50,          // liquidityRatio
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
		true,        // unwrapResult
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool HandleWithdrawalFee [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/v2/position} {p_tokenId 1} {p_token0Path gno.land/r/gnoswap/v2/gns} {p_token1Path gno.land/r/demo/wugnot} {fee0Amount 0} {fee1Amount 0}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/position CollectFee [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {fee0 0} {fee1 0} {poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/position DecreaseLiquidity [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {p_liquidityRatio 50} {poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500} {liquidity 152978108} {fee0 0} {fee1 0} {amount0 8829547} {amount1 23999999}]}

	userWugnotBalance = wugnot.BalanceOf(a2u(gsa)) // unwrapped result, so wugnot didn't change
	shouldEQ(t, userWugnotBalance, 11999999)

	userUgnotBalance = ugnotBalanceOf(gsa) // unwrapped result, so ugnot decreased
	shouldEQ(t, userUgnotBalance, 24000009)

	newLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()
	shouldEQ(t, true, newLiquidity.Lt(oldLiquidity))

	// check fee left
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/pool HandleWithdrawalFee [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/v2/position} {p_tokenId 1} {p_token0Path gno.land/r/gnoswap/v2/gns} {p_token1Path gno.land/r/demo/wugnot} {fee0Amount 0} {fee1Amount 0}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/v2/position CollectFee [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {fee0 0} {fee1 0} {poolPath gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:500}]}

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
}
