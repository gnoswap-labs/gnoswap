package position

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/r/gnoswap/v2/gns"
)

func init() {
	// set pool create fee to 0 for testing
	std.TestSetRealm(adminRealm)
	pl.SetPoolCreationFeeByAdmin(0)
}

func TestPoolInitCreatePool(t *testing.T) {
	shouldEQ(t, gns.TotalSupply(), uint64(100000000000000))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(0))
	std.TestSkipHeights(100)

	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(1).ToString())
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001426940600))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(1070205450))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(285388120))
}

func TestMintPositionFullInRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		-887270,
		887270,
		"50000",
		"50000",
		"0",
		"0",
		max_timeout,
		admin,
		admin,
	)
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001441210006))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(1080907504))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(288242001))
}

func TestIncreaseLiquidity(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1, poolPath := IncreaseLiquidity(
		uint64(1),
		"50000",
		"50000",
		"0",
		"0",
		max_timeout,
	)
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001455479412))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(1091609559))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(291095882))
}

func TestDecreaseLiquidity(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(
		uint64(1),
		uint64(50),
		"0",
		"0",
		max_timeout,
		false,
	)
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001469748818))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(1102311614))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(293949763))
}

func TestCollectFee(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(uint64(1), false)
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001484018224))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(1113013669))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(296803644))
}

func gnsBalance(addr std.Address) uint64 {
	return gns.BalanceOf(a2u(addr))
}
