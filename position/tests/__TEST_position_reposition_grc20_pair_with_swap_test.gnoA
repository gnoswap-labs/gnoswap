package position

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/consts"

	pl "gno.land/r/gnoswap/v1/pool"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick = 10000
}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		admin,
		admin,
	)

	uassert.Equal(t, tokenId, uint64(1))
	uassert.Equal(t, getNextId(), uint64(2))
	uassert.Equal(t, amount0, "18394892")
	uassert.Equal(t, amount1, "50000000")

	position := positions[tokenId]
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "318704392")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestMintPosition02InRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		admin,
		admin,
	)

	uassert.Equal(t, tokenId, uint64(2))
	uassert.Equal(t, getNextId(), uint64(3))
	uassert.Equal(t, amount0, "18394892")
	uassert.Equal(t, amount1, "50000000")

	position := positions[tokenId]
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "318704392")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestMintPosition03InRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		6000,
		14000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		admin,
		admin,
	)

	uassert.Equal(t, tokenId, uint64(3))
	uassert.Equal(t, getNextId(), uint64(4))
	uassert.Equal(t, amount0, "18394892")
	uassert.Equal(t, amount1, "50000000")

	position := positions[tokenId]
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(6000))
	uassert.Equal(t, position.tickUpper, int32(14000))
	uassert.Equal(t, position.liquidity.ToString(), "167312775")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestSwap1(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetRealm(rouRealm)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		admin,
		true,
		"1234567",
		consts.MIN_PRICE,
		admin,
	)

	uassert.Equal(t, amount0, "1234567")
	uassert.Equal(t, amount1, "-3345595")

	position := positions[uint64(1)]
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "318704392")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestUnclaimedFee01(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	uassert.Equal(t, amount0.ToString(), "244")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestUnclaimedFee02(t *testing.T) {
	amount0, amount1 := unclaimedFee(2)

	uassert.Equal(t, amount0.ToString(), "244")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestUnclaimedFee03(t *testing.T) {
	amount0, amount1 := unclaimedFee(3)

	uassert.Equal(t, amount0.ToString(), "128")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestDecreaseLiquidity03(t *testing.T) {
	std.TestSetRealm(adminRealm)

	_lpTokenId := uint64(03)

	ownerOfPosition := gnft.OwnerOf(tid(_lpTokenId))
	uassert.Equal(t, ownerOfPosition, admin)

	// approve fee0, fee1 to pool ( for withdrawal protocol fee )
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(_lpTokenId, 100, "0", "0", max_timeout, false)

	uassert.Equal(t, tokenId, _lpTokenId)
	uassert.Equal(t, amount0, "18651446")
	uassert.Equal(t, amount1, "49304404")

	uassert.Equal(t, fee0, "127")
	uassert.Equal(t, fee1, "0")

	ownerOfPosition = gnft.OwnerOf(tid(_lpTokenId))
	uassert.Equal(t, ownerOfPosition, admin)

	position := positions[_lpTokenId]
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(6000))
	uassert.Equal(t, position.tickUpper, int32(14000))
	uassert.Equal(t, position.liquidity.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "261325796985563264150557581113385")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, true)
}

func TestReposition(t *testing.T) {
	std.TestSetRealm(adminRealm)

	_lpTokenId := uint64(3)

	// check current state
	position := positions[_lpTokenId]
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(6000))
	uassert.Equal(t, position.tickUpper, int32(14000))
	uassert.Equal(t, position.liquidity.ToString(), "0")
	uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "261325796985563264150557581113385")
	uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, true)

	Reposition(
		_lpTokenId, // tokenId
		8000,       // tickLower
		12000,      // tickUpper
		"18651446", // amount0Desired
		"49304404", // amount1Desired
		"0",        // amount0Min
		"0",        // amount1Min
	)

	position = positions[_lpTokenId]
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "314786446")
	// uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "261325796985563264150557581113385")
	// uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestAfterReposition03UnclaimedFee(t *testing.T) {
	amount0, amount1 := unclaimedFee(3)
	println("AFTER REPOSITION, POSITION 3 UNCLAIMED FEE")
	println("amount0: ", amount0.ToString())
	println("amount1: ", amount1.ToString())

	uassert.Equal(t, amount0.ToString(), "0")
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestSwap2(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetRealm(rouRealm)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		admin,
		true,
		"1234567",
		consts.MIN_PRICE,
		admin,
	)

	uassert.Equal(t, amount0, "1234567")
	uassert.Equal(t, amount1, "-3330062")

	position := positions[uint64(1)]
	uassert.Equal(t, position.nonce.ToString(), "0")
	uassert.Equal(t, position.operator, consts.ZERO_ADDRESS)
	uassert.Equal(t, position.poolKey, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	uassert.Equal(t, position.tickLower, int32(8000))
	uassert.Equal(t, position.tickUpper, int32(12000))
	uassert.Equal(t, position.liquidity.ToString(), "318704392")
	// uassert.Equal(t, position.feeGrowthInside0LastX128.ToString(), "0")
	// uassert.Equal(t, position.feeGrowthInside1LastX128.ToString(), "0")
	uassert.Equal(t, position.tokensOwed0.ToString(), "0")
	uassert.Equal(t, position.tokensOwed1.ToString(), "0")
	uassert.Equal(t, position.burned, false)
}

func TestUnclaimedFee01_AfterSwap2(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	uassert.Equal(t, amount0.ToString(), "451") // 244 + 207 = 451
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestUnclaimedFee02_AfterSwap2(t *testing.T) {
	amount0, amount1 := unclaimedFee(2)

	uassert.Equal(t, amount0.ToString(), "451") // 244 + 207 = 451
	uassert.Equal(t, amount1.ToString(), "0")
}

func TestUnclaimedFee03_AfterSwap2(t *testing.T) {
	amount0, amount1 := unclaimedFee(3)

	uassert.Equal(t, amount0.ToString(), "204") // +204
	uassert.Equal(t, amount1.ToString(), "0")

	{

		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

		tokenId, afterFee0, afterFee1, poolPath, fee0, fee1 := CollectFee(3, true)
		position := positions[tokenId]
		uassert.Equal(t, position.tokensOwed0.ToString(), "0")
		uassert.Equal(t, position.tokensOwed1.ToString(), "0")
		uassert.Equal(t, fee0, "204")
		uassert.Equal(t, fee1, "0")
	}

}
