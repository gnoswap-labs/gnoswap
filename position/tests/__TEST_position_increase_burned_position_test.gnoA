package position

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	pl "gno.land/r/gnoswap/v2/pool"
)

func init() {
	// set pool create fee to 0 for testing
	std.TestSetRealm(gsaRealm)
	pl.SetPoolCreationFee(0)
}

// 1. Create Pool
func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(10000).ToString()) // x2.71814592682522526700950038502924144268035888671875
}

func TestMintPosition(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa,
		gsa,
	)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, getNextId(), uint64(2))
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")
}

func TestIncreaseLiquidity(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 3678979)
	foo.Approve(a2u(consts.POOL_ADDR), 10000000)

	pool := getPoolFromLpTokenId(uint64(1))
	oldLiquidity := pool.PoolGetLiquidity()

	_, _, m0, m1, _ := IncreaseLiquidity(
		uint64(1),   // tokenId
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, m0, "3678979")
	shouldEQ(t, m1, "10000000")

	newLiquidity := pool.PoolGetLiquidity()

	shouldEQ(t, newLiquidity.Gt(oldLiquidity), true)
}

func TestDecreaseLiquidity(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	oldLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()

	DecreaseLiquidity(
		uint64(1),   // tokenId
		50,          // liquidityRatio
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
		false,       // unwrapResult
	)

	newLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()
	shouldEQ(t, true, newLiquidity.Lt(oldLiquidity))

	// check fee left
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1, false)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")

	position := positions[uint64(1)]
	shouldEQ(t, position.burned, false) // not burned yet
}

func TestDecreaseLiquidityToBurnPosition(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	// burn it
	DecreaseLiquidity(
		uint64(1),   // tokenId
		100,         // liquidityRatio
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
		true,        // unwrapResult
	)
	position := positions[uint64(1)]
	shouldEQ(t, position.burned, true)              // it is burned
	shouldEQ(t, position.liquidity.ToString(), "0") // and liquidity is 0
}

func TestIncreaseLiquidityBurnedPosition(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	pool := getPoolFromLpTokenId(uint64(1))
	oldLiquidity := pool.PoolGetLiquidity()

	position := positions[uint64(1)]
	shouldEQ(t, position.burned, true) // it is burned

	_, _, m0, m1, _ := IncreaseLiquidity(
		uint64(1),   // tokenId
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, m0, "3678979")
	shouldEQ(t, m1, "10000000")

	newLiquidity := pool.PoolGetLiquidity()
	shouldEQ(t, newLiquidity.Gt(oldLiquidity), true)

	position = positions[uint64(1)]
	shouldEQ(t, position.burned, false)
}
