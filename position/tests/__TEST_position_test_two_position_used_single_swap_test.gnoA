package position

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick = 10000
}

func TestMintPosition01WideInRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		admin,
		admin,
	)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, getNextId(), uint64(2))
	shouldEQ(t, liquidity, "318704392")
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")
}

func TestMintPositionTightInRange(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		9500,
		10500,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		admin,
		admin,
	)

	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, getNextId(), uint64(3))
	shouldEQ(t, liquidity, "1228379121")
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")
}

func TestCollectFeeBeforeSwapPos1(t *testing.T) {
	std.TestSetRealm(adminRealm)
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1, false)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
	shouldEQ(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
}

func TestCollectFeeBeforeSwapPos2(t *testing.T) {
	std.TestSetRealm(adminRealm)
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(2, false)

	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
	shouldEQ(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
}

func TestSwap(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetRealm(rouRealm)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		admin,
		true,
		"1234567",
		consts.MIN_PRICE,
		admin,
	)

}

// FYI, IF POSITION 2 DOESN'T EXIST, POSITION 1 WILL EARN '617' as fee
func TestCollectFeeAfterSwapPos1(t *testing.T) {
	std.TestSetRealm(adminRealm)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // COLLECT_FEE
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // COLLECT_FEE

	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(1, false)

	shouldEQ(t, tokenId, uint64(1))
	// shouldEQ(t, fee0, uint64(617))
	shouldEQ(t, fee0, "126")
	shouldEQ(t, fee1, "0")
	shouldEQ(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
}

func TestCollectFeeAfterSwapPos2(t *testing.T) {
	std.TestSetRealm(adminRealm)
	tokenId, fee0, fee1, poolPath, _, _ := CollectFee(2, false)

	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, fee0, "486")
	shouldEQ(t, fee1, "0")
	shouldEQ(t, poolPath, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
}
