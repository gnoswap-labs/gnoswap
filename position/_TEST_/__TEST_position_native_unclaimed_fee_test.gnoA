package position

import (
	"std"
	"testing"

	"gno.land/r/demo/gnoswap/common"
	"gno.land/r/demo/gnoswap/consts"

	pl "gno.land/r/demo/pool"

	"gno.land/r/demo/gns"
	"gno.land/r/demo/wugnot"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetPrevAddr(gsa)

	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	pl.CreatePool(consts.GNS_PATH, consts.GNOT, fee500, common.TickMathGetSqrtRatioAtTick(10000).ToString()) // x2.71814592682522526700950038502924144268035888671875
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/gns:gno.land/r/demo/wugnot:500}]}
}

func TestMintPosition(t *testing.T) {
	std.TestSetPrevAddr(gsa)

	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // WRAP

	// prepare 50000005ugnot (5 for refund test)
	std.TestIssueCoins(gsa, std.Coins{{"ugnot", 50000005}})
	shouldEQ(t, ugnotBalanceOf(gsa), 50000005)
	shouldEQ(t, ugnotBalanceOf(consts.POSITION_ADDR), 200000000)

	// send & set orig send
	banker := std.GetBanker(std.BankerTypeRealmIssue)
	banker.SendCoins(gsa, consts.POSITION_ADDR, std.Coins{{"ugnot", 50000005}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 50000005}}, nil)

	shouldEQ(t, ugnotBalanceOf(gsa), 0)
	shouldEQ(t, wugnot.BalanceOf(a2u(gsa)), 0)

	tokenId, liquidity, amount0, amount1 := Mint(
		consts.GNS_PATH,
		consts.GNOT,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/gns:gno.land/r/demo/wugnot:500} {p_tickLower 8000} {p_tickUpper 12000} {tokenId 1} {liquidity 318704392} {amount0 18394892} {amount1 50000000}]}

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")

	position := positions[tokenId]
	shouldEQ(t, position.poolKey, "gno.land/r/demo/gns:gno.land/r/demo/wugnot:500")

	// SPEND ALL WUGNOT
	shouldEQ(t, wugnot.BalanceOf(a2u(gsa)), 0)

	shouldEQ(t, ugnotBalanceOf(gsa), 5)
	// 1. 50000005 ugnot sent
	// 2. 50000005 ugnot wrapped to wugnot
	// 3. 50000000 wugnot spent to mint (amount1)
	// 4. refund 50000005 - 50000000 = 5
}

func TestUnclaimedFee0(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "0")
	shouldEQ(t, amount1.ToString(), "0")
}

// GNS > GNOT
func TestSwapSellGnsBuyGnot(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	gns.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		consts.GNS_PATH,
		consts.WUGNOT_PATH, // router will change this, not pool so use wugnot to test ugnot against pool.Swap
		fee500,
		gsa.String(),
		true,
		"1234567",
		consts.MIN_PRICE,
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/gns:gno.land/r/demo/wugnot:500} {p_zeroForOne true} {p_amountSpecified 1234567} {p_sqrtPriceLimitX96 4295128740} {p_payer g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {p_recipient g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {amount0 1234567} {amount1 -3332779} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 618}]}

	shouldEQ(t, amount0, "1234567")
	shouldEQ(t, amount1, "-3332779")
}

func TestUnclaimedFee1(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "617")
	shouldEQ(t, amount1.ToString(), "0")
}

// GNOT > GNS
func TestSwapSellGnotBuyGns(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	gns.Approve(a2u(consts.POOL_ADDR), 123456)

	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		consts.GNS_PATH,
		consts.WUGNOT_PATH, // router will change this, not pool so use wugnot to test ugnot against pool.Swap
		fee500,
		gsa.String(),
		false,
		"123456",
		consts.MAX_PRICE,
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/gns:gno.land/r/demo/wugnot:500} {p_zeroForOne false} {p_amountSpecified 123456} {p_sqrtPriceLimitX96 1461446703485210103287273052203988822378723970341} {p_payer g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {p_recipient g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {amount0 -45966} {amount1 123456} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 62}]}

	shouldEQ(t, amount0, "-45966")
	shouldEQ(t, amount1, "123456")
}

func TestUnclaimedFee2(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "617")
	shouldEQ(t, amount1.ToString(), "61")
}

func TestCollectFeeAfterSwap(t *testing.T) {
	oldWunogt := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, oldWunogt, 3209323)

	oldUgnot := ugnotBalanceOf(gsa)
	shouldEQ(t, oldUgnot, 5)

	std.TestSetPrevAddr(gsa)
	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)    // COLLECT_FEE
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // COLLECT_FEE

	tokenId, fee0, fee1, poolPath := CollectFee(1)
	// ---       event: {GNOSWAP gno.land/r/demo/pool HandleWithdrawalFee [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/position} {p_tokenId 1} {p_token0Path gno.land/r/demo/gns} {p_token1Path gno.land/r/demo/wugnot} {fee0Amount 6} {fee1Amount 0}]}
	// ---       event: {GNOSWAP gno.land/r/demo/position CollectFee [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 1} {fee0 611} {fee1 61} {poolPath gno.land/r/demo/gns:gno.land/r/demo/wugnot:500}]}

	newWugnot := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, newWugnot, oldWunogt)

	newUgnot := ugnotBalanceOf(gsa)
	shouldEQ(t, newUgnot, 66) // init 5 + 61 fee
}
