package position

import (
	"std"
	"testing"

	"gno.land/r/demo/gnoswap/common"
	"gno.land/r/demo/gnoswap/consts"

	i256 "gno.land/p/demo/gnoswap/int256"

	pl "gno.land/r/demo/pool"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetPrevAddr(gsa)

	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick = 10000
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}

	println("POOL_BAR:", bar.BalanceOf(a2u(consts.POOL_ADDR))) // 0
	println("POOL_FOO:", foo.BalanceOf(a2u(consts.POOL_ADDR))) // 0
}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower 8000} {p_tickUpper 12000} {tokenId 1} {liquidity 318704392} {amount0 18394892} {amount1 50000000}]}

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")

	println("POOL_BAR:", bar.BalanceOf(a2u(consts.POOL_ADDR))) // 18394892
	println("POOL_FOO:", foo.BalanceOf(a2u(consts.POOL_ADDR))) // 50000000

	position := positions[tokenId]
	pool := pl.GetPoolFromPoolPath(position.poolKey)
	currentX96 := pool.PoolGetSlot0SqrtPriceX96()
	lowerX96 := common.TickMathGetSqrtRatioAtTick(position.tickLower)
	upperX96 := common.TickMathGetSqrtRatioAtTick(position.tickUpper)
	token0Balance, token1Balance := common.GetAmountsForLiquidity(
		currentX96,
		lowerX96,
		upperX96,
		i256.FromUint256(position.liquidity),
	)
	println("POSITION_BAR:", token0Balance) // 18394892
	println("POSITION_FOO:", token1Balance) // 50000000
}

func TestSwap(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	bar.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		gsa.String(),
		true,
		"1234567",
		consts.MIN_PRICE,
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_zeroForOne true} {p_amountSpecified 1234567} {p_sqrtPriceLimitX96 4295128740} {p_payer g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {p_recipient g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {amount0 1234567} {amount1 -3332779} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 618}]}

	shouldEQ(t, amount0, "1234567")
	shouldEQ(t, amount1, "-3332779")

	// check balances
	println("POOL_BAR:", bar.BalanceOf(a2u(consts.POOL_ADDR))) // 19629459 || 18394892 + 1234567
	println("POOL_FOO:", foo.BalanceOf(a2u(consts.POOL_ADDR))) // 46667221 || 50000000 - 3332779

	position := positions[1]
	pool := pl.GetPoolFromPoolPath(position.poolKey)
	currentX96 := pool.PoolGetSlot0SqrtPriceX96()
	lowerX96 := common.TickMathGetSqrtRatioAtTick(position.tickLower)
	upperX96 := common.TickMathGetSqrtRatioAtTick(position.tickUpper)
	token0Balance, token1Balance := common.GetAmountsForLiquidity(
		currentX96,
		lowerX96,
		upperX96,
		i256.FromUint256(position.liquidity),
	)
	println("POSITION_BAR:", token0Balance) // 19628841 || POOL(19629459) - POS(19628841) = 618
	println("POSITION_FOO:", token1Balance) // 46667221 || SAME WITH POOL_FOO

	fee0, fee1 := unclaimedFee(1)
	println("POSITION_FEE_BAR:", fee0.ToString()) // 617
	println("POSITION_FEE_FOO:", fee1.ToString()) // 0

}

func TestCollectFeeAfterSwap(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // COLLECT_FEE
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // COLLECT_FEE

	tokenId, fee0, fee1, poolPath := CollectFee(1)
	// ---       event: {GNOSWAP gno.land/r/demo/pool HandleWithdrawalFee [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/position} {p_tokenId 1} {p_token0Path gno.land/r/demo/bar} {p_token1Path gno.land/r/demo/foo} {fee0Amount 6} {fee1Amount 0}]}
	// ---       event: {GNOSWAP gno.land/r/demo/position CollectFee [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 1} {fee0 611} {fee1 0} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "611") // this is input token
	shouldEQ(t, fee1, "0")   // this it output token
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
}
