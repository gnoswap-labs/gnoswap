package position

import (
	"std"
	"testing"

	"gno.land/r/demo/gnoswap/common"
	"gno.land/r/demo/gnoswap/consts"

	"gno.land/r/demo/gns"
	"gno.land/r/demo/wugnot"

	"gno.land/r/demo/gnft"

	pl "gno.land/r/demo/pool"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(consts.GNS_PATH, consts.GNOT, fee500, common.TickMathGetSqrtRatioAtTick(10000).ToString()) // x2.71814592682522526700950038502924144268035888671875
}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // FOR WRAP

	std.TestIssueCoins(gsa, std.Coins{{"ugnot", 50000005}})
	shouldEQ(t, ugnotBalanceOf(gsa), 50000005)
	shouldEQ(t, ugnotBalanceOf(consts.POSITION_ADDR), 200000000)

	banker := std.GetBanker(std.BankerTypeRealmIssue)
	banker.SendCoins(gsa, consts.POSITION_ADDR, std.Coins{{"ugnot", 50000005}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 50000005}}, nil)
	shouldEQ(t, ugnotBalanceOf(gsa), 0)

	gsaOldWugnotBalance := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, gsaOldWugnotBalance, 0)

	tokenId, liquidity, amount0, amount1 := Mint(
		consts.GNS_PATH,
		consts.GNOT,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)
	std.TestSetOrigSend(std.Coins{{"ugnot", 0}}, nil)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")

	position := positions[tokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/demo/gns:gno.land/r/demo/wugnot:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "318704392")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)

	// SPEND ALL WUGNOT
	shouldEQ(t, wugnot.BalanceOf(a2u(gsa)), 0)

	shouldEQ(t, ugnotBalanceOf(gsa), 5)
	// 1. 50000005 ugnot sent
	// 2. 50000005 ugnot wrapped to wugnot
	// 3. 50000000 wugnot spent to mint (amount1)
	// 4. refund 50000005 - 50000000 = 5
}

func TestSwap1(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // amountIn

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		consts.GNS_PATH,
		consts.WUGNOT_PATH,
		fee500,
		gsa.String(),
		true,
		"1234567",
		consts.MIN_PRICE,
		gsa.String(),
	)

	shouldEQ(t, amount0, "1234567")
	shouldEQ(t, amount1, "-3332779")

	position := positions[uint64(1)]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/demo/gns:gno.land/r/demo/wugnot:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "318704392")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)
}

func TestUnclaimedFee01(t *testing.T) {
	amount0, amount1 := unclaimedFee(1)

	shouldEQ(t, amount0.ToString(), "617")
	shouldEQ(t, amount1.ToString(), "0")
}

func TestCollectFee01(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	CollectFee(1)
	position := positions[uint64(1)]
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
}

func TestDecreaseLiquidityInPosition(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	_lpTokenId := uint64(1)

	ownerOfPosition := gnft.OwnerOf(tid(_lpTokenId))
	shouldEQ(t, ownerOfPosition, std.GetOrigCaller())

	// approve fee0, fee1 to pool
	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(_lpTokenId, 100, "0", "0", max_timeout, false)

	shouldEQ(t, tokenId, _lpTokenId)
	shouldEQ(t, amount0, "19628840")
	shouldEQ(t, amount1, "46667220")

	ownerOfPosition = gnft.OwnerOf(tid(_lpTokenId))
	shouldEQ(t, ownerOfPosition, std.GetOrigCaller())

	position := positions[_lpTokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/demo/gns:gno.land/r/demo/wugnot:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "659841872392960215058365142934185")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, true)
}

func TestReposition(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	_lpTokenId := uint64(1)

	// check current state
	position := positions[_lpTokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/demo/gns:gno.land/r/demo/wugnot:500")
	shouldEQ(t, position.tickLower, 8000)
	shouldEQ(t, position.tickUpper, 12000)
	shouldEQ(t, position.liquidity.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "659841872392960215058365142934185")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, true)

	// user ugnot
	std.TestIssueCoins(gsa, std.Coins{{"ugnot", 50000005}})
	shouldEQ(t, ugnotBalanceOf(gsa), 50000010)

	banker := std.GetBanker(std.BankerTypeRealmIssue)
	banker.SendCoins(gsa, consts.POSITION_ADDR, std.Coins{{"ugnot", 5000}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 5000}}, nil)

	Reposition(
		_lpTokenId, // tokenId
		-1000,      // tickLower
		1000,       // tickUpper
		"5000",     // amount0
		"5000",     // amount1
	)

	// user ugnot
	shouldEQ(t, ugnotBalanceOf(gsa), 49995010)

	position = positions[_lpTokenId]
	shouldEQ(t, position.nonce.ToString(), "0")
	shouldEQ(t, position.operator, gsa)
	shouldEQ(t, position.poolKey, "gno.land/r/demo/gns:gno.land/r/demo/wugnot:500")
	shouldEQ(t, position.tickLower, -1000)
	shouldEQ(t, position.tickUpper, 1000)
	shouldEQ(t, position.liquidity.ToString(), "49981")
	shouldEQ(t, position.feeGrowthInside0LastX128.ToString(), "0")
	shouldEQ(t, position.feeGrowthInside1LastX128.ToString(), "0")
	shouldEQ(t, position.tokensOwed0.ToString(), "0")
	shouldEQ(t, position.tokensOwed1.ToString(), "0")
	shouldEQ(t, position.burned, false)
}
