package position

import (
	"gno.land/p/demo/json"

	"std"
	"testing"

	"gno.land/r/demo/gnoswap/consts"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/qux"

	pl "gno.land/r/demo/pool"
)

func init() {
	// set pool create fee to 0 for testing
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)
	pl.SetPoolCreationFee(0)
}

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(fooPath, barPath, fee500, "130621891405341611593710811006") // tick = 10000
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}

	pl.CreatePool(bazPath, quxPath, fee500, "130621891405341611593710811006") // tick = 10000
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500}]}
}

func TestMintFooBar(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	// gsa mints => will get tid 1 nft
	std.TestSetOrigCaller(gsa)
	Mint(fooPath, barPath, fee500, int32(9000), int32(11000), "1000000", "1000000", "1", "1", max_timeout, gsa.String())
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower -11000} {p_tickUpper -9000} {tokenId 1} {liquidity 12437322} {amount0 1000000} {amount1 367898}]}

	// gsa mints => will get tid 2 nft
	std.TestSetOrigCaller(gsa)
	Mint(fooPath, barPath, fee500, int32(4000), int32(6000), "1000000", "1000000", "0", "0", max_timeout, gsa.String())
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower -6000} {p_tickUpper -4000} {tokenId 2} {liquidity 7785250} {amount0 1000000} {amount1 0}]}
}

func TestMintBazQux(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	// gsa mints => will get tid 1 nft
	std.TestSetOrigCaller(gsa)
	Mint(bazPath, quxPath, fee500, int32(9000), int32(11000), "1000000", "1000000", "1", "1", max_timeout, gsa.String())
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500} {p_tickLower 9000} {p_tickUpper 11000} {tokenId 3} {liquidity 12437322} {amount0 367898} {amount1 1000000}]}
}

func TestApiGetPositionsUnclaimedFee(t *testing.T) {
	gpuf := ApiGetPositionsUnclaimedFee()

	root, err := json.Unmarshal([]byte(gpuf))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 3)

	shouldEQ(
		t,
		response.String(),
		`[{"lpTokenId":1,"fee0":"0","fee1":"0"},{"lpTokenId":2,"fee0":"0","fee1":"0"},{"lpTokenId":3,"fee0":"0","fee1":"0"}]`,
	)
}

func TestSwap(t *testing.T) {
	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	pl.Swap(
		fooPath,
		barPath,
		fee500,
		gsa.String(),
		true,
		"123456",
		consts.MIN_PRICE,
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_zeroForOne true} {p_amountSpecified 123456} {p_sqrtPriceLimitX96 4295128740} {p_payer g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {p_recipient g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {amount0 123456} {amount1 -45124} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 62}]}
}

func TestApiGetPositionsUnclaimedFee2(t *testing.T) {
	gpuf := ApiGetPositionsUnclaimedFee()

	root, err := json.Unmarshal([]byte(gpuf))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 3)

	shouldEQ(
		t,
		response.String(),
		`[{"lpTokenId":1,"fee0":"61","fee1":"0"},{"lpTokenId":2,"fee0":"0","fee1":"0"},{"lpTokenId":3,"fee0":"0","fee1":"0"}]`,
	)
}

func TestApiGetPositionUnclaimedFeeByLpTokenId(t *testing.T) {
	gpuf := ApiGetPositionUnclaimedFeeByLpTokenId(uint64(1))

	root, err := json.Unmarshal([]byte(gpuf))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 1)

	shouldEQ(
		t,
		response.String(),
		`[{"lpTokenId":1,"fee0":"61","fee1":"0"}]`,
	)
}

func TestCollectFeeAfterSwap(t *testing.T) {
	// burn 0 to collect swap fee
	std.TestSetOrigCaller(gsa)
	tokneId, fee0, fee1, fromPath := CollectFee(1)
	// ---       event: {GNOSWAP gno.land/r/demo/pool HandleWithdrawalFee [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/position} {p_tokenId 1} {p_token0Path gno.land/r/demo/bar} {p_token1Path gno.land/r/demo/foo} {fee0Amount 0} {fee1Amount 0}]}
	// ---       event: {GNOSWAP gno.land/r/demo/position CollectFee [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 1} {fee0 61} {fee1 0} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}
	shouldEQ(t, tokneId, uint64(1))
	shouldEQ(t, fee0, "61")
	shouldEQ(t, fee1, "0")
	shouldEQ(t, fromPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
}

// RPCs
func TestApiGetPositions(t *testing.T) {
	gpss := ApiGetPositions()

	root, err := json.Unmarshal([]byte(gpss))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 3)
}

func TestApiGetPositionsByPoolPath(t *testing.T) {
	targetPool := "gno.land/r/demo/baz:gno.land/r/demo/qux:500"

	gpss := ApiGetPositionsByPoolPath(targetPool)

	root, err := json.Unmarshal([]byte(gpss))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 1)
}

func TestApiGetPositionsByAddress(t *testing.T) {
	targetAddress := gsa.String()

	gpss := ApiGetPositionsByAddress(targetAddress)

	root, err := json.Unmarshal([]byte(gpss))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 3)
}

func TestApiGetPositionsByAddressNo(t *testing.T) {
	targetAddress := test1.String()

	gpss := ApiGetPositionsByAddress(targetAddress)

	root, err := json.Unmarshal([]byte(gpss))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 0)
}
