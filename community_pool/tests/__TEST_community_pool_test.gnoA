package community_pool

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	pusers "gno.land/p/demo/users"

	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/gnoswap/v2/gns"
)

type GNSToken struct{}

func (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return gns.Transfer
}

func (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return gns.TransferFrom
}

func (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return gns.BalanceOf
}

func (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return gns.Approve
}

func init() {
	std.TestSetRealm(std.NewUserRealm(consts.TOKEN_REGISTER))

	RegisterGRC20Interface("gno.land/r/gnoswap/v2/gns", GNSToken{})
}

func TestTransferGnsNoPermission(t *testing.T) {
	dummy := testutils.TestAddress("dummy")
	dummyRealm := std.NewUserRealm(dummy)

	std.TestSetRealm(dummyRealm)
	shouldPanic(
		t,
		func() {
			TransferToken(consts.GNS_PATH, dummy, 1000)
		},
	)
}

func TestTransferGns(t *testing.T) {
	adminRealm := std.NewUserRealm(consts.ADMIN)
	std.TestSetRealm(adminRealm)

	gns.Transfer(a2u(consts.COMMUNITY_POOL_ADDR), 1000)
	shouldEQ(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(1000))

	sendTarget := testutils.TestAddress("sendTarget")
	TransferTokenByAdmin(consts.GNS_PATH, sendTarget, 900)
	shouldEQ(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(100))
	shouldEQ(t, gns.BalanceOf(a2u(sendTarget)), uint64(900))
}

func shouldPanic(t *testing.T, f func()) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("expected panic")
		}
	}()
	f()
}

func shouldPanicWithMsg(t *testing.T, f func(), msg string) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		} else {
			if r != msg {
				t.Errorf("excepted panic\n%v\n\ngot\n%v\n", msg, r)
			}
		}
	}()
	f()
}

func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got\n%v\n\nexpected\n%v\n", got, expected)
	}
}
