package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"

	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"

	"gno.land/r/gnoswap/v2/gns"
)

var (
	projectAddr = testutils.TestAddress("projectAddr")
	user01      = testutils.TestAddress("user01")

	projectRealm = std.NewUserRealm(projectAddr)
	user01Realm  = std.NewUserRealm(user01)
)

func init() {
	println("test_init")
}

func TestCreateProject(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	std.TestSetOrigCaller(gsa)

	obl.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
	std.TestSkipHeights(1)

	projectId := CreateProject(
		oblPath,
		projectAddr,
		uint64(1_000_000_000), // 1000000000
		"gno.land/r/onbloc/foo*PAD*gno.land/r/onbloc/bar",
		"1*PAD*2",
		uint64(10),                   // 100000000
		uint64(20),                   // 200000000
		uint64(70),                   // 700000000
		uint64(time.Now().Unix()+10), // 10s later
	)
	shouldEQ(t, projectId, `gno.land/r/onbloc/obl:124`)
	std.TestSkipHeights(1)

}

func TestDepositGnsToTier30(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	std.TestSetOrigCaller(gsa)
	gns.Transfer(a2u(user01), uint64(1_000_000)) // to deposit
	// transfer some grc20 tokens to bypass project condition
	foo.Transfer(a2u(user01), uint64(10))
	bar.Transfer(a2u(user01), uint64(10))

	std.TestSetRealm(user01Realm)
	std.TestSetOrigCaller(user01)
	gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000))

	// skip some blocks to make project active
	std.TestSkipHeights(4)
	depositId := DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000))
	shouldEQ(t, depositId, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
	std.TestSkipHeights(1)
}

func TestCollectReward(t *testing.T) {
	std.TestSetRealm(user01Realm)
	std.TestSetOrigCaller(user01)

	t.Run("claim reward before 30 days", func(t *testing.T) {
		CollectReward()
		std.TestSkipHeights(1)
		println()
	})

	t.Run("claim after 30 days", func(t *testing.T) {
		std.TestSkipHeights(int64(TIMESTAMP_30DAYS) / 2)
		CollectReward()
		println()
	})

	t.Run("no more claim in same block", func(t *testing.T) {
		CollectReward()
		println()
	})

	//
	shouldEQ(t, len(deposits), 1)
	deposit := deposits[`gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`]
	shouldEQ(t, deposit.id, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
	shouldEQ(t, deposit.projectId, `gno.land/r/onbloc/obl:124`)
	shouldEQ(t, deposit.tier, `30`)
	shouldEQ(t, deposit.depositor, user01)
	shouldEQ(t, deposit.amount, uint64(1000000))
	shouldEQ(t, deposit.depositHeight, uint64(129))
	shouldEQ(t, deposit.depositTime, uint64(1234567902))
	shouldEQ(t, deposit.depositCollectHeight, uint64(0))
	shouldEQ(t, deposit.depositCollectTime, uint64(0))
	shouldEQ(t, deposit.rewardAmount, uint64(0))
	shouldEQ(t, deposit.rewardCollectHeight, uint64(1296131))
	shouldEQ(t, deposit.rewardCollectTime, uint64(1237159906))

	//
	shouldEQ(t, len(depositsByProject), 1)
	shouldEQ(t, depositsByProject[`gno.land/r/onbloc/obl:124`][`30`][0], `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)

	//
	shouldEQ(t, len(depositsByUser), 1)
	shouldEQ(t, depositsByUser[`g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv`][0], `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
}
