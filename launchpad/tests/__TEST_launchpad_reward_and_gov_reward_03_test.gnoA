package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"

	"gno.land/r/gnoswap/v2/gnft"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/gnoswap/v2/gov/xgns"

	"gno.land/r/demo/wugnot"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"

	gs "gno.land/r/gnoswap/v2/gov/staker"
	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"
	pf "gno.land/r/gnoswap/v2/protocol_fee"
	rr "gno.land/r/gnoswap/v2/router"
	sr "gno.land/r/gnoswap/v2/staker"
)

var (
	launchpadProject01Addr  = testutils.TestAddress("launchpadProject01")
	launchpadProject01Realm = std.NewUserRealm(launchpadProject01Addr)
	// g1d3sh2mnrdpcxzezswfhk5etrwscrzh6lyxj2sl

	launchpadProject02Addr  = testutils.TestAddress("launchpadProject02")
	launchpadProject02Realm = std.NewUserRealm(launchpadProject02Addr)
	// g1d3sh2mnrdpcxzezswfhk5etrwscryh6le8ayrc

	launchpadProject03Addr  = testutils.TestAddress("launchpadProject03")
	launchpadProject03Realm = std.NewUserRealm(launchpadProject03Addr)
	// g1d3sh2mnrdpcxzezswfhk5etrwscrxh6ljlce4z

	launchpadDeposit01Addr  = testutils.TestAddress("launchpadDeposit01")
	launchpadDeposit01Realm = std.NewUserRealm(launchpadDeposit01Addr)
	// g1d3sh2mnrdpcxzezyv4cx7umfwscrzh6lzr9g7u

	launchpadDeposit02Addr  = testutils.TestAddress("launchpadDeposit02")
	launchpadDeposit02Realm = std.NewUserRealm(launchpadDeposit02Addr)
	// g1d3sh2mnrdpcxzezyv4cx7umfwscryh6llz2xdm

	launchpadDeposit03Addr  = testutils.TestAddress("launchpadDeposit03")
	launchpadDeposit03Realm = std.NewUserRealm(launchpadDeposit03Addr)
	// g1d3sh2mnrdpcxzezyv4cx7umfwscrxh6l560mmp

	govDelegateAddr  = testutils.TestAddress("govDelegate")
	govDelegateRealm = std.NewUserRealm(govDelegateAddr)
	// g1vahhv3r9d3jkwct5v4047h6lta047h6lnv8wwm

	dummy01Addr  = testutils.TestAddress("dummy01")
	dummy01Realm = std.NewUserRealm(dummy01Addr)
	// g1v36k6mtexqc47h6lta047h6lta047h6lp6a3dc

	dummy02Addr  = testutils.TestAddress("dummy02")
	dummy02Realm = std.NewUserRealm(dummy02Addr)
	// g1v36k6mtexqe97h6lta047h6lta047h6l7fjzzd

	dummy03Addr  = testutils.TestAddress("dummy03")
	dummy03Realm = std.NewUserRealm(dummy03Addr)
	// g1v36k6mtexqe47h6lta047h6lta047h6lpretcl

	max_timeout = int64(9999999999)
)

func init() {
	std.TestSetRealm(adminRealm)
	gns.Transfer(a2u(launchpadDeposit01Addr), uint64(1_000_000_000))
	gns.Transfer(a2u(launchpadDeposit02Addr), uint64(1_000_000_000))
	gns.Transfer(a2u(launchpadDeposit03Addr), uint64(1_000_000_000))
	gns.Transfer(a2u(govDelegateAddr), uint64(1_000_000_000))
	gns.Transfer(a2u(dummy01Addr), uint64(1_000_000_000))
	gns.Transfer(a2u(dummy02Addr), uint64(1_000_000_000))
	gns.Transfer(a2u(dummy03Addr), uint64(1_000_000_000))
}

func TestPoolCreatePool_3(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)
	pl.CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(0).ToString())                     // x1
	pl.CreatePool(barPath, bazPath, fee500, common.TickMathGetSqrtRatioAtTick(0).ToString())                     // x1
	pl.CreatePool(consts.WUGNOT_PATH, consts.GNS_PATH, fee3000, common.TickMathGetSqrtRatioAtTick(0).ToString()) // x1

	{
		checkProtocolFeeBalance()
		// gns 300_000_000
	}
	std.TestSkipHeights(1)
}

func TestPositionMint_3(t *testing.T) {
	std.TestSetRealm(adminRealm)
	std.TestSetOrigSend(std.Coins{{"ugnot", 100000000000000}}, nil)
	wugnot.Deposit()
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(consts.WUGNOT_PATH, consts.GNS_PATH, fee3000, int32(-8040), int32(8040), "10000000000", "10000000000", "0", "0", max_timeout, admin, admin)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "10000000000")
	shouldEQ(t, amount1, "10000000000")

	{
		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		pn.Mint(barPath, fooPath, fee500, int32(-8000), int32(8000), "10000000000", "10000000000", "0", "0", max_timeout, admin, admin)
	}

	{
		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		pn.Mint(barPath, bazPath, fee500, int32(-8000), int32(8000), "10000000000", "10000000000", "0", "0", max_timeout, admin, admin)
	}

	{
		checkProtocolFeeBalance()
		// (still) gns 300_000_000
	}
	std.TestSkipHeights(1)
}

func TestStakerStakeToken(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gnft.Approve(a2u(consts.STAKER_ADDR), "1")

	sr.StakeToken(1)

	{
		checkProtocolFeeBalance()
		// gns 321_404_109
		// 21_404_109 == 10702054.5 * 2
		// => gns emission of staker is 10702054.5 for every block
		// => 2 block generated
		// => non token staked => zero staked => goes to protocol_fee
	}
	std.TestSkipHeights(1)
}

func TestCreateProject_01(t *testing.T) {
	std.TestSetRealm(adminRealm)

	foo.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
	std.TestSkipHeights(1)

	projectId := CreateProject(
		"Foo Protocol",
		fooPath,
		launchpadProject01Addr,
		uint64(1_000_000_000), // 1000000000
		"",
		"",
		uint64(10),                   // 100000000
		uint64(20),                   // 200000000
		uint64(70),                   // 700000000
		uint64(time.Now().Unix()+10), // 10s later
	)
	shouldEQ(t, projectId, `gno.land/r/onbloc/foo:127`)

	{
		checkProtocolFeeBalance()
		// (still) gns 321_404_109
	}
	std.TestSkipHeights(1)
}

func TestCreateProject_02(t *testing.T) {
	std.TestSetRealm(adminRealm)

	bar.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
	std.TestSkipHeights(1)

	projectId := CreateProject(
		"Bar Protocol",
		barPath,
		launchpadProject02Addr,
		uint64(1_000_000_000), // 1000000000
		"",
		"",
		uint64(10),                   // 100000000
		uint64(20),                   // 200000000
		uint64(70),                   // 700000000
		uint64(time.Now().Unix()+10), // 10s later
	)
	shouldEQ(t, projectId, `gno.land/r/onbloc/bar:129`)

	{
		checkProtocolFeeBalance()
		// (still) gns 321_404_109
	}
	std.TestSkipHeights(1)
}

func TestSkip10BlockToMakeProjectActive(t *testing.T) {
	{
		checkProtocolFeeBalance()
		// (still) gns 321_404_109
	}
	std.TestSkipHeights(10)
}

func TestDepositGnsToProject01Tier30_1GNS(t *testing.T) {
	// project01 recipient
	// g1d3sh2mnrdpcxzezswfhk5etrwscrzh6lyxj2sl

	std.TestSetRealm(launchpadDeposit01Realm)
	gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000))
	depositId := DepositGns("gno.land/r/onbloc/foo:127:30", uint64(1_000_000)) // 1 GNS
	shouldEQ(t, depositId, `gno.land/r/onbloc/foo:127:30:g1d3sh2mnrdpcxzezyv4cx7umfwscrzh6lzr9g7u:140`)

	{
		checkProtocolFeeBalance()
		// (still) gns 321_404_109
	}
	std.TestSkipHeights(1)
}

func TestDepositGnsToProject01Tier30_Another1GNS(t *testing.T) {
	// project01 recipient
	// g1d3sh2mnrdpcxzezswfhk5etrwscrzh6lyxj2sl

	std.TestSetRealm(launchpadDeposit02Realm)
	gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000))
	depositId := DepositGns("gno.land/r/onbloc/foo:127:30", uint64(1_000_000)) // 1 GNS
	shouldEQ(t, depositId, `gno.land/r/onbloc/foo:127:30:g1d3sh2mnrdpcxzezyv4cx7umfwscryh6llz2xdm:141`)

	{
		checkProtocolFeeBalance()
		// none

		rewards := ApiGetProjectRecipientRewardByAddress(launchpadProject01Addr)
		shouldEQ(t, rewards, `{"height":"141","now":"1234567926","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/gnoswap/v2/gns","amount":"321404109"}]}`)
		// gns 321_404_109
	}
	std.TestSkipHeights(1)
}

func TestDepositGnsToProject02Tier30_1GNS(t *testing.T) {
	// project02 recipient
	// g1d3sh2mnrdpcxzezswfhk5etrwscryh6le8ayrc

	std.TestSetRealm(launchpadDeposit03Realm)
	gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000))
	depositId := DepositGns("gno.land/r/onbloc/bar:129:30", uint64(1_000_000)) // 1 GNS
	shouldEQ(t, depositId, `gno.land/r/onbloc/bar:129:30:g1d3sh2mnrdpcxzezyv4cx7umfwscrxh6l560mmp:142`)

	{
		checkProtocolFeeBalance()
		// (still) none
	}
	std.TestSkipHeights(1)
}

func TestGovStakerDelegate(t *testing.T) {
	std.TestSetRealm(govDelegateRealm)
	gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
	gs.Delegate(govDelegateAddr, uint64(1_000_000))

	{
		checkProtocolFeeBalance()
		// (still) none
	}
	std.TestSkipHeights(1)
}

func TestCreatePool_4(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, quxPath, fee3000, common.TickMathGetSqrtRatioAtTick(0).ToString()) // x1

	{
		checkProtocolFeeBalance()
		// gns 100_000_000 // pool creation fee
	}
	std.TestSkipHeights(1)
}

// CREATED POOL LIST
// bar:foo:500
// bar:baz:500
// wugnot:gns:3000
// bar:qux:3000

func TestRouterSwapRoute01(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.ROUTER_ADDR), uint64(1_000_000))
	foo.Approve(a2u(consts.ROUTER_ADDR), uint64(1_000_000))

	amountIn, amountOut := rr.SwapRoute(
		barPath,
		fooPath,
		"100000",
		"EXACT_IN",
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500",
		"100",
		"1",
	)
	shouldEQ(t, amountIn, "100000")
	shouldEQ(t, amountOut, "-99800")

	{
		checkProtocolFeeBalance()
		// (still) gns 100_000_000 // pool creation fee
		// foo 149
		// > 0.15% of output
		// => 99800 * 0.15% = 149.7
	}
	std.TestSkipHeights(1)
}

func TestRouterSwapRoute02(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.ROUTER_ADDR), uint64(1_000_000))
	baz.Approve(a2u(consts.ROUTER_ADDR), uint64(1_000_000))

	amountIn, amountOut := rr.SwapRoute(
		bazPath,
		barPath,
		"100000",
		"EXACT_IN",
		"gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500",
		"100",
		"1",
	)
	shouldEQ(t, amountIn, "100000")
	shouldEQ(t, amountOut, "-99800")

	{
		checkProtocolFeeBalance()
		// (still) gns 100_000_000 // pool creation fee
		// (still) foo 149
		// bar 149
		// => 0.15% of output
		// => 99800 * 0.15% = 149.7
	}
	std.TestSkipHeights(1)
}

func TestRouterSwapRoute03(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)
	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

	amountIn, amountOut := rr.SwapRoute(
		consts.GNS_PATH,
		consts.WUGNOT_PATH,
		"100000",
		"EXACT_IN",
		"gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:3000",
		"100",
		"1",
	)
	shouldEQ(t, amountIn, "100000")
	shouldEQ(t, amountOut, "-99550")

	{
		checkProtocolFeeBalance()
		// (still) gns 100_000_000 // pool creation fee
		// (still) foo 149
		// (still) bar 149
		// wugnot 149
		// => 0.15% of output
		// => 99550 * 0.15% = 149.325
	}
	std.TestSkipHeights(1)
}

func TestCheckXGnsData(t *testing.T) {
	totalSupply := xgns.TotalSupply()
	shouldEQ(t, totalSupply, uint64(4_000_000))
	// project01 (first deposit)	1_000_000
	// project01 (second deposit) 1_000_000
	// project02 (first deposit)	1_000_000
	// govDelegate (delegate)			1_000_000
}

func TestCheckProject01AddrReward(t *testing.T) {
	rewards := ApiGetProjectRecipientRewardByAddress(launchpadProject01Addr)
	shouldEQ(t, rewards, `{"height":"148","now":"1234567940","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/gnoswap/v2/gns","amount":"371404109"},{"tokenPath":"gno.land/r/onbloc/bar","amount":"74"},{"tokenPath":"gno.land/r/onbloc/foo","amount":"74"},{"tokenPath":"gno.land/r/demo/wugnot","amount":"74"}]}`)
	// gns 371_404_109
	// > 321_404_109 previously (before 4th create pool and bunch of swaps)
	// > 50_000_000 newly

	// bar 74
	// foo 74
	// wugnot 74
}

func TestCheckProject02AddrReward(t *testing.T) {
	rewards := ApiGetProjectRecipientRewardByAddress(launchpadProject02Addr)
	shouldEQ(t, rewards, `{"height":"148","now":"1234567940","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"37"},{"tokenPath":"gno.land/r/onbloc/foo","amount":"37"},{"tokenPath":"gno.land/r/demo/wugnot","amount":"37"},{"tokenPath":"gno.land/r/gnoswap/v2/gns","amount":"25000000"}]}`)
	// bar 37
	// foo 37
	// wugnot 37
	// gns 25_000_000
}

func TestCheckGovDelegateReward(t *testing.T) {
	rewards := ApiGetProjectRecipientRewardByAddress(govDelegateAddr)
	shouldEQ(t, rewards, `{"height":"148","now":"1234567940","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"37"},{"tokenPath":"gno.land/r/onbloc/foo","amount":"37"},{"tokenPath":"gno.land/r/demo/wugnot","amount":"37"},{"tokenPath":"gno.land/r/gnoswap/v2/gns","amount":"25000000"}]}`)
	// bar 37
	// foo 37
	// wugnot 37
	// gns 25_000_000
}

// HELPERs
func checkProtocolFeeBalance() {
	println("[START] checkProtocolFeeBalance")
	pfRegistered := pf.GetRegisteredTokens()
	for _, token := range pfRegistered {
		balance := balanceOfByRegisterCall(token, consts.PROTOCOL_FEE_ADDR)
		if balance != 0 {
			println("token", token)
			println("balance", balance)
			println()
		}
	}
}
