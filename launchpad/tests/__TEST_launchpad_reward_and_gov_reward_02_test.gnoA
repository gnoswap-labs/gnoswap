package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"
	"gno.land/r/gnoswap/v2/gns"

	gs "gno.land/r/gnoswap/v2/gov/staker"
	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"
	rr "gno.land/r/gnoswap/v2/router"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"
)

var (
	launchpadRecipientAddr  = testutils.TestAddress("launchpadRecipient")
	launchpadRecipientRealm = std.NewUserRealm(launchpadRecipientAddr)
	// g1d3sh2mnrdpcxzezjv43kjurfv4h8gh6lduqj5v

	launchpadDepositAddr  = testutils.TestAddress("launchpadDeposit")
	launchpadDepositRealm = std.NewUserRealm(launchpadDepositAddr)
	// g1d3sh2mnrdpcxzezyv4cx7umfw3047h6l29lj5t

	govDelegateAddr  = testutils.TestAddress("govDelegate")
	govDelegateRealm = std.NewUserRealm(govDelegateAddr)
	// g1vahhv3r9d3jkwct5v4047h6lta047h6lnv8wwm

	dummyAddr  = testutils.TestAddress("dummy")
	dummyRealm = std.NewUserRealm(dummyAddr)
	// g1v36k6mteta047h6lta047h6lta047h6lz7gmv8

	max_timeout = int64(9999999999)
)

func init() {
	std.TestSetRealm(adminRealm)
	gns.Transfer(a2u(launchpadDepositAddr), uint64(1_000_000_000))
	gns.Transfer(a2u(govDelegateAddr), uint64(1_000_000_000))
	gns.Transfer(a2u(dummyAddr), uint64(1_000_000_000))
}

func TestPoolCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(0).ToString()) // x1
	std.TestSkipHeights(1)
}

func TestPositionMint(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, fooPath, fee500, int32(-8000), int32(8000), "10000000000", "10000000000", "0", "0", max_timeout, admin, admin)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "10000000000")
	shouldEQ(t, amount1, "10000000000")
}

func TestRouterSwapRoute(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.ROUTER_ADDR), uint64(100_000))
	foo.Approve(a2u(consts.ROUTER_ADDR), uint64(100_000))

	amountIn, amountOut := rr.SwapRoute(
		barPath,
		fooPath,
		"100000",
		"EXACT_IN",
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500",
		"100",
		"1",
	)
	shouldEQ(t, amountIn, "100000")
	shouldEQ(t, amountOut, "-99800")
}

func TestEarlyGovDelegateAndReward(t *testing.T) {
	std.TestSetRealm(dummyRealm)
	gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
	gs.Delegate(dummyAddr, uint64(1_000_000))
	std.TestSkipHeights(1)

	rewardJson := gs.GetClaimableRewardByAddress(dummyAddr)
	shouldEQ(t, rewardJson, `{"height":"125","now":"1234567894","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/foo","amount":"149"},{"tokenPath":"gno.land/r/gnoswap/v2/gns","amount":"100000000"}]}`)
	// foo 149
	// 0.15% of router swap fee

	// gns
	// 110_702_054
	// 100_000_000 // pool creation fee

	// no reward for project recipient
	{
		res := ApiGetProjectRecipientRewardByAddress(launchpadRecipientAddr)
		shouldEQ(t, res, `{"height":"125","now":"1234567894","emissionReward":"0"}`)
	}

	// no reward for gov delegate
	{
		res := gs.GetClaimableRewardByAddress(govDelegateAddr)
		shouldEQ(t, res, `{"height":"125","now":"1234567894","emissionReward":"0"}`)
	}
}

func TestCreateProject(t *testing.T) {
	std.TestSetRealm(adminRealm)

	obl.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
	std.TestSkipHeights(1)

	projectId := CreateProject(
		"Obl Protocol",
		oblPath,
		launchpadRecipientAddr,
		uint64(1_000_000_000), // 1000000000
		"",
		"",
		uint64(10),                   // 100000000
		uint64(20),                   // 200000000
		uint64(70),                   // 700000000
		uint64(time.Now().Unix()+10), // 10s later
	)
	shouldEQ(t, projectId, `gno.land/r/onbloc/obl:126`)
	std.TestSkipHeights(1)
}

func TestDepositGnsToTier30(t *testing.T) {
	std.TestSetRealm(launchpadDepositRealm)
	gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))

	// skip some blocks to make project active
	std.TestSkipHeights(4)
	depositId := DepositGns("gno.land/r/onbloc/obl:126:30", uint64(1_000_000_000)) // 1000000
	shouldEQ(t, depositId, `gno.land/r/onbloc/obl:126:30:g1d3sh2mnrdpcxzezyv4cx7umfw3047h6l29lj5t:131`)
	std.TestSkipHeights(1)
}

func TestGovDelegate(t *testing.T) {
	std.TestSetRealm(govDelegateRealm)
	gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000_000))
	gs.Delegate(govDelegateAddr, uint64(1_000_000_000))
	std.TestSkipHeights(1)
}

func TestMockProtocolFee(t *testing.T) {
	// admin > protocol_fee
	// send qux, bar for testing
	std.TestSetRealm(adminRealm)
	bar.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 100_000)
	qux.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 250_000)

	shouldEQ(t, bar.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(100000))
	shouldEQ(t, bar.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, bar.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))

	shouldEQ(t, qux.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(250000))
	shouldEQ(t, qux.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, qux.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))
	std.TestSkipHeights(1)
}

func TestClaimableRewardForProjectRecipient(t *testing.T) {
	res := ApiGetProjectRecipientRewardByAddress(launchpadRecipientAddr)
	shouldEQ(t, res, `{"height":"134","now":"1234567912","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"49975"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"124937"}]}`)
	// bar 49975
	// qux 124937
}

func TestClaimableRewardForGovernanceDelegate(t *testing.T) {
	res := gs.GetClaimableRewardByAddress(govDelegateAddr)
	shouldEQ(t, res, `{"height":"134","now":"1234567912","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"49975"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"124937"}]}`)
	// bar 49975
	// qux 124937
}

func TestClaimableRewardForEarlyDummy(t *testing.T) {
	res := gs.GetClaimableRewardByAddress(dummyAddr)
	shouldEQ(t, res, `{"height":"134","now":"1234567912","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/foo","amount":"149"},{"tokenPath":"gno.land/r/gnoswap/v2/gns","amount":"100000000"},{"tokenPath":"gno.land/r/onbloc/bar","amount":"49"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"124"}]}`)
	// foo 149
	// gns 100000000
	// bar 49
	// qux 124
}

func TestSkipFewBlock(t *testing.T) {
	std.TestSkipHeights(10)
}

func TestClaimableRewardForProjectRecipientMoreBlocks(t *testing.T) {
	res := ApiGetProjectRecipientRewardByAddress(launchpadRecipientAddr)
	shouldEQ(t, res, `{"height":"144","now":"1234567932","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"49975"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"124937"}]}`)
}

func TestClaimableRewardForGovernanceDelegateMoreBlocks(t *testing.T) {
	res := gs.GetClaimableRewardByAddress(govDelegateAddr)
	shouldEQ(t, res, `{"height":"144","now":"1234567932","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"49975"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"124937"}]}`)
}

func TestClaimableRewardForEarlyDummyMoreBlocks(t *testing.T) {
	res := gs.GetClaimableRewardByAddress(dummyAddr)
	shouldEQ(t, res, `{"height":"144","now":"1234567932","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/foo","amount":"149"},{"tokenPath":"gno.land/r/gnoswap/v2/gns","amount":"100000000"},{"tokenPath":"gno.land/r/onbloc/bar","amount":"49"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"124"}]}`)
}
