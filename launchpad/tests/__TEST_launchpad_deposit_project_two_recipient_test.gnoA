package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"

	"gno.land/r/gnoswap/v2/consts"
	gs "gno.land/r/gnoswap/v2/gov/staker"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v2/gns"
)

var (
	projectAddr   = testutils.TestAddress("projectAddr")
	projectAddr02 = testutils.TestAddress("projectAddr02")
	user01        = testutils.TestAddress("user01")

	projectRealm   = std.NewUserRealm(projectAddr)
	projectRealm02 = std.NewUserRealm(projectAddr02)
	user01Realm    = std.NewUserRealm(user01)
)

func init() {
	println("test_init")
}

func TestMockProtocolFee(t *testing.T) {
	// admin > protocol_fee
	// send qux, bar for testing
	std.TestSetRealm(gsaRealm)
	bar.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 1000)
	qux.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 2500)

	shouldEQ(t, bar.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(1000))
	shouldEQ(t, bar.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, bar.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))

	shouldEQ(t, qux.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(2500))
	shouldEQ(t, qux.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, qux.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))
}

func TestCreateProject(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	obl.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
	std.TestSkipHeights(1)

	projectId := CreateProject(
		oblPath,
		projectAddr,
		uint64(1_000_000_000), // 1000000000
		"gno.land/r/onbloc/foo*PAD*gno.land/r/onbloc/bar",
		"1*PAD*2",
		uint64(10),                   // 100000000
		uint64(20),                   // 200000000
		uint64(70),                   // 700000000
		uint64(time.Now().Unix()+10), // 10s later
	)
	shouldEQ(t, projectId, `gno.land/r/onbloc/obl:124`)
	std.TestSkipHeights(1)
}

func TestCreateProject02(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
	std.TestSkipHeights(1)

	projectId := CreateProject(
		barPath,
		projectAddr02,
		uint64(1_000_000_000), // 1000000000
		"",
		"",
		uint64(10),                   // 100000000
		uint64(20),                   // 200000000
		uint64(70),                   // 700000000
		uint64(time.Now().Unix()+10), // 10s later
	)
	shouldEQ(t, projectId, `gno.land/r/onbloc/bar:126`)
	std.TestSkipHeights(1)
}

func TestDepositGnsToTierProject01_Tier30(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	gns.Transfer(a2u(user01), uint64(1_000_000)) // to deposit
	// transfer some grc20 tokens to bypass project condition
	foo.Transfer(a2u(user01), uint64(10))
	bar.Transfer(a2u(user01), uint64(10))

	std.TestSetRealm(user01Realm)
	gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000))

	// skip some blocks to make project active
	std.TestSkipHeights(4)
	depositId := DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000)) // 1000000
	shouldEQ(t, depositId, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:131`)
	std.TestSkipHeights(1)
}

func TestDepositGnsToTierProject02_Tier180(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	gns.Transfer(a2u(user01), uint64(9_000_000)) // to deposit

	std.TestSetRealm(user01Realm)
	gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(9_000_000))

	// skip some blocks to make project active
	std.TestSkipHeights(4)
	depositId := DepositGns("gno.land/r/onbloc/bar:126:180", uint64(9_000_000)) // 9000000
	shouldEQ(t, depositId, `gno.land/r/onbloc/bar:126:180:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:136`)
	std.TestSkipHeights(1)
}

func TestCollectProtocolFeeByProject01Recipient(t *testing.T) {
	std.TestSetRealm(projectRealm)

	oldBar := bar.BalanceOf(a2u(projectAddr))
	oldQux := qux.BalanceOf(a2u(projectAddr))
	shouldEQ(t, oldBar, uint64(0))
	shouldEQ(t, oldQux, uint64(0))

	// check claimble reward
	res := gs.GetClaimableRewardByAddress(projectAddr)
	shouldEQ(t, res, `{"height":"137","now":"1234567918","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"189"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"474"}]}`)
	// shouldEQ(t, res, `{"height":"132","now":"1234567908","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"1000"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"2500"}]}`)

	CollectProtocolFee()

	newBar := bar.BalanceOf(a2u(projectAddr))
	newQux := qux.BalanceOf(a2u(projectAddr))
	shouldEQ(t, newBar, uint64(189))
	shouldEQ(t, newQux, uint64(474))

	std.TestSkipHeights(10) // pass some blocks
}

func TestCollectProtocolFeeByProject02Recipient(t *testing.T) {
	std.TestSetRealm(projectRealm02)

	oldBar := bar.BalanceOf(a2u(projectAddr02))
	oldQux := qux.BalanceOf(a2u(projectAddr02))
	shouldEQ(t, oldBar, uint64(0))
	shouldEQ(t, oldQux, uint64(0))

	// check claimble reward
	res := gs.GetClaimableRewardByAddress(projectAddr02)
	shouldEQ(t, res, `{"height":"147","now":"1234567938","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"810"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"2025"}]}`)

	CollectProtocolFee()

	newBar := bar.BalanceOf(a2u(projectAddr02))
	newQux := qux.BalanceOf(a2u(projectAddr02))
	shouldEQ(t, newBar, uint64(810))
	shouldEQ(t, newQux, uint64(2025))

	std.TestSkipHeights(10) // pass some blocks
}

func TestCheckClaimable(t *testing.T) {
	// check claimble reward
	claimableProject01 := gs.GetClaimableRewardByAddress(projectAddr)
	shouldEQ(t, claimableProject01, `{"height":"157","now":"1234567958","emissionReward":"0","protocolFees":[]}`)

	claimableProject02 := gs.GetClaimableRewardByAddress(projectAddr02)
	shouldEQ(t, claimableProject02, `{"height":"157","now":"1234567958","emissionReward":"0","protocolFees":[]}`)
}
