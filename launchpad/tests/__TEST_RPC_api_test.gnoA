package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"

	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v2/gns"
)

var (
	projectAddr   = testutils.TestAddress("projectAddr")
	projectAddr02 = testutils.TestAddress("projectAddr02")
	user01        = testutils.TestAddress("user01")

	projectRealm   = std.NewUserRealm(projectAddr)
	projectRealm02 = std.NewUserRealm(projectAddr02)
	user01Realm    = std.NewUserRealm(user01)
)

func init() {
	println("test_init")
}

func TestMockProtocolFee(t *testing.T) {
	// admin > protocol_fee
	// send qux, bar for testing
	std.TestSetRealm(gsaRealm)
	bar.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 1000)
	qux.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 2500)

	shouldEQ(t, bar.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(1000))
	shouldEQ(t, bar.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, bar.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))

	shouldEQ(t, qux.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(2500))
	shouldEQ(t, qux.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, qux.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))
}

func TestCreateProject(t *testing.T) {
	t.Run("recipient protocol_fee reward before creating project", func(t *testing.T) {
		// check before project create
		got := ApiGetProjectRecipientRewardByAddress(projectAddr)
		shouldEQ(t, got, `{"height":"123","now":"1234567890","emissionReward":"0"}`)
	})

	t.Run("create project", func(t *testing.T) {
		std.TestSetRealm(gsaRealm)
		obl.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
		std.TestSkipHeights(1)

		projectId := CreateProject(
			oblPath,
			projectAddr,
			uint64(1_000_000_000), // 1000000000
			"gno.land/r/onbloc/foo*PAD*gno.land/r/onbloc/bar",
			"1*PAD*2",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		shouldEQ(t, projectId, `gno.land/r/onbloc/obl:124`)
		std.TestSkipHeights(1)
	})

	t.Run("recipient protocol_fee reward after creating project", func(t *testing.T) {
		// check after project create
		got := ApiGetProjectRecipientRewardByAddress(projectAddr)
		shouldEQ(t, got, `{"height":"125","now":"1234567894","emissionReward":"0"}`)
	})
}

func TestCreateProject02(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
	std.TestSkipHeights(1)

	projectId := CreateProject(
		barPath,
		projectAddr02,
		uint64(1_000_000_000), // 1000000000
		"",
		"",
		uint64(10),                   // 100000000
		uint64(20),                   // 200000000
		uint64(70),                   // 700000000
		uint64(time.Now().Unix()+10), // 10s later
	)
	shouldEQ(t, projectId, `gno.land/r/onbloc/bar:126`)
	std.TestSkipHeights(1)
}

func TestDepositGnsToTierProject01_Tier30(t *testing.T) {
	t.Run("deposit to obl project, tier 30", func(t *testing.T) {
		std.TestSetRealm(gsaRealm)
		gns.Transfer(a2u(user01), uint64(1_000_000)) // to deposit
		// transfer some grc20 tokens to bypass project condition
		foo.Transfer(a2u(user01), uint64(10))
		bar.Transfer(a2u(user01), uint64(10))

		// user01 makes deposit
		std.TestSetRealm(user01Realm)
		gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000))

		// skip some blocks to make project active
		std.TestSkipHeights(4)
		depositId := DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000)) // 1000000
		shouldEQ(t, depositId, `gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:131`)
		std.TestSkipHeights(1)
	})

	t.Run("check deposit's project token", func(t *testing.T) {
		got := ApiGetDepositRewardByDepositId("gno.land/r/onbloc/obl:124:30:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:131")
		shouldEQ(t, got, uint64(0)) // reward occured, but not claimable yet
	})

	t.Run("check project's recipient protocol_fee reward", func(t *testing.T) {
		got := ApiGetProjectRecipientRewardByAddress(projectAddr)
		shouldEQ(t, got, `{"height":"132","now":"1234567908","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"1000"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"2500"}]}`)
	})

	t.Run("check claimable deposit", func(t *testing.T) {
		got := ApiGetClaimableDepositByAddress(user01)
		shouldEQ(t, got, uint64(0))
	})
}

func TestCollectProtocolFeeByProject01Recipient(t *testing.T) {
	t.Run("check project's recipient protocol_fee reward", func(t *testing.T) {
		got := ApiGetProjectRecipientRewardByAddress(projectAddr)
		shouldEQ(t, got, `{"height":"132","now":"1234567908","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"1000"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"2500"}]}`)
	})

	t.Run("claim protocol reward", func(t *testing.T) {
		std.TestSetRealm(projectRealm)

		oldBar := bar.BalanceOf(a2u(projectAddr))
		oldQux := qux.BalanceOf(a2u(projectAddr))
		shouldEQ(t, oldBar, uint64(0))
		shouldEQ(t, oldQux, uint64(0))

		// check claimble reward
		res := ApiGetProjectRecipientRewardByAddress(projectAddr)
		shouldEQ(t, res, `{"height":"132","now":"1234567908","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"1000"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"2500"}]}`)
		// bar 1000
		// qux 2500

		CollectProtocolFee()

		newBar := bar.BalanceOf(a2u(projectAddr))
		newQux := qux.BalanceOf(a2u(projectAddr))
		shouldEQ(t, newBar, uint64(1000))
		shouldEQ(t, newQux, uint64(2500))

		std.TestSkipHeights(10) // pass some blocks
	})

	t.Run("check project's recipient protocol_fee reward after claiming it", func(t *testing.T) {
		got := ApiGetProjectRecipientRewardByAddress(projectAddr)
		shouldEQ(t, got, `{"height":"142","now":"1234567928","emissionReward":"0","protocolFees":[]}`)
	})
}

func TestApiGetClaimableDepositByAddress(t *testing.T) {
	t.Run("tier 30days isn't over", func(t *testing.T) {
		got := ApiGetClaimableDepositByAddress(user01)
		shouldEQ(t, got, uint64(0))
	})

	t.Run("tier 30days is over", func(t *testing.T) {
		std.TestSkipHeights(int64(TIMESTAMP_30DAYS) / 2)
		got := ApiGetClaimableDepositByAddress(user01)
		shouldEQ(t, got, uint64(1_000_000))

		// and actual collect
		std.TestSetRealm(user01Realm)
		claimed := CollectDepositGns()
		shouldEQ(t, claimed, uint64(1_000_000))
	})

	t.Run("check after collect deposit", func(t *testing.T) {
		got := ApiGetClaimableDepositByAddress(user01)
		shouldEQ(t, got, uint64(0))

		std.TestSetRealm(user01Realm)
		claimed := CollectDepositGns()
		shouldEQ(t, claimed, uint64(0))
	})
}
