package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"

	"gno.land/r/gnoswap/v2/consts"
	"gno.land/r/gnoswap/v2/gns"

	gs "gno.land/r/gnoswap/v2/gov/staker"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"
)

var (
	launchpadRecipientAddr  = testutils.TestAddress("launchpadRecipient")
	launchpadRecipientRealm = std.NewUserRealm(launchpadRecipientAddr)
	// g1d3sh2mnrdpcxzezjv43kjurfv4h8gh6lduqj5v

	launchpadDepositAddr  = testutils.TestAddress("launchpadDeposit")
	launchpadDepositRealm = std.NewUserRealm(launchpadDepositAddr)
	// g1d3sh2mnrdpcxzezyv4cx7umfw3047h6l29lj5t

	govDelegateAddr  = testutils.TestAddress("govDelegate")
	govDelegateRealm = std.NewUserRealm(govDelegateAddr)
	// g1vahhv3r9d3jkwct5v4047h6lta047h6lnv8wwm
)

func init() {
	std.TestSetRealm(adminRealm)
	gns.Transfer(a2u(launchpadDepositAddr), uint64(1_000_000_000))
	gns.Transfer(a2u(govDelegateAddr), uint64(1_000_000_000))
}

func TestCreateProject(t *testing.T) {
	std.TestSetRealm(adminRealm)

	obl.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))
	std.TestSkipHeights(1)

	projectId := CreateProject(
		"Obl Protocol",
		oblPath,
		launchpadRecipientAddr,
		uint64(1_000_000_000), // 1000000000
		"",
		"",
		uint64(10),                   // 100000000
		uint64(20),                   // 200000000
		uint64(70),                   // 700000000
		uint64(time.Now().Unix()+10), // 10s later
	)
	shouldEQ(t, projectId, `gno.land/r/onbloc/obl:124`)
	std.TestSkipHeights(1)
}

func TestDepositGnsToTier30(t *testing.T) {
	std.TestSetRealm(launchpadDepositRealm)
	gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000_000))

	// skip some blocks to make project active
	std.TestSkipHeights(4)
	depositId := DepositGns("gno.land/r/onbloc/obl:124:30", uint64(1_000_000_000)) // 1000000
	shouldEQ(t, depositId, `gno.land/r/onbloc/obl:124:30:g1d3sh2mnrdpcxzezyv4cx7umfw3047h6l29lj5t:129`)
	std.TestSkipHeights(1)
}

func TestGovDelegate(t *testing.T) {
	std.TestSetRealm(govDelegateRealm)
	gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000_000))
	gs.Delegate(govDelegateAddr, uint64(1_000_000_000))
	std.TestSkipHeights(1)
}

func TestMockProtocolFee(t *testing.T) {
	// admin > protocol_fee
	// send qux, bar for testing
	std.TestSetRealm(adminRealm)
	bar.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 100_000)
	qux.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 250_000)

	shouldEQ(t, bar.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(100000))
	shouldEQ(t, bar.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, bar.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))

	shouldEQ(t, qux.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(250000))
	shouldEQ(t, qux.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, qux.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))
	std.TestSkipHeights(1)
}

func TestClaimableRewardForProjectRecipient(t *testing.T) {
	res := ApiGetProjectRecipientRewardByAddress(launchpadRecipientAddr)
	shouldEQ(t, res, `{"height":"132","now":"1234567908","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"50000"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"125000"}]}`)
	// bar 99
	// qux 249
}

func TestClaimableRewardForGovernanceDelegate(t *testing.T) {
	res := gs.GetClaimableRewardByAddress(govDelegateAddr)
	shouldEQ(t, res, `{"height":"132","now":"1234567908","emissionReward":"0","protocolFees":[{"tokenPath":"gno.land/r/onbloc/bar","amount":"50000"},{"tokenPath":"gno.land/r/onbloc/qux","amount":"125000"}]}`)
	// bar 99900
	// qux 249750
}
