package staker

import (
	"std"
	"testing"
	"time"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/wugnot"

	"gno.land/r/demo/gnft"

	"gno.land/r/demo/consts"
)

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/demo/bar:gno.land/r/demo/foo:500"] = 1 // DEV

	// tier 2
	poolTiers["GNS/USDT_500"] = 2
	poolTiers["ATOM/GNS_500"] = 2

	// tier 3
	poolTiers["ATOM/GNOT_500"] = 3
	poolTiers["ATOM/USDT_500"] = 3
	poolTiers["ATOM/WETH_500"] = 3
}

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	pl.InitManual()
	std.TestSkipHeights(1)

	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	std.TestSkipHeights(1)

	pl.CreatePool(barPath, fooPath, 500, "130621891405341611593710811006") // tick 10_000 â‰ˆ x2.7
	std.TestSkipHeights(1)
}

func TestPositionMint01(t *testing.T) {
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), 367)
	foo.Approve(a2u(consts.POOL_ADDR), 999)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		fooPath,      // token1
		uint16(500),  // fee
		int32(9000),  // tickLower
		int32(11000), // tickUpper
		"1000",       // amount0Desired
		"1000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
	)
	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 1)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // test1
	shouldEQ(t, amount0, "367")
	shouldEQ(t, amount1, "999")

	// approve nft to staker for staking
	std.TestSetPrevAddr(test1)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestPositionMint02(t *testing.T) {
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), 3978)
	foo.Approve(a2u(consts.POOL_ADDR), 4999)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		fooPath,      // token1
		uint16(500),  // fee
		int32(9100),  // tickLower
		int32(12000), // tickUpper
		"5000",       // amount0Desired
		"5000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
	)
	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 2)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // test1
	shouldEQ(t, amount0, "3978")
	shouldEQ(t, amount1, "4999")

	// approve nft to staker
	std.TestSetPrevAddr(test1)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetPrevAddr(test1)

	// send
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.IssueCoin(test1, "ugnot", 10_000_000_000)
	std.TestSetOrigSend(std.Coins{{"ugnot", 10_000_000_000}}, nil)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 10_000_000_000)

	// Deposit(wrap)
	wugnot.Deposit()
	std.TestSkipHeights(1)

	wugnot.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	std.TestSkipHeights(1)

	CreateExternalIncentive(
		"gno.land/r/demo/bar:gno.land/r/demo/foo:500", // targetPoolPath
		consts.WRAPPED_WUGNOT,                         // rewardToken
		"10000000000",                                 // rewardAmount
		time.Now().Unix(),                             // startTimestamp
		time.Now().Unix()+TIMESTAMP_90DAYS,            // endTimestamp
	)
	std.TestSkipHeights(1)
}

func TestStakeToken01(t *testing.T) {
	std.TestSetPrevAddr(test1)
	StakeToken(1) // GNFT tokenId
	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 1)
}

func TestStakeToken02(t *testing.T) {
	std.TestSetPrevAddr(test1)
	StakeToken(2) // GNFT tokenId
	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 2)
}

func TestUnstakeToken01(t *testing.T) {
	std.TestSetPrevAddr(consts.INTERNAL_REWARD_ACCOUNT)
	gns.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX) // internal reward distribution
	std.TestSkipHeights(1)

	std.TestSetPrevAddr(test1)
	UnstakeToken(1) // GNFT tokenId
	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(1)), test1)

	// check reward
	shouldEQ(t, gns.BalanceOf(a2u(test1)), 99500006126) // internal
	shouldEQ(t, wugnot.BalanceOf(a2u(test1)), 315)      // external
}

func TestUnstakeToken02(t *testing.T) {
	std.TestSetPrevAddr(test1)
	UnstakeToken(2) // GNFT tokenId
	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), test1)

	// check reward
	shouldEQ(t, gns.BalanceOf(a2u(test1)), 99500046964) // internal
	shouldEQ(t, wugnot.BalanceOf(a2u(test1)), 2415)     // external
}

func TestEndExternalIncentive(t *testing.T) {
	std.TestSetOrigCaller(test1)
	std.TestSkipHeights(9999999)
	EndExternalIncentive(std.GetOrigCaller(), "gno.land/r/demo/bar:gno.land/r/demo/foo:500", consts.WRAPPED_WUGNOT) // use same parameter as CreateExternalIncentive()
	std.TestSkipHeights(1)

	shouldEQ(t, len(incentives), 0)
	shouldEQ(t, len(poolIncentives["gno.land/r/demo/bar:gno.land/r/demo/foo:500"]), 0)
}
