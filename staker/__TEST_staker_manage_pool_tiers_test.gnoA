package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	pl "gno.land/r/gnoswap/v1/pool"

	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/gnoswap/v1/consts"

	"gno.land/r/gnoswap/v1/gns"
)

func TestManagePoolTiers(t *testing.T) {
	testCreatePool(t)
	testSetPoolTierByAdmin(t)
	testGetPoolsWithTierStruct(t)
	testChangePoolTierByAdmin(t)
	testGetPoolsWithTier(t)
	testGetPoolsWithEmissionGnsAmount(t)
	testSetAnotherPoolTier3(t)
	testRemovePoolTierByAdmin(t)
	testGetPoolsWithTierAfterRemove(t)
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*2)
		std.TestSkipHeights(1)

		pl.CreatePool(barPath, fooPath, 500, common.TickMathGetSqrtRatioAtTick(-10000).ToString())
		pl.CreatePool(barPath, fooPath, 100, common.TickMathGetSqrtRatioAtTick(-10000).ToString())

		std.TestSkipHeights(1)
	})
}

func testSetPoolTierByAdmin(t *testing.T) {
	t.Run("set pool tier by admin", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		SetPoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500", 2)

		if poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"].tier != 2 {
			t.Error("Expected tier to be 2")
		}
	})
}

func testGetPoolsWithTierStruct(t *testing.T) {
	t.Run("get pools with tier struct", func(t *testing.T) {
		poolTiers := GetPoolsWithTierStruct()
		if len(poolTiers) != 2 {
			t.Error("Expected 2 pools")
		}
	})
}

func testChangePoolTierByAdmin(t *testing.T) {
	t.Run("change pool tier by admin", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		ChangePoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500", 3)

		if poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"].tier != 3 {
			t.Error("Expected tier to be 3")
		}
	})
}

func testGetPoolsWithTier(t *testing.T) {
	t.Run("get pools with tier", func(t *testing.T) {
		poolTiers := GetPoolsWithTier()
		uassert.Equal(t, len(poolTiers), 2)
		uassert.Equal(t, poolTiers[0], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000_1")
		uassert.Equal(t, poolTiers[1], "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500_3")
	})
}

func testGetPoolsWithEmissionGnsAmount(t *testing.T) {
	t.Run("get pools with emission gns amount", func(t *testing.T) {
		poolTiers := GetPoolsWithEmissionGnsAmount()
		uassert.Equal(t, poolTiers, `{"stat":{"height":125,"timestamp":1234567894},"response":[{"poolPath":"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000","rewardToken":"gno.land/r/gnoswap/v1/gns","startTimestamp":1234567890,"tier":1,"amount":540000000000000},{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardToken":"gno.land/r/gnoswap/v1/gns","startTimestamp":1234567894,"tier":3,"amount":135000000000000}]}`)
	})
}

func testSetAnotherPoolTier3(t *testing.T) {
	t.Run("set another pool tier 3", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		SetPoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100", 3)

		if poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100"].tier != 3 {
			t.Error("Expected tier to be 3")
		}

		poolTiers := GetPoolsWithEmissionGnsAmount()
		uassert.Equal(t, poolTiers, `{"stat":{"height":125,"timestamp":1234567894},"response":[{"poolPath":"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000","rewardToken":"gno.land/r/gnoswap/v1/gns","startTimestamp":1234567890,"tier":1,"amount":540000000000000},{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardToken":"gno.land/r/gnoswap/v1/gns","startTimestamp":1234567894,"tier":3,"amount":67500000000000},{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100","rewardToken":"gno.land/r/gnoswap/v1/gns","startTimestamp":1234567894,"tier":3,"amount":67500000000000}]}`)
	})
}

func testRemovePoolTierByAdmin(t *testing.T) {
	t.Run("remove pool tier by admin", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		RemovePoolTierByAdmin("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")

		if len(poolTiers) != 2 {
			t.Error("Expected 2 pool")
		}
	})
}

func testGetPoolsWithTierAfterRemove(t *testing.T) {
	t.Run("get pools with tier after remove", func(t *testing.T) {
		poolTiers := GetPoolsWithTier()
		uassert.Equal(t, len(poolTiers), 2)
		uassert.Equal(t, poolTiers[0], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000_1")
		uassert.Equal(t, poolTiers[1], "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100_3")
	})
}
