package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/json"

	pl "gno.land/r/gnoswap/pool"
	pn "gno.land/r/gnoswap/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/foo"
	"gno.land/r/gnoswap/gns"
	"gno.land/r/demo/obl"

	"gno.land/r/gnoswap/gnft"
	"gno.land/r/gnoswap/consts"
)

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/demo/bar:gno.land/r/demo/foo:500"] = 1 // DEV

	// tier 2
	poolTiers["GNS/USDT_500"] = 2
	poolTiers["ATOM/GNS_500"] = 2

	// tier 3
	poolTiers["ATOM/GNOT_500"] = 3
	poolTiers["ATOM/USDT_500"] = 3
	poolTiers["ATOM/WETH_500"] = 3

	// set pool create fee to 0 for testing
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)
	pl.SetPoolCreationFee(0)
}

func TestPoolCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	std.TestSkipHeights(1)

	pl.CreatePool(fooPath, barPath, uint32(500), "130621891405341611593710811006") // tick 10_000 â‰ˆ x2.7
	// ---       event: {GNOSWAP gno.land/r/gnoswap/pool CreatePool [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}

	std.TestSkipHeights(1)
}

func TestPositionMint01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		fooPath,      // token0
		barPath,      // token1
		uint32(500),  // fee
		int32(9000),  // tickLower
		int32(11000), // tickUpper
		"1000",       // amount0Desired
		"1000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/position Mint [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower -11000} {p_tickUpper -9000} {tokenId 1} {liquidity 12437} {amount0 1000} {amount1 368}]}

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 1)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "1000")
	shouldEQ(t, amount1, "368")

	// approve nft to staker for staking
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestPositionMint02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		fooPath,      // token0
		barPath,      // token1
		uint32(500),  // fee
		int32(9100),  // tickLower
		int32(12000), // tickUpper
		"5000",       // amount0Desired
		"5000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/position Mint [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower -12000} {p_tickUpper -9100} {tokenId 2} {liquidity 68925} {amount0 5000} {amount1 3979}]}

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 2)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "5000")
	shouldEQ(t, amount1, "3979")

	// approve nft to staker
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	std.TestSkipHeights(1)

	AddToken(oblPath)

	CreateExternalIncentive(
		"gno.land/r/demo/bar:gno.land/r/demo/foo:500", // targetPoolPath
		oblPath,                     // rewardToken
		"1000000000",                // rewardAmount
		1234569600,                  // startTimestamp
		1234569600+TIMESTAMP_90DAYS, // endTimestamp
	)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker CreateExternalIncentive [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_rewardToken gno.land/r/demo/obl} {p_rewardAmount 1000000000} {p_startTimestamp 1234569600} {p_endTimestamp 1242345600}]}

	std.TestSkipHeights(1)

	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	std.TestSkipHeights(1)
	CreateExternalIncentive("gno.land/r/demo/bar:gno.land/r/demo/foo:500", oblPath, "100000000", 1234569600, 1234569600+TIMESTAMP_90DAYS)
	std.TestSkipHeights(1)
}

func TestStakeToken01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(1) // GNFT tokenId
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker StakeToken [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {amount0 1000} {amount1 368}]}

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 1)
}

func TestStakeToken02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(2) // GNFT tokenId
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker StakeToken [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 2} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {amount0 5000} {amount1 3979}]}

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 2)
}

func TestApiGetStakes(t *testing.T) {
	gss := ApiGetStakes()

	root, err := json.Unmarshal([]byte(gss))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 2)
}

func TestApiGetRewardTokens(t *testing.T) {
	grt := ApiGetRewardTokens()

	root, err := json.Unmarshal([]byte(grt))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 1)
}

func TestUnstakeToken01(t *testing.T) {
	std.TestSkipHeights(350)

	std.TestSetRealm(gsaRealm)
	UnstakeToken(1) // GNFT tokenId
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker handleRewardFee [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenPath gno.land/r/demo/obl} {p_internal false} {feeAmount 7}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker CollectReward [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {rewardToken gno.land/r/demo/obl} {recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount 756}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker handleRewardFee [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenPath gno.land/r/gnoswap/gns} {p_internal true} {feeAmount 435}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker CollectReward [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {rewardToken gno.land/r/gnoswap/gns} {recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount 43124}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker UnstakeToken [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 1} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {from g1puv9dz470prjshjm9qyg25dyfvrgph2kvjph68} {to g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 1000} {amount1 368}]}

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(1)), gsa)

	// check reward
	shouldEQ(t, gns.BalanceOf(a2u(gsa)), 100000137236872) // internal
	shouldEQ(t, obl.BalanceOf(a2u(gsa)), 99998900000712)  // external
}

func TestUnstakeToken02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	UnstakeToken(2) // GNFT tokenId
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker handleRewardFee [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenPath gno.land/r/demo/obl} {p_internal false} {feeAmount 53}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker CollectReward [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 2} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {rewardToken gno.land/r/demo/obl} {recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount 5249}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker handleRewardFee [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenPath gno.land/r/gnoswap/gns} {p_internal true} {feeAmount 2904}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker CollectReward [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 2} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {rewardToken gno.land/r/gnoswap/gns} {recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount 287496}]}
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker UnstakeToken [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_tokenId 2} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {from g1puv9dz470prjshjm9qyg25dyfvrgph2kvjph68} {to g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 5000} {amount1 3979}]}

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), gsa)

	// check reward
	shouldEQ(t, gns.BalanceOf(a2u(gsa)), 100000982268005) // internal
	shouldEQ(t, obl.BalanceOf(a2u(gsa)), 99998900004932)  // external
}

func TestEndExternalIncentive(t *testing.T) {
	shouldEQ(t, len(incentives), 1)

	std.TestSetOrigCaller(gsa)

	// incentive time isn't over yet
	shouldPanicWithMsg(t, func() {
		EndExternalIncentive(gsa.String(), "gno.land/r/demo/bar:gno.land/r/demo/foo:500", "gno.land/r/demo/obl")
	}, "[STAKER] staker.gno__EndExternalIncentive() || cannot end incentive before endTimestamp(1242345600), current(1234569730)")

	std.TestSkipHeights(9999999)
	EndExternalIncentive(gsa.String(), "gno.land/r/demo/bar:gno.land/r/demo/foo:500", "gno.land/r/demo/obl") // use same parameter as CreateExternalIncentive()
	// ---       event: {GNOSWAP gno.land/r/gnoswap/staker EndExternalIncentive [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_rewardToken gno.land/r/demo/obl} {p_refundee g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {end_by g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {refund_amount 0}]}

	shouldEQ(t, len(incentives), 0)
	shouldEQ(t, len(poolIncentives["gno.land/r/demo/bar:gno.land/r/demo/foo:500"]), 0)
}
