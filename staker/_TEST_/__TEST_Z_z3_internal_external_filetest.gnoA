package main

import (
	"std"
	"strconv"
	"testing"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/obl"
	"gno.land/r/demo/qux"
	"gno.land/r/demo/wugnot"

	"gno.land/r/demo/gnft"

	"gno.land/p/demo/grc/grc721"
	pusers "gno.land/p/demo/users"

	"gno.land/r/demo/gnoswap/common"
	"gno.land/r/demo/gnoswap/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"
	rr "gno.land/r/demo/router"
	sr "gno.land/r/demo/staker"
)

var (
	gsa std.Address = consts.GNOSWAP_ADMIN
	ira std.Address = consts.INTERNAL_REWARD_ACCOUNT

	fooPath string = "gno.land/r/demo/foo"
	barPath string = "gno.land/r/demo/bar"
	bazPath string = "gno.land/r/demo/baz"
	quxPath string = "gno.land/r/demo/qux"

	oblPath string = "gno.land/r/demo/obl"

	fee100  uint32 = 100
	fee500  uint32 = 500
	fee3000 uint32 = 3000

	maxTimeout int64 = 9999999999

	maxApprove uint64 = 18446744073709551615

	TIMESTAMP_90DAYS int64 = 7776000

	// TESTING
	t *testing.T
)

// Realms to mock frames
var (
	gsaRealm = std.NewUserRealm(gsa)
	iraRealm = std.NewUserRealm(ira)

	posRealm = std.NewCodeRealm(consts.POSITION_PATH)
	rouRealm = std.NewCodeRealm(consts.ROUTER_PATH)
	stkRealm = std.NewCodeRealm(consts.STAKER_PATH)
)

type FooToken struct{}

func (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return foo.Transfer
}
func (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return foo.TransferFrom
}
func (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return foo.BalanceOf
}
func (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return foo.Approve
}

type BarToken struct{}

func (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return bar.Transfer
}
func (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return bar.TransferFrom
}
func (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return bar.BalanceOf
}
func (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return bar.Approve
}

type BazToken struct{}

func (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return baz.Transfer
}
func (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return baz.TransferFrom
}
func (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return baz.BalanceOf
}
func (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return baz.Approve
}

type QuxToken struct{}

func (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return qux.Transfer
}
func (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return qux.TransferFrom
}
func (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return qux.BalanceOf
}
func (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return qux.Approve
}

type WugnotToken struct{}

func (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return wugnot.Transfer
}
func (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return wugnot.TransferFrom
}
func (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return wugnot.BalanceOf
}
func (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return wugnot.Approve
}

type OBLToken struct{}

func (OBLToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return obl.Transfer
}
func (OBLToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return obl.TransferFrom
}
func (OBLToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return obl.BalanceOf
}
func (OBLToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return obl.Approve
}

type GNSToken struct{}

func (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return gns.Transfer
}

func (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return gns.TransferFrom
}

func (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return gns.BalanceOf
}

func (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return gns.Approve
}

/* HELPER FUNCTIONS */
func a2u(addr std.Address) pusers.AddressOrName {
	return pusers.AddressOrName(addr)
}

func tid(tokenId interface{}) grc721.TokenID {
	switch tokenId.(type) {
	case string:
		return grc721.TokenID(tokenId.(string))
	case int:
		return grc721.TokenID(strconv.Itoa(tokenId.(int)))
	case uint64:
		return grc721.TokenID(strconv.Itoa(int(tokenId.(uint64))))
	case grc721.TokenID:
		return tokenId.(grc721.TokenID)
	default:
		panic("tid() || unsupported tokenId type")
	}
}

func ugnotBalanceOf(addr std.Address) uint64 {
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)

	coins := testBanker.GetCoins(addr)
	if len(coins) == 0 {
		return 0
	}

	return uint64(coins.AmountOf("ugnot"))
}

func init() {
	// TOKEN REGISTER
	std.TestSetRealm(gsaRealm)
	std.TestSetOrigCaller(gsa)

	pl.RegisterGRC20Interface("gno.land/r/demo/foo", FooToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/bar", BarToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/baz", BazToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/qux", QuxToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/obl", OBLToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/wugnot", WugnotToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/gns", GNSToken{})

	rr.RegisterGRC20Interface("gno.land/r/demo/foo", FooToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/bar", BarToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/baz", BazToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/qux", QuxToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/obl", OBLToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/wugnot", WugnotToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/gns", GNSToken{})

	sr.RegisterGRC20Interface("gno.land/r/demo/foo", FooToken{})
	sr.RegisterGRC20Interface("gno.land/r/demo/bar", BarToken{})
	sr.RegisterGRC20Interface("gno.land/r/demo/baz", BazToken{})
	sr.RegisterGRC20Interface("gno.land/r/demo/qux", QuxToken{})
	sr.RegisterGRC20Interface("gno.land/r/demo/obl", OBLToken{})
	sr.RegisterGRC20Interface("gno.land/r/demo/wugnot", WugnotToken{})
	sr.RegisterGRC20Interface("gno.land/r/demo/gns", GNSToken{})
}

/* START TEST */
func main() {
	createPool()
	setPoolTier()
	mintBarQux()
	mintBarBaz()
	mintFooQux()
	createExternalIncentive()
	stakeTier01()
	stakeTier02()
	stakeExternal()
	collectReward01()
	collectReward01Again()
	collectExternalReward()
}

func createPool() {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE*0)
	std.TestSkipHeights(1)

	pl.CreatePool(barPath, quxPath, fee500, common.TickMathGetSqrtRatioAtTick(10_000).ToString())
	pl.CreatePool(barPath, bazPath, fee100, common.TickMathGetSqrtRatioAtTick(0).ToString())
	pl.CreatePool(fooPath, quxPath, fee500, common.TickMathGetSqrtRatioAtTick(0).ToString())
	std.TestSkipHeights(3)
}

func setPoolTier() {
	std.TestSetRealm(gsaRealm)

	sr.SetPoolTier("gno.land/r/demo/bar:gno.land/r/demo/qux:500", 1)
	sr.SetPoolTier("gno.land/r/demo/bar:gno.land/r/demo/baz:100", 1)

	sr.SetPoolTier("gno.land/r/demo/foo:gno.land/r/demo/qux:500", 2)
}

func mintBarQux() {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(stkRealm)
	pn.Mint(barPath, quxPath, fee500, 9000, 11000, "100000", "100000", "0", "0", maxTimeout, gsa.String())

}

func mintBarBaz() {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(stkRealm)
	pn.Mint(barPath, bazPath, fee100, -1000, 1000, "100000", "100000", "0", "0", maxTimeout, gsa.String())

}

func mintFooQux() {
	std.TestSetRealm(gsaRealm)

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(stkRealm)
	pn.Mint(fooPath, quxPath, fee500, -1000, 11000, "100000", "100000", "0", "0", maxTimeout, gsa.String())

}

func createExternalIncentive() {
	std.TestSetRealm(gsaRealm)

	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	std.TestSkipHeights(1)

	sr.CreateExternalIncentive(
		"gno.land/r/demo/foo:gno.land/r/demo/qux:500", // targetPoolPath
		oblPath,                     // rewardToken
		"1000000000",                // rewardAmount
		1234569600,                  // startTimestamp
		1234569600+TIMESTAMP_90DAYS, // endTimestamp
	)
	std.TestSkipHeights(1)
}

func stakeTier01() {
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(consts.STAKER_ADDR), tid(1))
	sr.StakeToken(1)

	std.TestSkipHeights(2)
}

func stakeTier02() {
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(consts.STAKER_ADDR), tid(2))
	sr.StakeToken(2)

	std.TestSkipHeights(2)
}

func stakeExternal() {
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(consts.STAKER_ADDR), tid(3))
	sr.StakeToken(3)

	std.TestSkipHeights(2)
}

func collectReward01() {
	std.TestSetRealm(iraRealm)
	gns.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX) // internal reward distribution
	std.TestSkipHeights(1)

	gnsBal := gns.BalanceOf(a2u(gsa))

	if gnsBal != 500000000000000 {
		panic("collectReward01() || gnsBal != 500000000000000")
	}

	std.TestSetRealm(gsaRealm)

	sr.CollectReward(1)

	gnsBal = gns.BalanceOf(a2u(gsa))

	if gnsBal != 500000000005336 {
		panic("collectReward01() || gnsBal != 500000000005336")
	}
}

func collectReward01Again() {
	std.TestSetRealm(gsaRealm)

	gnsBal := gns.BalanceOf(a2u(gsa))

	if gnsBal != 500000000005336 {
		panic("collectReward01Again() || gnsBal != 500000000005336")
	}

	// ACCELERATE TIME
	std.TestSkipHeights(1000)

	sr.CollectReward(1)
	std.TestSkipHeights(1)

	gnsBal = gns.BalanceOf(a2u(gsa))

	if gnsBal != 500000000767636 {
		panic("collectReward01() || gnsBal != 500000000767636")
	}
}

func collectExternalReward() {
	std.TestSetRealm(gsaRealm)

	oblBal := obl.BalanceOf(a2u(gsa))

	if oblBal != 99999000000000 {
		panic("collectExternalReward() || oblBal != 99999000000000")
	}

	sr.CollectReward(3)
	oblBal = obl.BalanceOf(a2u(gsa))

	if oblBal != 99999000128332 {
		panic("collectExternalReward() || oblBal != 99999000128332")
	}
}

// Output:
//
