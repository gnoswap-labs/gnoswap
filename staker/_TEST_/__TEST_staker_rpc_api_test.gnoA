package staker

import (
	"std"
	"testing"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/obl"
	"gno.land/r/demo/qux"

	"gno.land/r/demo/gnft"
	"gno.land/r/demo/gnoswap/consts"
)

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/demo/bar:gno.land/r/demo/foo:500"] = 1 // DEV

	// tier 2
	poolTiers["gno.land/r/demo/baz:gno.land/r/demo/qux:500"] = 2
	poolTiers["ATOM:GNS:500"] = 2

	// tier 3
	poolTiers["ATOM:GNOT:500"] = 3
	poolTiers["ATOM:USDT:500"] = 3
	poolTiers["ATOM:WETH:500"] = 3
}

func TestPoolCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	std.TestSkipHeights(1)

	pl.CreatePool(fooPath, barPath, 500, "130621891405341611593710811006") // tick 10_000 ≈ x2.7
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}

	pl.CreatePool(bazPath, quxPath, 500, "130621891405341611593710811006") // tick 10_000 ≈ x2.7
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500}]}

	std.TestSkipHeights(1)
}

func TestPositionMintFooBar01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		fooPath,      // token0
		barPath,      // token1
		uint16(500),  // fee
		int32(9000),  // tickLower
		int32(11000), // tickUpper
		"1000",       // amount0Desired
		"1000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower -11000} {p_tickUpper -9000} {tokenId 1} {liquidity 12437} {amount0 1000} {amount1 368}]}

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 1)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "1000")
	shouldEQ(t, amount1, "368")

	// approve nft to staker for staking
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestPositionMintFooBar02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		fooPath,      // token0
		barPath,      // token1
		uint16(500),  // fee
		int32(9100),  // tickLower
		int32(12000), // tickUpper
		"5000",       // amount0Desired
		"5000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower -12000} {p_tickUpper -9100} {tokenId 2} {liquidity 68925} {amount0 5000} {amount1 3979}]}

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 2)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "5000")
	shouldEQ(t, amount1, "3979")

	// approve nft to staker
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestPositionMintBazQux01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		bazPath,      // token0
		quxPath,      // token1
		uint16(500),  // fee
		int32(9100),  // tickLower
		int32(12000), // tickUpper
		"5000",       // amount0Desired
		"5000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500} {p_tickLower 9100} {p_tickUpper 12000} {tokenId 3} {liquidity 68925} {amount0 3979} {amount1 5000}]}

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 3)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "3979")
	shouldEQ(t, amount1, "5000")

	// approve nft to staker
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	std.TestSkipHeights(1)

	CreateExternalIncentive(
		"gno.land/r/demo/bar:gno.land/r/demo/foo:500", // targetPoolPath
		oblPath,                     // rewardToken
		"1000000000",                // rewardAmount
		1234569600,                  // startTimestamp
		1234569600+TIMESTAMP_90DAYS, // endTimestamp
	)
	// ---       event: {GNOSWAP gno.land/r/demo/staker CreateExternalIncentive [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_rewardToken gno.land/r/demo/obl} {p_rewardAmount 1000000000} {p_startTimestamp 1234569600} {p_endTimestamp 1242345600}]}

	std.TestSkipHeights(1)

	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	std.TestSkipHeights(1)
	CreateExternalIncentive("gno.land/r/demo/bar:gno.land/r/demo/foo:500", oblPath, "100000000", 1234569600, 1234569600+TIMESTAMP_90DAYS)
	std.TestSkipHeights(1)
}

func TestStakeToken01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(1) // GNFT tokenId
	// ---       event: {GNOSWAP gno.land/r/demo/staker StakeToken [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 1} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {amount0 1000} {amount1 368}]}

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 1)
}

func TestStakeToken02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(2) // GNFT tokenId
	// ---       event: {GNOSWAP gno.land/r/demo/staker StakeToken [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 2} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {amount0 5000} {amount1 3979}]}

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 2)
}

func TestStakeToken03(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(3) // GNFT tokenId
	// ---       event: {GNOSWAP gno.land/r/demo/staker StakeToken [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 3} {poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500} {amount0 3979} {amount1 5000}]}

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(3)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 3)
}

/*
RPC_API_INCENTIVE
*/
func TestApiGetRewardTokens(t *testing.T) {
	grt := ApiGetRewardTokens()
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"poolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","tokens":["gno.land/r/demo/gns","gno.land/r/demo/obl"]},{"poolPath":"gno.land/r/demo/baz:gno.land/r/demo/qux:500","tokens":["gno.land/r/demo/gns"]}]}`

	shouldEQ(t, grt, res)
}

func TestApiGetRewardTokensByPoolPath(t *testing.T) {
	grt := ApiGetRewardTokensByPoolPath("gno.land/r/demo/bar:gno.land/r/demo/foo:500")
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"poolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","tokens":["gno.land/r/demo/gns","gno.land/r/demo/obl"]}]}`

	shouldEQ(t, grt, res)
}

func TestApiGetExternalIncentives(t *testing.T) {
	extIncen := ApiGetExternalIncentives()
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"poolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardToken":"gno.land/r/demo/obl","rewardAmount":"1100000000","startTimestamp":1234569600,"endTimestamp":1242345600,"active":false,"refundee":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq"}]}`
	shouldEQ(t, extIncen, res)
}

func TestApiGetExternalIncentivesByPoolPath(t *testing.T) {
	extIncen := ApiGetExternalIncentivesByPoolPath("gno.land/r/demo/bar:gno.land/r/demo/foo:500")
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"poolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardToken":"gno.land/r/demo/obl","rewardAmount":"1100000000","startTimestamp":1234569600,"endTimestamp":1242345600,"active":false,"refundee":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq"}]}`
	shouldEQ(t, extIncen, res)
}

func TestApiGetExternalIncentivesByRewardTokenPath(t *testing.T) {
	extIncen := ApiGetExternalIncentivesByRewardTokenPath("gno.land/r/demo/obl")
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"poolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardToken":"gno.land/r/demo/obl","rewardAmount":"1100000000","startTimestamp":1234569600,"endTimestamp":1242345600,"active":false,"refundee":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq"}]}`
	shouldEQ(t, extIncen, res)
}

func TestApiGetInternalIncentives(t *testing.T) {
	intIncen := ApiGetInternalIncentives()
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"poolPath":"gno.land/r/demo/gns:gno.land/r/demo/wugnot:3000","rewardToken":"gno.land/r/demo/gns","tier":1,"rewardPerBlock":"275000"},{"poolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardToken":"gno.land/r/demo/gns","tier":1,"rewardPerBlock":"275000"},{"poolPath":"gno.land/r/demo/baz:gno.land/r/demo/qux:500","rewardToken":"gno.land/r/demo/gns","tier":2,"rewardPerBlock":"165000"},{"poolPath":"ATOM:GNS:500","rewardToken":"gno.land/r/demo/gns","tier":2,"rewardPerBlock":"165000"},{"poolPath":"ATOM:GNOT:500","rewardToken":"gno.land/r/demo/gns","tier":3,"rewardPerBlock":"73333"},{"poolPath":"ATOM:USDT:500","rewardToken":"gno.land/r/demo/gns","tier":3,"rewardPerBlock":"73333"},{"poolPath":"ATOM:WETH:500","rewardToken":"gno.land/r/demo/gns","tier":3,"rewardPerBlock":"73333"}]}`
	shouldEQ(t, intIncen, res)
}

func TestApiGetInternalIncentivesByPoolPath(t *testing.T) {
	intIncen := ApiGetInternalIncentivesByPoolPath("ATOM:USDT:500")
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"poolPath":"ATOM:USDT:500","rewardToken":"gno.land/r/demo/gns","tier":3,"rewardPerBlock":"73333"}]}`
	shouldEQ(t, intIncen, res)
}

func TestApiGetInternalIncentivesByTiers(t *testing.T) {
	intIncen := ApiGetInternalIncentivesByTiers(uint64(3))
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"poolPath":"ATOM:GNOT:500","rewardToken":"gno.land/r/demo/gns","tier":3,"rewardPerBlock":"73333"},{"poolPath":"ATOM:USDT:500","rewardToken":"gno.land/r/demo/gns","tier":3,"rewardPerBlock":"73333"},{"poolPath":"ATOM:WETH:500","rewardToken":"gno.land/r/demo/gns","tier":3,"rewardPerBlock":"73333"}]}`
	shouldEQ(t, intIncen, res)
}

/*
RPC_API_INCENTIVE
*/
func TestApiGetRewards(t *testing.T) {
	rewards := ApiGetRewards()
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"lpTokenId":1,"address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardTokenPath":"gno.land/r/demo/gns","rewardTokenAmount":"371"}]},{"lpTokenId":2,"address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardTokenPath":"gno.land/r/demo/gns","rewardTokenAmount":"1385"}]},{"lpTokenId":3,"address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/demo/baz:gno.land/r/demo/qux:500","rewardTokenPath":"gno.land/r/demo/gns","rewardTokenAmount":"495"}]}]}`
	shouldEQ(t, rewards, res)
}

func TestApiGetRewardsByLpTokenId(t *testing.T) {
	rewards := ApiGetRewardsByLpTokenId(uint64(1))
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"lpTokenId":1,"address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardTokenPath":"gno.land/r/demo/gns","rewardTokenAmount":"371"},{"incentiveType":"EXTERNAL","targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardTokenPath":"gno.land/r/demo/obl","rewardTokenAmount":"0"}]}]}`
	shouldEQ(t, rewards, res)
}

func TestApiGetRewardsByAddress(t *testing.T) {
	rewards := ApiGetRewardsByAddress("g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq")
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"lpTokenId":1,"address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardTokenPath":"gno.land/r/demo/gns","rewardTokenAmount":"371"},{"incentiveType":"EXTERNAL","targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardTokenPath":"gno.land/r/demo/obl","rewardTokenAmount":"0"}]},{"lpTokenId":2,"address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardTokenPath":"gno.land/r/demo/gns","rewardTokenAmount":"1385"},{"incentiveType":"EXTERNAL","targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500","rewardTokenPath":"gno.land/r/demo/obl","rewardTokenAmount":"0"}]},{"lpTokenId":3,"address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/demo/baz:gno.land/r/demo/qux:500","rewardTokenPath":"gno.land/r/demo/gns","rewardTokenAmount":"495"}]}]}`
	shouldEQ(t, rewards, res)
}

func TestApiGetStakes(t *testing.T) {
	stakes := ApiGetStakes()
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"tokenId":1,"owner":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","numberOfStakes":1,"stakeTimestamp":1234567980,"targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500"},{"tokenId":2,"owner":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","numberOfStakes":1,"stakeTimestamp":1234567985,"targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500"},{"tokenId":3,"owner":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","numberOfStakes":1,"stakeTimestamp":1234567990,"targetPoolPath":"gno.land/r/demo/baz:gno.land/r/demo/qux:500"}]}`
	shouldEQ(t, stakes, res)
}

func TestApiGetStakesByLpTokenId(t *testing.T) {
	stakes := ApiGetStakesByLpTokenId(uint64(1))
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"tokenId":1,"owner":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","numberOfStakes":1,"stakeTimestamp":1234567980,"targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500"}]}`
	shouldEQ(t, stakes, res)
}

func TestApiGetStakesByAddress(t *testing.T) {
	stakes := ApiGetStakesByAddress("g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq")
	res := `{"stat":{"height":144,"timestamp":1234567995},"response":[{"tokenId":1,"owner":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","numberOfStakes":1,"stakeTimestamp":1234567980,"targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500"},{"tokenId":2,"owner":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","numberOfStakes":1,"stakeTimestamp":1234567985,"targetPoolPath":"gno.land/r/demo/bar:gno.land/r/demo/foo:500"},{"tokenId":3,"owner":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","numberOfStakes":1,"stakeTimestamp":1234567990,"targetPoolPath":"gno.land/r/demo/baz:gno.land/r/demo/qux:500"}]}`
	shouldEQ(t, stakes, res)
}
