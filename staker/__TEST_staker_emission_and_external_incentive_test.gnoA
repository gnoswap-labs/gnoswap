package staker

import (
	"std"
	"strconv"
	"testing"

	"gno.land/p/demo/uassert"
	"gno.land/r/demo/users"

	en "gno.land/r/gnoswap/v1/emission"
	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v1/consts"
	"gno.land/r/gnoswap/v1/gnft"
)

func TestStakerWithEmissionAmount(t *testing.T) {
	testInit(t)
	testCreatPool_WUGNOT_GNS(t)
	//testCreatePool_BAR_QUX(t)
	testPositionMintPos01Tier01(t)
	//testPositionMintPos02Tier01(t)
	//testPositionMintPos03Tier01(t)
	//testCreateExternalIncentive(t)
	testStakeToken01(t)
	//testStakeToken02(t)
	//testStakeToken03(t)
	//testSameHeightCalculation(t)
	testCollectReward01(t)
	//testUnstakeToken01(t)
	//testExternalIncentiveReward(t)
}

func testInit(t *testing.T) {
	t.Run("init pool tiers", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		// init pool tiers
		// tier 1
		// deletePoolTier(t, MUST_EXISTS_IN_TIER_1)
		//println("GENESIS", std.GetHeight())
		std.TestSkipHeights(1)

		// set unstaking fee to 0
		SetUnstakingFeeByAdmin(0)

		// set pool creation fee to 0
		//pl.SetPoolCreationFeeByAdmin(0)
		println("height", std.GetHeight())

		// set community pool distribution to 0% (give it to devOps)
		en.ChangeDistributionPctByAdmin(
			1, 7500,
			2, 2500,
			3, 0,
			4, 0,
		)

		// prepare wugnot
		std.TestIssueCoins(adminAddr, std.Coins{{"ugnot", 100_000_000_000_000}})
		banker := std.GetBanker(std.BankerTypeRealmSend)
		banker.SendCoins(adminAddr, consts.WUGNOT_ADDR, std.Coins{{"ugnot", 50_000_000_000_000}})
		std.TestSetOrigSend(std.Coins{{"ugnot", 50_000_000_000_000}}, nil)
		wugnot.Deposit()
		std.TestSetOrigSend(nil, nil)

		std.TestSkipHeights(1)
	})
}

func testCreatPool_WUGNOT_GNS(t *testing.T) {
	t.Run("create pool wugnot-gns-3000", func(t *testing.T) {
		println("[", std.GetHeight(), "]", "create pool wugnot-gns-3000")
		uassert.Equal(t, uint64(100000000000000), gns.TotalSupply())
		uassert.Equal(t, uint64(0), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(0), gnsBalance(consts.STAKER_ADDR))
		uassert.Equal(t, uint64(0), gnsBalance(consts.DEV_OPS))
		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		pl.CreatePool(consts.WUGNOT_PATH, consts.GNS_PATH, 3000, "79228162514264337593543950337") // tick 0 ≈ x1
		uassert.Equal(t, uint64(100000000), gnsBalance(consts.PROTOCOL_FEE_ADDR))
		oneBlockEmissionAmount := uint64(14269406)
		uassert.Equal(t, uint64(100000000000000)+(2*oneBlockEmissionAmount), gns.TotalSupply())

		std.TestSkipHeights(1)
	})
}

func testCreatePool_BAR_QUX(t *testing.T) {
	t.Run("create pool bra-qux-500", func(t *testing.T) {
		println("[ ", std.GetHeight(), "]", "create pool bar-qux-500")
		std.TestSetRealm(adminRealm)
		oneBlockEmissionAmount := uint64(14269406)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006") // tick 10_000 ≈ x2.7
		uassert.Equal(t, uint64(200000000), gnsBalance(consts.PROTOCOL_FEE_ADDR))
		// 3block
		uassert.Equal(t, uint64(100000000000000)+(3*oneBlockEmissionAmount), gns.TotalSupply())
		oneBlockStakerAmount := uint64(10702054)
		// left 1 gns / 2block for staker
		uassert.Equal(t, (3*oneBlockStakerAmount)+1, gnsBalance(consts.STAKER_ADDR))
		oneBlockDevOpsAmount := uint64(3567351)
		uassert.Equal(t, (3*oneBlockDevOpsAmount)+1, gnsBalance(consts.DEV_OPS))
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))

		println("[", std.GetHeight(), "]", "addPoolTier ", barPath, quxPath, 500, "to : 1tier")
		addPoolTier(t, `gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500`, 1)
		std.TestSkipHeights(1)
	})
}

func testPositionMintPos01Tier01(t *testing.T) {
	t.Run("mint position 01, gns:wugnot:3000", func(t *testing.T) {
		// mint position in tier 1 pool
		// gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000
		std.TestSetRealm(adminRealm)
		gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			"gno.land/r/gnoswap/v1/gns", // token0
			"gno.land/r/demo/wugnot",    // token1
			fee3000,                     // fee
			int32(-60),                  // tickLower
			int32(60),                   // tickUpper
			"1000",                      // amount0Desired
			"1000",                      // amount1Desired
			"0",                         // amount0Min
			"0",                         // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
		)
		println("lpTokenId : ", lpTokenId, ", liquidity : ", liquidity, ", amount0 : ", amount0, ", amount1 : ", amount1)
		oneBlockEmissionAmount := uint64(14269406)
		uassert.Equal(t, uint64(100000000000000)+(6*oneBlockEmissionAmount), gns.TotalSupply())
		oneBlockStakerAmount := uint64(10702054)
		uassert.Equal(t, (6*oneBlockStakerAmount)+3, gnsBalance(consts.STAKER_ADDR))
		oneBlockDevOpsAmount := uint64(3567351)
		uassert.Equal(t, (6*oneBlockDevOpsAmount)+2, gnsBalance(consts.DEV_OPS))
		uassert.Equal(t, uint64(0), gnsBalance(consts.COMMUNITY_POOL_ADDR))
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(1), lpTokenId)
		uassert.Equal(t, gnft.MustOwnerOf(tid(lpTokenId)), users.Resolve(admin))
		uassert.Equal(t, amount0, "1000")
		uassert.Equal(t, amount1, "1000")

		std.TestSkipHeights(1)
		// approve nft to staker for staking
		std.TestSetRealm(adminRealm)
		gnft.Approve(consts.STAKER_ADDR, tid(lpTokenId))
		std.TestSkipHeights(1)
	})
}

func testPositionMintPos02Tier01(t *testing.T) {
	t.Run("mint position 02, bar:qux:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee500,       // fee
			int32(9000),  // tickLower
			int32(11000), // tickUpper
			"1000",       // amount0Desired
			"1000",       // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
		)
		println("lpTokenId : ", lpTokenId, ", liquidity : ", liquidity, ", amount0 : ", amount0, ", amount1 : ", amount1)
		oneBlockEmissionAmount := uint64(14269406)
		oneBlockStakerAmount := uint64(10702054)
		oneBlockDevOpsAmount := uint64(3567351)

		uassert.Equal(t, uint64(100000000000000)+(10*oneBlockEmissionAmount), gns.TotalSupply())
		uassert.Equal(t, (10*oneBlockStakerAmount)+5, gnsBalance(consts.STAKER_ADDR))
		uassert.Equal(t, (10*oneBlockDevOpsAmount)+4, gnsBalance(consts.DEV_OPS))
		uassert.Equal(t, uint64(0), gnsBalance(consts.COMMUNITY_POOL_ADDR))
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(2), lpTokenId)
		uassert.Equal(t, gnft.MustOwnerOf(tid(lpTokenId)), users.Resolve(admin))
		uassert.Equal(t, amount0, "368")
		uassert.Equal(t, amount1, "1000")

		std.TestSkipHeights(1)

		// approve nft to staker for staking
		std.TestSetRealm(adminRealm)
		gnft.Approve(consts.STAKER_ADDR, tid(lpTokenId))
		std.TestSkipHeights(1)
	})
}

func testPositionMintPos03Tier01(t *testing.T) {
	t.Run("mint position 03, bar:qux:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee500,       // fee
			int32(9100),  // tickLower
			int32(12000), // tickUpper
			"5000",       // amount0Desired
			"5000",       // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
		)
		println("lpTokenId : ", lpTokenId, ", liquidity : ", liquidity, ", amount0 : ", amount0, ", amount1 : ", amount1)

		oneBlockEmissionAmount := uint64(14269406)
		oneBlockStakerAmount := uint64(10702054)
		oneBlockDevOpsAmount := uint64(3567351)

		uassert.Equal(t, uint64(100000000000000)+(14*oneBlockEmissionAmount), gns.TotalSupply())
		uassert.Equal(t, (14*oneBlockStakerAmount)+7, gnsBalance(consts.STAKER_ADDR))
		uassert.Equal(t, (14*oneBlockDevOpsAmount)+6, gnsBalance(consts.DEV_OPS))
		uassert.Equal(t, uint64(0), gnsBalance(consts.COMMUNITY_POOL_ADDR))
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(3), lpTokenId)
		uassert.Equal(t, gnft.MustOwnerOf(tid(lpTokenId)), users.Resolve(admin))
		uassert.Equal(t, amount0, "3979")
		uassert.Equal(t, amount1, "5000")

		std.TestSkipHeights(1)

		// approve nft to staker
		std.TestSetRealm(adminRealm)
		gnft.Approve(consts.STAKER_ADDR, tid(lpTokenId))
		std.TestSkipHeights(1)
	})
}

func testCreateExternalIncentive(t *testing.T) {
	t.Run("create external incentive", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)
		AddToken(oblPath)
		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500", // targetPoolPath
			oblPath,                     // rewardToken
			1000000000,                  // rewardAmount
			1234569600,                  // startTimestamp
			1234569600+TIMESTAMP_90DAYS, // endTimestamp
		)

		oneBlockEmissionAmount := uint64(14269406)
		oneBlockStakerAmount := uint64(10702054)
		oneBlockDevOpsAmount := uint64(3567351)

		uassert.Equal(t, uint64(100000000000000)+(16*oneBlockEmissionAmount), gns.TotalSupply())
		externalInecntiveDeposit := depositGnsAmount

		beforeGNSForStaker := uint64(10702054) + uint64(32106164) + uint64(42808219) + uint64(42808218) + uint64(21404109)
		transferAmountForCommunityPoolByPool1 := uint64(beforeGNSForStaker / 2)
		transferAmountForCommunityPoolByPool2 := uint64(beforeGNSForStaker / 2)
		expectedGNSForStaker := beforeGNSForStaker + externalInecntiveDeposit - transferAmountForCommunityPoolByPool1 - transferAmountForCommunityPoolByPool2

		uassert.Equal(t, (16*oneBlockStakerAmount)+8+externalInecntiveDeposit, gnsBalance(consts.STAKER_ADDR))
		uassert.Equal(t, (16*oneBlockDevOpsAmount)+7, gnsBalance(consts.DEV_OPS))
		beforeGNSForCommunityPool := uint64(713470) + uint64(2140410) + uint64(2853881) + uint64(2853881) + uint64(1426940)
		uassert.Equal(t, uint64(0), gnsBalance(consts.COMMUNITY_POOL_ADDR))
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(1000000000), obl.BalanceOf(a2u(consts.STAKER_ADDR)))

		std.TestSkipHeights(1)
	})
}

func testStakeToken01(t *testing.T) {
	t.Run("stake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		println("height", std.GetHeight(), " duration : ", std.GetHeight()-123)
		StakeToken(1) // GNFT tokenId

		uassert.Equal(t, consts.STAKER_ADDR, gnft.MustOwnerOf(tid(1))) // staker
		uassert.Equal(t, 1, deposits.Size())

		oneBlockEmissionAmount := uint64(14269406)
		oneBlockStakerAmount := uint64(10702054)
		oneBlockDevOpsAmount := uint64(3567351)

		uassert.Equal(t, uint64(100000000000000)+(17*oneBlockEmissionAmount), gns.TotalSupply())
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, (17*oneBlockDevOpsAmount)+7, gnsBalance(consts.DEV_OPS))

		prevGNSForStaker := uint64(0) + depositGnsAmount
		externalInecntiveDeposit := uint64(1000000000)
		uassert.Equal(t, (17*oneBlockStakerAmount)+9+externalInecntiveDeposit, gnsBalance(consts.STAKER_ADDR))
		prevGNSForCommunityPool := uint64(159817346)
		currGNSForCommunityPool := prevGNSForCommunityPool + uint64(713470)
		transferAmountForCommunityPoolByPool1 := uint64(10702056) / 2
		transferAmountForCommunityPoolByPool2 := uint64(10702056) / 2
		uassert.Equal(t, uint64(0), gnsBalance(consts.COMMUNITY_POOL_ADDR))

		std.TestSkipHeights(500)
	})
}

func testStakeToken02(t *testing.T) {
	t.Run("stake token 02", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		println(">>>>>>>>> StakeToken02", "height", std.GetHeight(), " duration : ", std.GetHeight()-123)
		StakeToken(2) // GNFT tokenId

		uassert.Equal(t, consts.STAKER_ADDR, gnft.MustOwnerOf(tid(2))) // staker
		uassert.Equal(t, 2, deposits.Size())

		oneBlockEmissionAmount := uint64(14269406)
		oneBlockStakerAmount := uint64(10702054)
		oneBlockDevOpsAmount := uint64(3567351)
		externalInecntiveDeposit := uint64(1000000000)

		prevGNSTotalBalance := uint64(100000214041090)
		currGNSTotalBalance := prevGNSTotalBalance + uint64(7134703000) // 500 block gns minted
		uassert.Equal(t, uint64(100000000000000)+(517*oneBlockEmissionAmount), gns.TotalSupply())
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, (517*oneBlockDevOpsAmount)+257, gnsBalance(consts.DEV_OPS))
		uassert.Equal(t, uint64(0), gnsBalance(consts.COMMUNITY_POOL_ADDR))

		prevGNSForStaker := uint64(0) + depositGnsAmount
		positionWarmUp := uint64(802654087)
		positionWarmUpPenalty := uint64(1872859538)
		currGNSForStaker := prevGNSForStaker + positionWarmUp + positionWarmUpPenalty
		uassert.Equal(t, (517*oneBlockStakerAmount)+259+externalInecntiveDeposit, gnsBalance(consts.STAKER_ADDR))
		uassert.Equal(t, GetOrigPkgAddr(), gnft.MustOwnerOf(tid(2))) // staker
		uassert.Equal(t, 2, deposits.Size())

		std.TestSkipHeights(1)
	})
}

func testStakeToken03(t *testing.T) {
	t.Run("stake token 03", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		StakeToken(3) // GNFT tokenId

		uassert.Equal(t, consts.STAKER_ADDR, gnft.MustOwnerOf(tid(3))) // staker
		uassert.Equal(t, 3, deposits.Size())

		oneBlockEmissionAmount := uint64(14269406)
		oneBlockStakerAmount := uint64(10702054)
		oneBlockDevOpsAmount := uint64(3567351)
		externalInecntiveDeposit := uint64(1000000000)

		prevGNSTotalBalance := uint64(100007348744090)
		currGNSTotalBalance := prevGNSTotalBalance + uint64(14269406) // 1 block gns minted
		uassert.Equal(t, uint64(100000000000000)+(518*oneBlockEmissionAmount), gns.TotalSupply())
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, (518*oneBlockDevOpsAmount)+257, gnsBalance(consts.DEV_OPS))
		uassert.Equal(t, uint64(0), gnsBalance(consts.COMMUNITY_POOL_ADDR))

		prevGNSForStaker := uint64(0) + depositGnsAmount + uint64(802654087) + uint64(1872859538)
		positionWarmUp := uint64(10702055) * 30 / 100
		positionWarmUpPenalty := uint64(10702055) - positionWarmUp
		currGNSForStaker := prevGNSForStaker + positionWarmUp + positionWarmUpPenalty
		uassert.Equal(t, (518*oneBlockStakerAmount)+260+externalInecntiveDeposit, gnsBalance(consts.STAKER_ADDR))
	})
}

func testSameHeightCalculation(t *testing.T) {
	t.Run("same height calculation", func(t *testing.T) {

		println("height", std.GetHeight())
		oneBlockEmissionAmount := uint64(14269406)
		oneBlockStakerAmount := uint64(10702054)
		oneBlockDevOpsAmount := uint64(3567351)
		externalInecntiveDeposit := uint64(1000000000)

		uassert.Equal(t, (518*oneBlockDevOpsAmount)+257, gnsBalance(consts.DEV_OPS))
		uassert.Equal(t, uint64(0), gnsBalance(consts.COMMUNITY_POOL_ADDR))
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(100000000000000)+(518*oneBlockEmissionAmount), gns.TotalSupply())
		uassert.Equal(t, (518*oneBlockStakerAmount)+260+externalInecntiveDeposit, gnsBalance(consts.STAKER_ADDR))

		std.TestSkipHeights(1)
	})
}

func testCollectReward01(t *testing.T) {
	t.Run("collect reward 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		beforeGNSForAdmin := gnsBalance(consts.ADMIN)

		println("height", std.GetHeight())
		oneBlockEmissionAmount := uint64(14269406)
		oneBlockStakerAmount := uint64(10702054)
		oneBlockDevOpsAmount := uint64(3567351)
		externalInecntiveDeposit := uint64(1000000000)

		println("1")
		r1, p1 := CollectReward(1, false)
		//println("2")
		//r2, p2 := CollectReward(2, false)
		//println("3")
		//r3, p3 := CollectReward(3, false)

		println("r1", r1)
		println("p1", p1)
		//println("r2", r2)
		//println("p2", p2)
		//println("r3", r3)
		//println("p3", p3)

		n1, _ := strconv.ParseUint(r1, 10, 64)
		//n2, _ := strconv.ParseUint(r2, 10, 64)
		//n3, _ := strconv.ParseUint(r3, 10, 64)
		//rsum := n1 + n2 + n3
		rsum := n1

		m1, _ := strconv.ParseUint(p1, 10, 64)
		//m2, _ := strconv.ParseUint(p2, 10, 64)
		//m3, _ := strconv.ParseUint(p3, 10, 64)
		//psum := m1 + m2 + m3
		psum := m1
		println("sum : ", rsum)
		println("sum : ", psum)
		println("sum : ", rsum+psum)
		gnsStaker := (518 * oneBlockStakerAmount) + 260
		println("gns staker : ", strconv.FormatUint(gnsStaker, 10))

		u1Gap := 642 - 140
		println(gnsStaker / 7)

		token2Amount := uint64(2096082)
		token2Penalty := uint64(4890861)
		token3Amount := uint64(2719841)
		token3Penalty := uint64(6346297)
		leftAmount := uint64(1)
		expectedPoolAmount := token2Amount + token2Penalty + token3Amount + token3Penalty + leftAmount

		println("A")
		rewardForUser := uint64(1884096693)
		rewardForPenalty := uint64(807470014)
		rewardFee := rewardForUser * 100 / 10000
		println("1")
		uassert.Equal(t, uint64(18840966), rewardFee)
		rewardForUserWithFee := rewardForUser - rewardFee
		println("2")
		uassert.Equal(t, uint64(1865255727), rewardForUserWithFee)
		println("3")
		uassert.Equal(t, rewardForUserWithFee, gnsBalance(consts.ADMIN)-beforeGNSForAdmin)
		println("before GNS For Admin : ", beforeGNSForAdmin)
		println("after GNS For Admin : ", gnsBalance(consts.ADMIN))
		println("actual reward GNS For Admin : ", gnsBalance(consts.ADMIN)-beforeGNSForAdmin)

		// 5425941631 = 1605308099 + 3745718900 + 53510270 (74914378)
		// 5425941631
		// 5425941377

		prevGNSForCommunityPool := uint64(3204195117) + uint64(1426940)
		currGNSForCommunityPool := prevGNSForCommunityPool + rewardForPenalty
		println("4")
		uassert.Equal(t, currGNSForCommunityPool, gnsBalance(consts.COMMUNITY_POOL_ADDR)) // 4013092071

		prevGNSForStaker := uint64(3686215680)
		currentGNSForStaker := prevGNSForStaker + uint64(21404109) - rewardForUser - rewardForPenalty
		println("5")
		uassert.Equal(t, currentGNSForStaker, gnsBalance(consts.STAKER_ADDR)) // 1016053082
		println("6")
		uassert.Equal(t, uint64(1472602698)+uint64(5707762), gnsBalance(consts.DEV_OPS)) // 1478310460
		println("7")
		uassert.Equal(t, uint64(200000000)+rewardFee, gnsBalance(consts.PROTOCOL_FEE_ADDR)) // 218840966
		println("8")
		uassert.Equal(t, uint64(100007363013496)+uint64(28538812), gns.TotalSupply()) // 100007391552308
		println("9")
		uassert.Equal(t, uint64(2), gnsBalance(consts.EMISSION_ADDR)) // 2

		std.TestSkipHeights(1)
	})
}

func testUnstakeToken01(t *testing.T) {
	t.Run("unstake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		beforeGNSForAdmin := gnsBalance(consts.ADMIN)
		UnstakeToken(1, false)
		uassert.Equal(t, deposits.Size(), 2)
		uassert.Equal(t, uint64(100007391552308)+uint64(14269406), gns.TotalSupply())
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(1478310460)+uint64(2853881), gnsBalance(consts.DEV_OPS)) // 1481164341

		rewardForUser := uint64(3745719)
		rewardForPenalty := uint64(1605309)
		rewardFee := rewardForUser * 100 / 10000
		uassert.Equal(t, uint64(37457), rewardFee)
		rewardForUserWithFee := rewardForUser - rewardFee
		uassert.Equal(t, rewardForUserWithFee, gnsBalance(consts.ADMIN)-beforeGNSForAdmin)
		uassert.Equal(t, uint64(218840966)+rewardFee, gnsBalance(consts.PROTOCOL_FEE_ADDR)) // 218878423

		prevGNSForStaker := uint64(1016053082)
		currGNSForStaker := prevGNSForStaker + uint64(10702056) - rewardForUser - rewardForPenalty
		uassert.Equal(t, currGNSForStaker, gnsBalance(consts.STAKER_ADDR))                                                   // 1021404110
		uassert.Equal(t, uint64(4013092071)+uint64(713470)+uint64(rewardForPenalty), gnsBalance(consts.COMMUNITY_POOL_ADDR)) // 4015410850

		std.TestSkipHeights(1)
	})
}

func testExternalIncentiveReward(t *testing.T) {
	t.Run("create external incentive gns & reward test", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX) // this includes depositGnsAmount
		CreateExternalIncentive(
			"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000", // targetPoolPath string,
			consts.GNS_PATH, // rewardToken string, // token path should be registered
			20000000,        // _rewardAmount string,
			1234656000,
			1234656000+TIMESTAMP_90DAYS,
		)
		// 1block minting
		uassert.Equal(t, uint64(100007405821714)+uint64(14269406), gns.TotalSupply()) // 100007420091120
		externalInecntiveDeposit := depositGnsAmount
		externalIncentiveReward := uint64(20000000)
		toCommunityPoolByPool1 := uint64(5351027) // minted gns for staker(10702055) / 2(pool num)
		expectedGNSForStaker := uint64(1021404110) + uint64(10702055) + externalInecntiveDeposit + externalIncentiveReward - toCommunityPoolByPool1
		uassert.Equal(t, expectedGNSForStaker, gnsBalance(consts.STAKER_ADDR))                                             // 2046755138
		uassert.Equal(t, uint64(1481164341)+uint64(2853881), gnsBalance(consts.DEV_OPS))                                   // 1484018222
		uassert.Equal(t, uint64(4015410850)+uint64(713470)+toCommunityPoolByPool1, gnsBalance(consts.COMMUNITY_POOL_ADDR)) // 4021475347
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(218878423), gnsBalance(consts.PROTOCOL_FEE_ADDR)) // 218878423

		curHeight := std.GetHeight()
		externalStartHeight := int64(855)
		gapHeight := externalStartHeight - curHeight
		std.TestSkipHeights(gapHeight)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			"gno.land/r/gnoswap/v1/gns", // token0
			"gno.land/r/demo/wugnot",    // token1
			fee3000,                     // fee
			int32(0),                    // tickLower
			int32(60),                   // tickUpper
			"1000",                      // amount0Desired
			"1000",                      // amount1Desired
			"0",                         // amount0Min
			"0",                         // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
		)
		gnft.Approve(consts.STAKER_ADDR, tid(lpTokenId))
		// 222 block mint
		uassert.Equal(t, uint64(100007420091120)+uint64(3025114072), gns.TotalSupply())                // 100010445205192
		uassert.Equal(t, uint64(1484018222)+uint64(605022814), gnsBalance(consts.DEV_OPS))             // 2089041036
		uassert.Equal(t, uint64(2046755138)+uint64(2268835554), gnsBalance(consts.STAKER_ADDR))        // 4315590692
		uassert.Equal(t, uint64(4021475347)+uint64(151255703), gnsBalance(consts.COMMUNITY_POOL_ADDR)) // 4172731050
		uassert.Equal(t, uint64(2), gnsBalance(consts.EMISSION_ADDR))
		uassert.Equal(t, uint64(4), lpTokenId)
		uassert.Equal(t, gnft.MustOwnerOf(tid(lpTokenId)), admin)

		std.TestSkipHeights(1)

		StakeToken(4) // GNFT tokenId
		// 1 block mint
		uassert.Equal(t, uint64(100010445205192)+uint64(14269406), gns.TotalSupply())    // 100010459474598
		uassert.Equal(t, uint64(2089041036)+uint64(2853881), gnsBalance(consts.DEV_OPS)) // 2091894917

		toCommunityPoolByPool1 = uint64(1139768805)                                                                        // prev minted for tier1 pool = 1134417777 + 5351028
		uassert.Equal(t, uint64(4315590692)+uint64(10702056)-toCommunityPoolByPool1, gnsBalance(consts.STAKER_ADDR))       // 4331643775
		uassert.Equal(t, uint64(4172731050)+uint64(713470)+toCommunityPoolByPool1, gnsBalance(consts.COMMUNITY_POOL_ADDR)) // 4168093493
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))
		std.TestSkipHeights(1)

		CollectReward(4, false)
		// 1 block mint
		uassert.Equal(t, uint64(100010459474598)+uint64(14269406), gns.TotalSupply())    // 100010473743904
		uassert.Equal(t, uint64(2091894917)+uint64(2853881), gnsBalance(consts.DEV_OPS)) // 2094748800
		userReward := uint64(1605308)
		userPenalty := uint64(3745720)
		userFee := userReward * 100 / 10000
		communityPoolSent := uint64(5351027) + uint64(1139768805)
		uassert.Equal(t, uint64(4331643775)+uint64(10702055)-userReward-userPenalty-communityPoolSent, gnsBalance(consts.STAKER_ADDR)) // 4332755831
		toCommunityPool := communityPoolSent + userPenalty
		uassert.Equal(t, uint64(4168093493)+uint64(713470)+toCommunityPool, gnsBalance(consts.COMMUNITY_POOL_ADDR)) // 4168093493
		uassert.Equal(t, uint64(1), gnsBalance(consts.EMISSION_ADDR))

		std.TestSkipHeights(122)
		beforeExternalReward := obl.BalanceOf(a2u(consts.ADMIN))
		CollectReward(2, false)
		atferExternalReward := obl.BalanceOf(a2u(consts.ADMIN))
		uassert.Equal(t, uint64(11), atferExternalReward-beforeExternalReward)

		std.TestSkipHeights(43199)
		std.TestSkipHeights(1)
		beforeGNSExternalReward := gns.BalanceOf(a2u(consts.ADMIN))
		CollectReward(4, false)
		atferGNSExternalReward := gns.BalanceOf(a2u(consts.ADMIN))
		uassert.Equal(t, int64(1), atferGNSExternalReward-beforeGNSExternalReward)
	})
}
