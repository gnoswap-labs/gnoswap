// external incentive + warm up period testing
//
//	qux for 365 days

package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	u256 "gno.land/p/gnoswap/uint256"

	"gno.land/r/gnoswap/v2/consts"

	en "gno.land/r/gnoswap/v2/emission"
	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gnft"
	"gno.land/r/gnoswap/v2/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/qux"
)

func TestShortWarmUp365DayExternal(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testMintBarQux3000_1_4(t)
	testCreateExternalIncentiveQux365(t)
	testStakeToken_1_4(t)
	testBeforeActive(t)
	test23HoursAfterActive(t)
	testJustPrint(t)
}

func testInit(t *testing.T) {
	t.Run("override warm-up period", func(t *testing.T) {
		// override warm-up period for testing
		warmUp[100] = 901 // 30m ~
		warmUp[70] = 301  // 10m ~ 30m
		warmUp[50] = 151  // 5m ~ 10m
		warmUp[30] = 1    // ~ 5m
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

		pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

		std.TestSkipHeights(1)
	})
}

func testMintBarQux3000_1_4(t *testing.T) {
	t.Run("mint bar qux 3000 1 4", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

		pn.Mint(barPath, bazPath, fee3000, int32(-1020), int32(1020), "13630", "13630", "0", "0", max_timeout, admin, admin)
		pn.Mint(barPath, bazPath, fee3000, int32(-1020), int32(1020), "84360", "84360", "0", "0", max_timeout, admin, admin)
		pn.Mint(barPath, bazPath, fee3000, int32(-1020), int32(1020), "1990", "1990", "0", "0", max_timeout, admin, admin)
		pn.Mint(barPath, bazPath, fee3000, int32(-1020), int32(1020), "7", "7", "0", "0", max_timeout, admin, admin)
		std.TestSkipHeights(1)

		t1Liq := pn.PositionGetPositionLiquidity(1).Clone()
		t2Liq := pn.PositionGetPositionLiquidity(2).Clone()
		t3Liq := pn.PositionGetPositionLiquidity(3).Clone()
		t4Liq := pn.PositionGetPositionLiquidity(4).Clone()

		println("t1 liquidity\t", t1Liq.ToString()) // 274141
		println("t2 liquidity\t", t2Liq.ToString()) // 1696738
		println("t3 liquidity\t", t3Liq.ToString()) // 40025
		println("t4 liquidity\t", t4Liq.ToString()) // 140

		all := u256.Zero()
		all.Add(all, t1Liq)
		all.Add(all, t2Liq)
		all.Add(all, t3Liq)
		all.Add(all, t4Liq)
		println("all liquidity\t", all.ToString()) // 2011044

		t1pct := t1Liq.Mul(t1Liq, u256.NewUint(100))
		t1pct.Div(t1pct, all) // 13.6317%
		t2pct := t2Liq.Mul(t2Liq, u256.NewUint(100))
		t2pct.Div(t2pct, all) // 84.3710%
		t3pct := t3Liq.Mul(t3Liq, u256.NewUint(100))
		t3pct.Div(t3pct, all) // 1.9902%
		t4pct := t4Liq.Mul(t4Liq, u256.NewUint(100))
		t4pct.Div(t4pct, all) // 0.0069%
	})
}

func testCreateExternalIncentiveQux365(t *testing.T) {
	t.Run("create external incentive qux 365", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		qux.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

		AddToken(quxPath)
		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000", // targetPoolPath string,
			quxPath,          // rewardToken string, // token path should be registered
			"10000000000000", // _rewardAmount string,
			1234569600,
			1234569600+TIMESTAMP_365DAYS,
		)
		std.TestSkipHeights(1)
	})
}

func testStakeToken_1_4(t *testing.T) {
	t.Run("stake token 1 ~ 4", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
		StakeToken(1)

		gnft.Approve(a2u(GetOrigPkgAddr()), tid(2))
		StakeToken(2)

		gnft.Approve(a2u(GetOrigPkgAddr()), tid(3))
		StakeToken(3)

		gnft.Approve(a2u(GetOrigPkgAddr()), tid(4))
		StakeToken(4)

		std.TestSkipHeights(1)
	})
}

func testBeforeActive(t *testing.T) {
	t.Run("before active", func(t *testing.T) {
		en.MintAndDistributeGns()
		if consts.EMISSION_REFACTORED {
			CalcPoolPositionRefactor()
		} else {
			CalcPoolPosition()
		}

		std.TestSkipHeights(1)
	})
}

func test23HoursAfterActive(t *testing.T) {
	t.Run("23 hours after active", func(t *testing.T) {
		std.TestSkipHeights(849)   // in active
		std.TestSkipHeights(1)     // active // but no block passed since active
		std.TestSkipHeights(41400) // skip 23 hours of block

		// GetPrintInfo() // INTERNAL GNS
	})
}

func testJustPrint(t *testing.T) {
	t.Run("check external", func(t *testing.T) {
		gpei := GetPrintExternalInfo() // EXTERNALs
		uassert.Equal(t, gpei, `{"height":42378,"time":1234652400,"position":[{"lpTokenId":1,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000","rewardToken":"gno.land/r/onbloc/qux","rewardAmount":"10000000000000","startTimestamp":1234569600,"endTimestamp":1266105600,"rewardPerBlockX96":"50246171051664343983729040040588533","stakedOrExternalDuration":41400,"rewardPerBlock":"634195","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountFull":3579119083,"tokenAmountToGive":3547996308,"full30":12967822,"give30":3890346,"full50":12967822,"give50":6483911,"full70":51871291,"give70":36309903,"full100":3501312148}]},{"lpTokenId":2,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000","rewardToken":"gno.land/r/onbloc/qux","rewardAmount":"10000000000000","startTimestamp":1234569600,"endTimestamp":1266105600,"rewardPerBlockX96":"50246171051664343983729040040588533","stakedOrExternalDuration":41400,"rewardPerBlock":"634195","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountFull":22152204060,"tokenAmountToGive":21959576199,"full30":80261608,"give30":24078482,"full50":80261608,"give50":40130804,"full70":321046435,"give70":224732504,"full100":21670634409}]},{"lpTokenId":3,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000","rewardToken":"gno.land/r/onbloc/qux","rewardAmount":"10000000000000","startTimestamp":1234569600,"endTimestamp":1266105600,"rewardPerBlockX96":"50246171051664343983729040040588533","stakedOrExternalDuration":41400,"rewardPerBlock":"634195","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountFull":522556768,"tokenAmountToGive":518012796,"full30":1893321,"give30":567996,"full50":1893321,"give50":946660,"full70":7573286,"give70":5301300,"full100":511196840}]},{"lpTokenId":4,"stakedHeight":126,"stakedTimestamp":1234567896,"incentive":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000","rewardToken":"gno.land/r/onbloc/qux","rewardAmount":"10000000000000","startTimestamp":1234569600,"endTimestamp":1266105600,"rewardPerBlockX96":"50246171051664343983729040040588533","stakedOrExternalDuration":41400,"rewardPerBlock":"634195","refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","tokenAmountFull":1827789,"tokenAmountToGive":1811895,"full30":6622,"give30":1986,"full50":6622,"give50":3311,"full70":26489,"give70":18542,"full100":1788056}]}]}`)
	})
}
