package staker

import (
	"std"
	"testing"

	pl "gno.land/r/gnoswap/v2/pool"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/gnoswap/v2/gns"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*2)
	std.TestSkipHeights(1)

	pl.CreatePool(barPath, fooPath, 500, common.TickMathGetSqrtRatioAtTick(-10000).ToString())
	pl.CreatePool(barPath, fooPath, 100, common.TickMathGetSqrtRatioAtTick(-10000).ToString())

	std.TestSkipHeights(1)
}

func TestSetPoolTier(t *testing.T) {
	std.TestSetOrigCaller(consts.GNOSWAP_ADMIN)
	SetPoolTier("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500", 2)

	if poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"].tier != 2 {
		t.Error("Expected tier to be 2")
	}
}

func TestGetPoolsWithTierStruct(t *testing.T) {
	poolTiers := GetPoolsWithTierStruct()
	if len(poolTiers) != 2 {
		t.Error("Expected 2 pools")
	}
}

func TestChangePoolTier(t *testing.T) {
	std.TestSetOrigCaller(consts.GNOSWAP_ADMIN)
	ChangePoolTier("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500", 3)

	if poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"].tier != 3 {
		t.Error("Expected tier to be 3")
	}
}

func TestGetPoolsWithTier(t *testing.T) {
	poolTiers := GetPoolsWithTier()
	shouldEQ(t, len(poolTiers), 2)
	shouldEQ(t, poolTiers[0], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000_1")
	shouldEQ(t, poolTiers[1], "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500_3")
}

func TestGetPoolsWithEmissionGnsAmount(t *testing.T) {
	poolTiers := GetPoolsWithEmissionGnsAmount()
	shouldEQ(t, poolTiers, `{"stat":{"height":125,"timestamp":1234567894},"response":[{"poolPath":"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","rewardToken":"gno.land/r/gnoswap/v2/gns","startTimestamp":1234567890,"tier":1,"amount":540000000000000},{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardToken":"gno.land/r/gnoswap/v2/gns","startTimestamp":1234567894,"tier":3,"amount":135000000000000}]}`)
}

func TestSetAnotherPoolTier3(t *testing.T) {
	std.TestSetOrigCaller(consts.GNOSWAP_ADMIN)
	SetPoolTier("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100", 3)

	if poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100"].tier != 3 {
		t.Error("Expected tier to be 3")
	}

	poolTiers := GetPoolsWithEmissionGnsAmount()
	shouldEQ(t, poolTiers, `{"stat":{"height":125,"timestamp":1234567894},"response":[{"poolPath":"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","rewardToken":"gno.land/r/gnoswap/v2/gns","startTimestamp":1234567890,"tier":1,"amount":540000000000000},{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardToken":"gno.land/r/gnoswap/v2/gns","startTimestamp":1234567894,"tier":3,"amount":67500000000000},{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100","rewardToken":"gno.land/r/gnoswap/v2/gns","startTimestamp":1234567894,"tier":3,"amount":67500000000000}]}`)
}

func TestRemovePoolTier(t *testing.T) {
	std.TestSetOrigCaller(consts.GNOSWAP_ADMIN)
	RemovePoolTier("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")

	if len(poolTiers) != 2 {
		t.Error("Expected 2 pool")
	}
}

func TestGetPoolsWithTierAfterRemove(t *testing.T) {
	poolTiers := GetPoolsWithTier()
	shouldEQ(t, len(poolTiers), 2)
	shouldEQ(t, poolTiers[0], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000_1")
	shouldEQ(t, poolTiers[1], "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:100_3")
}
