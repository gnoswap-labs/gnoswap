package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v2/gnft"
)

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500"] = InternalTier{
		tier:           1,
		startTimestamp: time.Now().Unix(),
	}

	// tier 2
	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:100"] = InternalTier{
		tier:           2,
		startTimestamp: time.Now().Unix(),
	}

	// set pool create fee to 0 for testing
	std.TestSetRealm(adminRealm)
	pl.SetPoolCreationFeeByAdmin(0)
}

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)
	std.TestSkipHeights(1)

	pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006") // internal, tier 1 // tick 10_000 ≈ x2.7

	pl.CreatePool(barPath, bazPath, 100, "79228162514264337593543950337") // internal, tier 2 // tick 0 ≈ x1

	pl.CreatePool(fooPath, quxPath, 500, "79228162514264337593543950337") // external // tick 0 ≈ x1

	std.TestSkipHeights(3)
}

func TestMintBarQux500(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee500,       // fee
		int32(9000),  // tickLower
		int32(11000), // tickUpper
		"100000",     // amount0Desired
		"100000",     // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		admin,
		admin,
	)

	std.TestSkipHeights(1)

	uassert.Equal(t, tokenId, uint64(1))
	uassert.Equal(t, gnft.OwnerOf(tid(tokenId)), admin)
	uassert.Equal(t, amount0, "36790")
	uassert.Equal(t, amount1, "100000")
}

func TestMintBarBaz100(t *testing.T) {
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		bazPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"100000",     // amount0Desired
		"100000",     // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		admin,
		admin,
	)
	std.TestSkipHeights(1)

	uassert.Equal(t, tokenId, uint64(2))
	uassert.Equal(t, gnft.OwnerOf(tid(tokenId)), admin)
	uassert.Equal(t, amount0, "100000")
	uassert.Equal(t, amount1, "100000")
}

func TestMintFooQux500(t *testing.T) {
	std.TestSetRealm(adminRealm)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		fooPath,      // token0
		quxPath,      // token1
		fee500,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"100000",     // amount0Desired
		"100000",     // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		admin,
		admin,
	)

	std.TestSkipHeights(1)

	uassert.Equal(t, tokenId, uint64(3))
	uassert.Equal(t, gnft.OwnerOf(tid(tokenId)), admin)
	uassert.Equal(t, amount0, "100000")
	uassert.Equal(t, amount1, "100000")
}

func TestStakeInternalTier1(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
	StakeToken(1)

	std.TestSkipHeights(2)

	uassert.Equal(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr())
	uassert.Equal(t, len(deposits), 1)
}

func TestStakeInternalTier2(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(2))
	StakeToken(2)

	std.TestSkipHeights(2)

	uassert.Equal(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr())
	uassert.Equal(t, len(deposits), 2)
}
