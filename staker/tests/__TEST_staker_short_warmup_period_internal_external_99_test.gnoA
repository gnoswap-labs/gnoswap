// internal and external incentive + warm up period testing
// with two external incentives for same pool
// 	bar + gns
// with internal incentive for same pool

package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/r/gnoswap/consts"

	en "gno.land/r/gnoswap/emission"
	pl "gno.land/r/gnoswap/pool"
	pn "gno.land/r/gnoswap/position"

	"gno.land/r/gnoswap/gnft"
	"gno.land/r/gnoswap/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func init() {
	// init pool tiers
	// tier 1
	delete(poolTiers, MUST_EXISTS_IN_TIER_1)
	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100"] = InternalTier{
		tier:           1,
		startTimestamp: time.Now().Unix(),
		startHeight:    std.GetHeight(),
		updateHeight:   std.GetHeight(),
	}

	// override warm-up period for testing
	warmUp[100] = 901 // 30m ~
	warmUp[70] = 301  // 10m ~ 30m
	warmUp[50] = 151  // 5m ~ 10m
	warmUp[30] = 1    // ~ 5m
}

func TestPoolInitCreatePool(t *testing.T) {

	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

	pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
	pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

	std.TestSkipHeights(1)
}

func TestMintBarQux100_1(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"50",         // amount0Desired
		"50",         // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa.String(),
	)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, gnft.OwnerOf(tid(tokenId)), std.GetOrigCaller()) // gsa

	std.TestSkipHeights(1)
}

func TestCreateExternalIncentiveBar(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)

	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
		barPath,    // rewardToken string, // token path should be registered
		"20000000", // _rewardAmount string,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)

	// after
	printExternalInfo()

	std.TestSkipHeights(1)
}

func TestCreateExternalIncentiveGns(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)

	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
		consts.GNS_PATH, // rewardToken string, // token path should be registered
		"20000000",      // _rewardAmount string,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)

	// after
	printExternalInfo()

	std.TestSkipHeights(1)
}

func TestStakeToken_1(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
	StakeToken(1)

	std.TestSkipHeights(1)
}

func TestBeforeActive(t *testing.T) {
	en.MintAndDistributeGns()
	CalcPoolPosition()
	printExternalInfo()

	std.TestSkipHeights(1)
}

func TestAfterActive(t *testing.T) {
	std.TestSkipHeights(849) // in active
	std.TestSkipHeights(1)   // active // but no block passed since active
	std.TestSkipHeights(50)  // skip 50 more block

	en.MintAndDistributeGns()
	CalcPoolPosition()

	std.TestSkipHeights(1)
}

func TestDuratino200(t *testing.T) {
	std.TestSkipHeights(199) // skip 1 + 199 = 200 more block
	en.MintAndDistributeGns()
	CalcPoolPosition()
	printExternalInfo()
}

func TestCollectReward(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	oldBar := bar.BalanceOf(a2u(gsa))
	oldGns := gns.BalanceOf(a2u(gsa))

	CollectReward(1)

	newBar := bar.BalanceOf(a2u(gsa))
	newGns := gns.BalanceOf(a2u(gsa))

	shouldEQ(t, newBar-oldBar, 485)
	shouldEQ(t, newGns-oldGns, 7861515679) // external 485 + internal 7861515194
}

func TestCollectRewardSameBlockNoReward(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	oldBar := bar.BalanceOf(a2u(gsa))
	oldGns := gns.BalanceOf(a2u(gsa))

	CollectReward(1)

	newBar := bar.BalanceOf(a2u(gsa))
	newGns := gns.BalanceOf(a2u(gsa))

	// same block no change
	shouldEQ(t, newBar-oldBar, 0)
	shouldEQ(t, newGns-oldGns, 0)
}

func TestCollectRewardSingleBlock(t *testing.T) {
	std.TestSkipHeights(1)

	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	oldBar := bar.BalanceOf(a2u(gsa))
	oldGns := gns.BalanceOf(a2u(gsa))

	CollectReward(1)

	newBar := bar.BalanceOf(a2u(gsa))
	newGns := gns.BalanceOf(a2u(gsa))

	shouldEQ(t, newBar-oldBar, 2)        // 2 bar from external incentive
	shouldEQ(t, newGns-oldGns, 10595037) // 10595035 gns from internal + 2 gns from external
}
