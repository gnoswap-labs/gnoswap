package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/r/gnoswap/v2/consts"

	en "gno.land/r/gnoswap/v2/emission"
	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gnft"
	"gno.land/r/gnoswap/v2/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func init() {
	// init pool tiers
	// tier 1
	delete(poolTiers, MUST_EXISTS_IN_TIER_1)

	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100"] = InternalTier{
		tier:           1,
		startTimestamp: time.Now().Unix(),
	}

	std.TestSkipHeights(1)

	// override warm-up period for testing
	warmUp[100] = 901 // 30m ~
	warmUp[70] = 301  // 10m ~ 30m
	warmUp[50] = 151  // 5m ~ 10m
	warmUp[30] = 1    // ~ 5m
}

func TestDoulbeMint(t *testing.T) {
	en.MintAndDistributeGns()
	en.MintAndDistributeGns()

	std.TestSkipHeights(1)
}

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

	pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
	pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

	std.TestSkipHeights(1)
}

func TestMintBarQux100_1(t *testing.T) {
	std.TestSetRealm(adminRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"50",         // amount0Desired
		"50",         // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		admin,
		admin,
	)
	std.TestSkipHeights(1)
}

func TestMintBarQux100_2(t *testing.T) {
	std.TestSetRealm(adminRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"300",        // amount0Desired
		"300",        // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		admin,
		admin,
	)
	std.TestSkipHeights(1)
}

func TestStakeToken_1(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
	StakeToken(1)

	gpi := GetPrintInfo()
	shouldEQ(t, gpi, `{"height":128,"time":1234567900,"gns":{"staker":0,"devOps":14269405,"communityPool":57077624,"govStaker":0,"protocolFee":200000000,"GnoswapAdmin":99999800000000},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":0,"position":[{"lpTokenId":1,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":0,"fullAmount":0,"ratio":0,"warmUpAmount":0,"full30":0,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0}]}]}`)

	std.TestSkipHeights(1)
}

// START, STAKE 1 TOKEN => GETTER TEST

func TestGetPoolGns(t *testing.T) {
	jsonStr := GetPoolGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"0"}]`)
}

func TestGetPoolCurrentBlockGns(t *testing.T) {
	jsonStr := GetPoolCurrentBlockGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolLastTmpGns(t *testing.T) {
	jsonStr := GetPoolLastTmpGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"0"}]`)
}

func TestGetPoolAccuGns(t *testing.T) {
	jsonStr := GetPoolAccuGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"53510274"}]`)
}

func TestGetPositionGns(t *testing.T) {
	jsonStr := GetPositionGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPositionLastGns(t *testing.T) {
	jsonStr := GetPositionLastGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPositionLastExternal(t *testing.T) {
	jsonStr := GetPositionLastExternal()
	shouldEQ(t, jsonStr, ``)
}

func TestGetExternalLastCalculatedTimestamp(t *testing.T) {
	jsonStr := GetExternalLastCalculatedTimestamp()
	shouldEQ(t, jsonStr, ``)
}

func TestGetExternalGns(t *testing.T) {
	jsonStr := GetExternalGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolTotalStakedLiquidity(t *testing.T) {
	jsonStr := GetPoolTotalStakedLiquidity()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPositionsLiquidityRatio(t *testing.T) {
	jsonStr := GetPositionsLiquidityRatio()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolsPositions(t *testing.T) {

	jsonStr := GetPoolsPositions()
	shouldEQ(t, jsonStr, ``)
}

// END, STAKE 1 TOKEN => GETTER TEST

func TestStakeToken_2(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gnft.Approve(a2u(GetOrigPkgAddr()), tid(2))
	StakeToken(2)

	gpi := GetPrintInfo()
	shouldEQ(t, gpi, `{"height":129,"time":1234567902,"gns":{"staker":10702055,"devOps":17123286,"communityPool":57791094,"govStaker":0,"protocolFee":200000000,"GnoswapAdmin":99999800000000},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":10702055,"position":[{"lpTokenId":1,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":1,"fullAmount":10702055,"ratio":30,"warmUpAmount":3210616,"full30":10702055,"give30":3210616,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0},{"lpTokenId":2,"stakedHeight":129,"stakedTimestamp":1234567902,"stakedDuration":0,"fullAmount":0,"ratio":0,"warmUpAmount":0,"full30":0,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0}]}]}`)

	std.TestSkipHeights(1)
}

// START, STAKE 1 + 2 TOKEN => GETTER TEST
func TestGetPoolGns2(t *testing.T) {
	jsonStr := GetPoolGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"10702055"}]`)
}

func TestGetPoolCurrentBlockGns2(t *testing.T) {
	jsonStr := GetPoolCurrentBlockGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolLastTmpGns2(t *testing.T) {
	jsonStr := GetPoolLastTmpGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"0"}]`)
}

func TestGetPoolAccuGns2(t *testing.T) {
	jsonStr := GetPoolAccuGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"64212329"}]`)
}

func TestGetPositionGns2(t *testing.T) {
	jsonStr := GetPositionGns()
	shouldEQ(t, jsonStr, `[{"tokenId":"1","gnsAmount":"10702055"}]`)
}

func TestGetPositionLastGns2(t *testing.T) {
	jsonStr := GetPositionLastGns()
	shouldEQ(t, jsonStr, `[{"tokenId":"1","gnsAmount":"0"}]`)
}

func TestGetPositionLastExternal2(t *testing.T) {
	jsonStr := GetPositionLastExternal()
	shouldEQ(t, jsonStr, ``)
}

func TestGetExternalLastCalculatedTimestamp2(t *testing.T) {
	jsonStr := GetExternalLastCalculatedTimestamp()
	shouldEQ(t, jsonStr, ``)
}

func TestGetExternalGns2(t *testing.T) {
	jsonStr := GetExternalGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolTotalStakedLiquidity2(t *testing.T) {
	jsonStr := GetPoolTotalStakedLiquidity()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","totalStakedLiquidity":"1025"}]`)
}

func TestGetPositionsLiquidityRatio2(t *testing.T) {
	jsonStr := GetPositionsLiquidityRatio()
	shouldEQ(t, jsonStr, `[{"tokenId":"1","positionRatio":"79228162514264337593543950336"}]`)
}

func TestGetPoolsPositions2(t *testing.T) {
	jsonStr := GetPoolsPositions()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","tokenIds":["1"]}]`)
}

// END, STAKE 1 + 2 TOKEN => GETTER TEST

// START, ETC GETTER TEST
func TestGetHeight(t *testing.T) {
	res := GetHeight()
	shouldEQ(t, res, int64(130))
}

func TestGetTimeNowUnix(t *testing.T) {
	res := GetTimeNowUnix()
	shouldEQ(t, res, int64(1234567904))
}

func TestGetExternalGnsAmount(t *testing.T) {
	res := GetExternalGnsAmount()
	shouldEQ(t, res, uint64(0))
}

func TestGetStakerGnsBalance(t *testing.T) {
	res := GetStakerGnsBalance()
	shouldEQ(t, res, uint64(21404110))
}

func TestGetStakerEmissionGnsBalance(t *testing.T) {
	res := GetStakerEmissionGnsBalance()
	shouldEQ(t, res, uint64(21404110))
}

func TestGetLastCalculatedBalance(t *testing.T) {
	res := GetLastCalculatedBalance()
	shouldEQ(t, res, uint64(10702055))
}

func TestGetLastCalculatedHeight(t *testing.T) {
	res := GetLastCalculatedHeight()
	shouldEQ(t, res, int64(129))
}

func TestGetMintedGnsAmount(t *testing.T) {
	res := GetMintedGnsAmount()
	shouldEQ(t, res, uint64(10702055))
}

func TestGetNumPoolTiers(t *testing.T) {
	res := GetNumPoolTiers()
	shouldEQ(t, res, `1*STAKER*0*STAKER*0`)
}

func TestGetTiersRatio(t *testing.T) {
	res := GetTiersRatio()
	shouldEQ(t, res, `100*STAKER*0*STAKER*0`)
}

func TestGetWarmUpPeriods(t *testing.T) {
	res := GetWarmUpPeriods()
	shouldEQ(t, res, `1*STAKER*151*STAKER*301*STAKER*901`)
}

func TestGetGetPositionsInternalWarmUpAmount(t *testing.T) {
	res := GetPositionsInternalWarmUpAmount()
	shouldEQ(t, res, `[{"tokenId":"1","full30":"10702055","give30":"3210616","left30":"7491439","full50":"0","give50":"0","left50":"0","full70":"0","give70":"0","left70":"0","full100":"0"},{"tokenId":"2","full30":"0","give30":"0","left30":"0","full50":"0","give50":"0","left50":"0","full70":"0","give70":"0","left70":"0","full100":"0"}]`)
}

// CREATE EXTERNAL INCENTIVE
func TestCreateExternalIncentive_90_180(t *testing.T) {
	{
		std.TestSetRealm(adminRealm)

		bar.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
			barPath,     // rewardToken string, // token path should be registered
			"900000000", // _rewardAmount string,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)
	}

	{
		std.TestSetRealm(adminRealm)

		qux.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
			quxPath,      // rewardToken string, // token path should be registered
			"1230000000", // _rewardAmount string,
			1234569600,
			1234569600+TIMESTAMP_180DAYS,
		)
	}
}

func TestGetPositionsExternalWarmUpAmount(t *testing.T) {
	std.TestSkipHeights(1000)

	en.MintAndDistributeGns()
	CalcPoolPosition() // trigger this to update externalGns

	res := GetPositionsExternalWarmUpAmount()
	shouldEQ(t, res, `[{"tokenId":"1","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","full30":"4959","give30":"1487","left30":"3472","full50":"66","give50":"33","left50":"33","full70":"0","give70":"0","left70":"0","full100":"0"},{"tokenId":"1","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","full30":"3428","give30":"1028","left30":"2400","full50":"6","give50":"3","left50":"3","full70":"0","give70":"0","left70":"0","full100":"0"},{"tokenId":"2","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","full30":"29762","give30":"8928","left30":"20834","full50":"396","give50":"198","left50":"198","full70":"0","give70":"0","left70":"0","full100":"0"},{"tokenId":"2","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","full30":"20572","give30":"6171","left30":"14401","full50":"36","give50":"18","left50":"18","full70":"0","give70":"0","left70":"0","full100":"0"}]`)
}

func TestGetPositionsExternalLastCalculatedHeight(t *testing.T) {
	res := GetPositionsExternalLastCalculatedHeight()
	shouldEQ(t, res, `[{"tokenId":"1","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","lastCalculatedHeight":"1130"},{"tokenId":"1","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","lastCalculatedHeight":"1130"},{"tokenId":"2","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","lastCalculatedHeight":"1130"},{"tokenId":"2","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","lastCalculatedHeight":"1130"}]`)
}

func TestGetExternalLastCalculatedTimestamp3(t *testing.T) {
	jsonStr := GetExternalLastCalculatedTimestamp()
	shouldEQ(t, jsonStr, `[{"incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","lastCalculatedTimestamp":"1234569904"},{"incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","lastCalculatedTimestamp":"1234569904"}]`)
}

func TestGetNecessary(t *testing.T) {
	res := GetNecessary()
	shouldEQ(t, res, `{"height":"1130","now":"1234569904","blockGenerationInterval":"2","lastCalculatedHeight":"1130","lastCalculatedBalance":"10723458610","externalGnsBalance":"0","depositGnsAmount":"2000000000","gnsBalance":"12723458610","numPoolTiers":"1*STAKER*0*STAKER*0","tiersRatio":"100*STAKER*0*STAKER*0","warmUpPeriods":"1*STAKER*151*STAKER*301*STAKER*901","poolGns":"W3sicG9vbFBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMCIsImduc0Ftb3VudCI6IjEwNzIzNDU4NjEwIn1d","poolAccuGns":"W3sicG9vbFBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMCIsImduc0Ftb3VudCI6IjEwNzc2OTY4ODg0In1d","poolLastTmpGns":"W3sicG9vbFBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMCIsImduc0Ftb3VudCI6IjEyIn1d","positionGns":"W3sidG9rZW5JZCI6IjEiLCJnbnNBbW91bnQiOiIxNTQwODgyNTc5In0seyJ0b2tlbklkIjoiMiIsImduc0Ftb3VudCI6IjkxODI1NzYwMTkifV0=","positionLastGns":"W3sidG9rZW5JZCI6IjEiLCJnbnNBbW91bnQiOiIxMjIzMDcwNiJ9LHsidG9rZW5JZCI6IjIiLCJnbnNBbW91bnQiOiI5MTczNDAzIn1d","positionsInternalWarmUpAmount":"W3sidG9rZW5JZCI6IjEiLCJmdWxsMzAiOiIyMzg0NzExODMiLCJnaXZlMzAiOiI3MTU0MTM1NCIsImxlZnQzMCI6IjE2NjkyOTgyOSIsImZ1bGw1MCI6IjIyOTI5Nzc4MCIsImdpdmU1MCI6IjExNDY0ODg5MCIsImxlZnQ1MCI6IjExNDY0ODg5MCIsImZ1bGw3MCI6IjkxNzE5MTEyMyIsImdpdmU3MCI6IjY0MjAzMzc4NiIsImxlZnQ3MCI6IjI3NTE1NzMzNyIsImZ1bGwxMDAiOiIxNTU5MjI0OTEifSx7InRva2VuSWQiOiIyIiwiZnVsbDMwIjoiMTM3NjAxMDM5MiIsImdpdmUzMCI6IjQxMjgwMzExNiIsImxlZnQzMCI6Ijk2MzIwNzI3NiIsImZ1bGw1MCI6IjEzNzYwMTAzOTIiLCJnaXZlNTAiOiI2ODgwMDUxOTYiLCJsZWZ0NTAiOiI2ODgwMDUxOTYiLCJmdWxsNzAiOiI1NTA0MDQxNTY5IiwiZ2l2ZTcwIjoiMzg1MjgyOTA5OCIsImxlZnQ3MCI6IjE2NTEyMTI0NzEiLCJmdWxsMTAwIjoiOTI2NTEzNjY0In1d","positionExternal":"W3sidG9rZW5JZCI6IjEiLCJleHRlcm5hbHMiOlt7ImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNk1USXpORFUyT1RZd01Eb3hNalF5TXpRMU5qQXdPakV6TUE9PSIsInBvb2xQYXRoIjoiZ25vLmxhbmQvci9vbmJsb2MvYmFyOmduby5sYW5kL3Ivb25ibG9jL3F1eDoxMDAiLCJ0b2tlblBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXIiLCJ0b2tlbkFtb3VudFg5NiI6IjM5ODE4MTI5OTQxNzk1Mzk5MDMzMDM2ODYzNDQ1MTgzNCIsInRva2VuQW1vdW50RnVsbCI6IjAiLCJ0b2tlbkFtb3VudFRvR2l2ZSI6IjAifSx7ImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTl4ZFhnNk1USXpORFUyT1RZd01Eb3hNalV3TVRJeE5qQXdPakV6TUE9PSIsInBvb2xQYXRoIjoiZ25vLmxhbmQvci9vbmJsb2MvYmFyOmduby5sYW5kL3Ivb25ibG9jL3F1eDoxMDAiLCJ0b2tlblBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9xdXgiLCJ0b2tlbkFtb3VudFg5NiI6IjI3MjA5MDU1NDYwMjI2ODU2MDA1OTA4NTIzMzU0MjA5NiIsInRva2VuQW1vdW50RnVsbCI6IjAiLCJ0b2tlbkFtb3VudFRvR2l2ZSI6IjAifV19LHsidG9rZW5JZCI6IjIiLCJleHRlcm5hbHMiOlt7ImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNk1USXpORFUyT1RZd01Eb3hNalF5TXpRMU5qQXdPakV6TUE9PSIsInBvb2xQYXRoIjoiZ25vLmxhbmQvci9vbmJsb2MvYmFyOmduby5sYW5kL3Ivb25ibG9jL3F1eDoxMDAiLCJ0b2tlblBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXIiLCJ0b2tlbkFtb3VudFg5NiI6IjIzODk0NzYyNjc3NDA3MjYyNDM5NDA1ODA3MDI3MzEzNzUiLCJ0b2tlbkFtb3VudEZ1bGwiOiIwIiwidG9rZW5BbW91bnRUb0dpdmUiOiIwIn0seyJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5eGRYZzZNVEl6TkRVMk9UWXdNRG94TWpVd01USXhOakF3T2pFek1BPT0iLCJwb29sUGF0aCI6Imduby5sYW5kL3Ivb25ibG9jL2Jhcjpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTAwIiwidG9rZW5QYXRoIjoiZ25vLmxhbmQvci9vbmJsb2MvcXV4IiwidG9rZW5BbW91bnRYOTYiOiIxNjMyODA4NzgyOTU2MTYyOTMzMzU5Mzk2ODEzNTMzMTYyIiwidG9rZW5BbW91bnRGdWxsIjoiMCIsInRva2VuQW1vdW50VG9HaXZlIjoiMCJ9XX1d","positionLastExternal":"W3sidG9rZW5JZCI6IjEiLCJsYXN0RXh0ZXJuYWxzIjpbeyJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJsYXN0UmV3YXJkQW1vdW50IjoiMCJ9LHsiaW5jZW50aXZlSWQiOiJaekZzYlhaeWNuSnlOR1Z5TW5Wek9EUm9NamN6TW5OeWRUYzJZemw2YkRKdWRtdHVhR0U0WXpwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZaMjV2TG14aGJtUXZjaTl2Ym1Kc2IyTXZjWFY0T2pFd01EcG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OXhkWGc2TVRJek5EVTJPVFl3TURveE1qVXdNVEl4TmpBd09qRXpNQT09IiwibGFzdFJld2FyZEFtb3VudCI6IjAifV19LHsidG9rZW5JZCI6IjIiLCJsYXN0RXh0ZXJuYWxzIjpbeyJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJsYXN0UmV3YXJkQW1vdW50IjoiMCJ9LHsiaW5jZW50aXZlSWQiOiJaekZzYlhaeWNuSnlOR1Z5TW5Wek9EUm9NamN6TW5OeWRUYzJZemw2YkRKdWRtdHVhR0U0WXpwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZaMjV2TG14aGJtUXZjaTl2Ym1Kc2IyTXZjWFY0T2pFd01EcG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OXhkWGc2TVRJek5EVTJPVFl3TURveE1qVXdNVEl4TmpBd09qRXpNQT09IiwibGFzdFJld2FyZEFtb3VudCI6IjAifV19XQ==","positionsExternalWarmUpAmount":"W3sidG9rZW5JZCI6IjEiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJmdWxsMzAiOiI0OTU5IiwiZ2l2ZTMwIjoiMTQ4NyIsImxlZnQzMCI6IjM0NzIiLCJmdWxsNTAiOiI2NiIsImdpdmU1MCI6IjMzIiwibGVmdDUwIjoiMzMiLCJmdWxsNzAiOiIwIiwiZ2l2ZTcwIjoiMCIsImxlZnQ3MCI6IjAiLCJmdWxsMTAwIjoiMCJ9LHsidG9rZW5JZCI6IjEiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5eGRYZzZNVEl6TkRVMk9UWXdNRG94TWpVd01USXhOakF3T2pFek1BPT0iLCJmdWxsMzAiOiIzNDI4IiwiZ2l2ZTMwIjoiMTAyOCIsImxlZnQzMCI6IjI0MDAiLCJmdWxsNTAiOiI2IiwiZ2l2ZTUwIjoiMyIsImxlZnQ1MCI6IjMiLCJmdWxsNzAiOiIwIiwiZ2l2ZTcwIjoiMCIsImxlZnQ3MCI6IjAiLCJmdWxsMTAwIjoiMCJ9LHsidG9rZW5JZCI6IjIiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJmdWxsMzAiOiIyOTc2MiIsImdpdmUzMCI6Ijg5MjgiLCJsZWZ0MzAiOiIyMDgzNCIsImZ1bGw1MCI6IjM5NiIsImdpdmU1MCI6IjE5OCIsImxlZnQ1MCI6IjE5OCIsImZ1bGw3MCI6IjAiLCJnaXZlNzAiOiIwIiwibGVmdDcwIjoiMCIsImZ1bGwxMDAiOiIwIn0seyJ0b2tlbklkIjoiMiIsImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTl4ZFhnNk1USXpORFUyT1RZd01Eb3hNalV3TVRJeE5qQXdPakV6TUE9PSIsImZ1bGwzMCI6IjIwNTcyIiwiZ2l2ZTMwIjoiNjE3MSIsImxlZnQzMCI6IjE0NDAxIiwiZnVsbDUwIjoiMzYiLCJnaXZlNTAiOiIxOCIsImxlZnQ1MCI6IjE4IiwiZnVsbDcwIjoiMCIsImdpdmU3MCI6IjAiLCJsZWZ0NzAiOiIwIiwiZnVsbDEwMCI6IjAifV0=","positionsExternalLastCalculatedHeight":"W3sidG9rZW5JZCI6IjEiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJsYXN0Q2FsY3VsYXRlZEhlaWdodCI6IjExMzAifSx7InRva2VuSWQiOiIxIiwiaW5jZW50aXZlSWQiOiJaekZzYlhaeWNuSnlOR1Z5TW5Wek9EUm9NamN6TW5OeWRUYzJZemw2YkRKdWRtdHVhR0U0WXpwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZaMjV2TG14aGJtUXZjaTl2Ym1Kc2IyTXZjWFY0T2pFd01EcG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OXhkWGc2TVRJek5EVTJPVFl3TURveE1qVXdNVEl4TmpBd09qRXpNQT09IiwibGFzdENhbGN1bGF0ZWRIZWlnaHQiOiIxMTMwIn0seyJ0b2tlbklkIjoiMiIsImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNk1USXpORFUyT1RZd01Eb3hNalF5TXpRMU5qQXdPakV6TUE9PSIsImxhc3RDYWxjdWxhdGVkSGVpZ2h0IjoiMTEzMCJ9LHsidG9rZW5JZCI6IjIiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5eGRYZzZNVEl6TkRVMk9UWXdNRG94TWpVd01USXhOakF3T2pFek1BPT0iLCJsYXN0Q2FsY3VsYXRlZEhlaWdodCI6IjExMzAifV0=","externalLastCalculatedTimestamp":"W3siaW5jZW50aXZlSWQiOiJaekZzYlhaeWNuSnlOR1Z5TW5Wek9EUm9NamN6TW5OeWRUYzJZemw2YkRKdWRtdHVhR0U0WXpwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZaMjV2TG14aGJtUXZjaTl2Ym1Kc2IyTXZjWFY0T2pFd01EcG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2TVRJek5EVTJPVFl3TURveE1qUXlNelExTmpBd09qRXpNQT09IiwibGFzdENhbGN1bGF0ZWRUaW1lc3RhbXAiOiIxMjM0NTY5OTA0In0seyJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5eGRYZzZNVEl6TkRVMk9UWXdNRG94TWpVd01USXhOakF3T2pFek1BPT0iLCJsYXN0Q2FsY3VsYXRlZFRpbWVzdGFtcCI6IjEyMzQ1Njk5MDQifV0="}`)
}

func TestGetSingleData(t *testing.T) {
	res := GetSingleData()
	shouldEQ(t, res, `{"height":"1130","now":"1234569904","blockGenerationInterval":"2","lastCalculatedHeight":"1130","lastCalculatedBalance":"10723458610","externalGnsBalance":"0","depositGnsAmount":"2000000000","gnsBalance":"12723458610","numPoolTiers":"1*STAKER*0*STAKER*0","tiersRatio":"100*STAKER*0*STAKER*0","warmUpPeriods":"1*STAKER*151*STAKER*301*STAKER*901"}`)
}

func TestGetPoolGnsData(t *testing.T) {
	res := GetPoolGnsData()
	shouldEQ(t, res, `{"height":"1130","now":"1234569904","poolGns":"W3sicG9vbFBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMCIsImduc0Ftb3VudCI6IjEwNzIzNDU4NjEwIn1d","poolAccuGns":"W3sicG9vbFBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMCIsImduc0Ftb3VudCI6IjEwNzc2OTY4ODg0In1d","poolLastTmpGns":"W3sicG9vbFBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMCIsImduc0Ftb3VudCI6IjEyIn1d"}`)
}

func TestGetPositionGnsData(t *testing.T) {
	res := GetPositionGnsData()
	shouldEQ(t, res, `{"height":"1130","now":"1234569904","positionGns":"W3sidG9rZW5JZCI6IjEiLCJnbnNBbW91bnQiOiIxNTQwODgyNTc5In0seyJ0b2tlbklkIjoiMiIsImduc0Ftb3VudCI6IjkxODI1NzYwMTkifV0=","positionLastGns":"W3sidG9rZW5JZCI6IjEiLCJnbnNBbW91bnQiOiIxMjIzMDcwNiJ9LHsidG9rZW5JZCI6IjIiLCJnbnNBbW91bnQiOiI5MTczNDAzIn1d","positionsInternalWarmUpAmount":"W3sidG9rZW5JZCI6IjEiLCJmdWxsMzAiOiIyMzg0NzExODMiLCJnaXZlMzAiOiI3MTU0MTM1NCIsImxlZnQzMCI6IjE2NjkyOTgyOSIsImZ1bGw1MCI6IjIyOTI5Nzc4MCIsImdpdmU1MCI6IjExNDY0ODg5MCIsImxlZnQ1MCI6IjExNDY0ODg5MCIsImZ1bGw3MCI6IjkxNzE5MTEyMyIsImdpdmU3MCI6IjY0MjAzMzc4NiIsImxlZnQ3MCI6IjI3NTE1NzMzNyIsImZ1bGwxMDAiOiIxNTU5MjI0OTEifSx7InRva2VuSWQiOiIyIiwiZnVsbDMwIjoiMTM3NjAxMDM5MiIsImdpdmUzMCI6IjQxMjgwMzExNiIsImxlZnQzMCI6Ijk2MzIwNzI3NiIsImZ1bGw1MCI6IjEzNzYwMTAzOTIiLCJnaXZlNTAiOiI2ODgwMDUxOTYiLCJsZWZ0NTAiOiI2ODgwMDUxOTYiLCJmdWxsNzAiOiI1NTA0MDQxNTY5IiwiZ2l2ZTcwIjoiMzg1MjgyOTA5OCIsImxlZnQ3MCI6IjE2NTEyMTI0NzEiLCJmdWxsMTAwIjoiOTI2NTEzNjY0In1d"}`)
}

func TestGetPositionExternalData(t *testing.T) {
	res := GetPositionExternalData()
	shouldEQ(t, res, `{"height":"1130","now":"1234569904","positionExternal":"W3sidG9rZW5JZCI6IjEiLCJleHRlcm5hbHMiOlt7ImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNk1USXpORFUyT1RZd01Eb3hNalF5TXpRMU5qQXdPakV6TUE9PSIsInBvb2xQYXRoIjoiZ25vLmxhbmQvci9vbmJsb2MvYmFyOmduby5sYW5kL3Ivb25ibG9jL3F1eDoxMDAiLCJ0b2tlblBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXIiLCJ0b2tlbkFtb3VudFg5NiI6IjM5ODE4MTI5OTQxNzk1Mzk5MDMzMDM2ODYzNDQ1MTgzNCIsInRva2VuQW1vdW50RnVsbCI6IjAiLCJ0b2tlbkFtb3VudFRvR2l2ZSI6IjAifSx7ImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTl4ZFhnNk1USXpORFUyT1RZd01Eb3hNalV3TVRJeE5qQXdPakV6TUE9PSIsInBvb2xQYXRoIjoiZ25vLmxhbmQvci9vbmJsb2MvYmFyOmduby5sYW5kL3Ivb25ibG9jL3F1eDoxMDAiLCJ0b2tlblBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9xdXgiLCJ0b2tlbkFtb3VudFg5NiI6IjI3MjA5MDU1NDYwMjI2ODU2MDA1OTA4NTIzMzU0MjA5NiIsInRva2VuQW1vdW50RnVsbCI6IjAiLCJ0b2tlbkFtb3VudFRvR2l2ZSI6IjAifV19LHsidG9rZW5JZCI6IjIiLCJleHRlcm5hbHMiOlt7ImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNk1USXpORFUyT1RZd01Eb3hNalF5TXpRMU5qQXdPakV6TUE9PSIsInBvb2xQYXRoIjoiZ25vLmxhbmQvci9vbmJsb2MvYmFyOmduby5sYW5kL3Ivb25ibG9jL3F1eDoxMDAiLCJ0b2tlblBhdGgiOiJnbm8ubGFuZC9yL29uYmxvYy9iYXIiLCJ0b2tlbkFtb3VudFg5NiI6IjIzODk0NzYyNjc3NDA3MjYyNDM5NDA1ODA3MDI3MzEzNzUiLCJ0b2tlbkFtb3VudEZ1bGwiOiIwIiwidG9rZW5BbW91bnRUb0dpdmUiOiIwIn0seyJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5eGRYZzZNVEl6TkRVMk9UWXdNRG94TWpVd01USXhOakF3T2pFek1BPT0iLCJwb29sUGF0aCI6Imduby5sYW5kL3Ivb25ibG9jL2Jhcjpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTAwIiwidG9rZW5QYXRoIjoiZ25vLmxhbmQvci9vbmJsb2MvcXV4IiwidG9rZW5BbW91bnRYOTYiOiIxNjMyODA4NzgyOTU2MTYyOTMzMzU5Mzk2ODEzNTMzMTYyIiwidG9rZW5BbW91bnRGdWxsIjoiMCIsInRva2VuQW1vdW50VG9HaXZlIjoiMCJ9XX1d","positionLastExternal":"W3sidG9rZW5JZCI6IjEiLCJsYXN0RXh0ZXJuYWxzIjpbeyJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJsYXN0UmV3YXJkQW1vdW50IjoiMCJ9LHsiaW5jZW50aXZlSWQiOiJaekZzYlhaeWNuSnlOR1Z5TW5Wek9EUm9NamN6TW5OeWRUYzJZemw2YkRKdWRtdHVhR0U0WXpwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZaMjV2TG14aGJtUXZjaTl2Ym1Kc2IyTXZjWFY0T2pFd01EcG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OXhkWGc2TVRJek5EVTJPVFl3TURveE1qVXdNVEl4TmpBd09qRXpNQT09IiwibGFzdFJld2FyZEFtb3VudCI6IjAifV19LHsidG9rZW5JZCI6IjIiLCJsYXN0RXh0ZXJuYWxzIjpbeyJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJsYXN0UmV3YXJkQW1vdW50IjoiMCJ9LHsiaW5jZW50aXZlSWQiOiJaekZzYlhaeWNuSnlOR1Z5TW5Wek9EUm9NamN6TW5OeWRUYzJZemw2YkRKdWRtdHVhR0U0WXpwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZaMjV2TG14aGJtUXZjaTl2Ym1Kc2IyTXZjWFY0T2pFd01EcG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OXhkWGc2TVRJek5EVTJPVFl3TURveE1qVXdNVEl4TmpBd09qRXpNQT09IiwibGFzdFJld2FyZEFtb3VudCI6IjAifV19XQ==","positionsExternalWarmUpAmount":"W3sidG9rZW5JZCI6IjEiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJmdWxsMzAiOiI0OTU5IiwiZ2l2ZTMwIjoiMTQ4NyIsImxlZnQzMCI6IjM0NzIiLCJmdWxsNTAiOiI2NiIsImdpdmU1MCI6IjMzIiwibGVmdDUwIjoiMzMiLCJmdWxsNzAiOiIwIiwiZ2l2ZTcwIjoiMCIsImxlZnQ3MCI6IjAiLCJmdWxsMTAwIjoiMCJ9LHsidG9rZW5JZCI6IjEiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5eGRYZzZNVEl6TkRVMk9UWXdNRG94TWpVd01USXhOakF3T2pFek1BPT0iLCJmdWxsMzAiOiIzNDI4IiwiZ2l2ZTMwIjoiMTAyOCIsImxlZnQzMCI6IjI0MDAiLCJmdWxsNTAiOiI2IiwiZ2l2ZTUwIjoiMyIsImxlZnQ1MCI6IjMiLCJmdWxsNzAiOiIwIiwiZ2l2ZTcwIjoiMCIsImxlZnQ3MCI6IjAiLCJmdWxsMTAwIjoiMCJ9LHsidG9rZW5JZCI6IjIiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJmdWxsMzAiOiIyOTc2MiIsImdpdmUzMCI6Ijg5MjgiLCJsZWZ0MzAiOiIyMDgzNCIsImZ1bGw1MCI6IjM5NiIsImdpdmU1MCI6IjE5OCIsImxlZnQ1MCI6IjE5OCIsImZ1bGw3MCI6IjAiLCJnaXZlNzAiOiIwIiwibGVmdDcwIjoiMCIsImZ1bGwxMDAiOiIwIn0seyJ0b2tlbklkIjoiMiIsImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTl4ZFhnNk1USXpORFUyT1RZd01Eb3hNalV3TVRJeE5qQXdPakV6TUE9PSIsImZ1bGwzMCI6IjIwNTcyIiwiZ2l2ZTMwIjoiNjE3MSIsImxlZnQzMCI6IjE0NDAxIiwiZnVsbDUwIjoiMzYiLCJnaXZlNTAiOiIxOCIsImxlZnQ1MCI6IjE4IiwiZnVsbDcwIjoiMCIsImdpdmU3MCI6IjAiLCJsZWZ0NzAiOiIwIiwiZnVsbDEwMCI6IjAifV0=","positionsExternalLastCalculatedHeight":"W3sidG9rZW5JZCI6IjEiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZNVEl6TkRVMk9UWXdNRG94TWpReU16UTFOakF3T2pFek1BPT0iLCJsYXN0Q2FsY3VsYXRlZEhlaWdodCI6IjExMzAifSx7InRva2VuSWQiOiIxIiwiaW5jZW50aXZlSWQiOiJaekZzYlhaeWNuSnlOR1Z5TW5Wek9EUm9NamN6TW5OeWRUYzJZemw2YkRKdWRtdHVhR0U0WXpwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZaMjV2TG14aGJtUXZjaTl2Ym1Kc2IyTXZjWFY0T2pFd01EcG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OXhkWGc2TVRJek5EVTJPVFl3TURveE1qVXdNVEl4TmpBd09qRXpNQT09IiwibGFzdENhbGN1bGF0ZWRIZWlnaHQiOiIxMTMwIn0seyJ0b2tlbklkIjoiMiIsImluY2VudGl2ZUlkIjoiWnpGc2JYWnljbkp5TkdWeU1uVnpPRFJvTWpjek1uTnlkVGMyWXpsNmJESnVkbXR1YUdFNFl6cG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2WjI1dkxteGhibVF2Y2k5dmJtSnNiMk12Y1hWNE9qRXdNRHBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNk1USXpORFUyT1RZd01Eb3hNalF5TXpRMU5qQXdPakV6TUE9PSIsImxhc3RDYWxjdWxhdGVkSGVpZ2h0IjoiMTEzMCJ9LHsidG9rZW5JZCI6IjIiLCJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5eGRYZzZNVEl6TkRVMk9UWXdNRG94TWpVd01USXhOakF3T2pFek1BPT0iLCJsYXN0Q2FsY3VsYXRlZEhlaWdodCI6IjExMzAifV0=","externalLastCalculatedTimestamp":"W3siaW5jZW50aXZlSWQiOiJaekZzYlhaeWNuSnlOR1Z5TW5Wek9EUm9NamN6TW5OeWRUYzJZemw2YkRKdWRtdHVhR0U0WXpwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5aVlYSTZaMjV2TG14aGJtUXZjaTl2Ym1Kc2IyTXZjWFY0T2pFd01EcG5ibTh1YkdGdVpDOXlMMjl1WW14dll5OWlZWEk2TVRJek5EVTJPVFl3TURveE1qUXlNelExTmpBd09qRXpNQT09IiwibGFzdENhbGN1bGF0ZWRUaW1lc3RhbXAiOiIxMjM0NTY5OTA0In0seyJpbmNlbnRpdmVJZCI6Ilp6RnNiWFp5Y25KeU5HVnlNblZ6T0RSb01qY3pNbk55ZFRjMll6bDZiREp1ZG10dWFHRTRZenBuYm04dWJHRnVaQzl5TDI5dVlteHZZeTlpWVhJNloyNXZMbXhoYm1RdmNpOXZibUpzYjJNdmNYVjRPakV3TURwbmJtOHViR0Z1WkM5eUwyOXVZbXh2WXk5eGRYZzZNVEl6TkRVMk9UWXdNRG94TWpVd01USXhOakF3T2pFek1BPT0iLCJsYXN0Q2FsY3VsYXRlZFRpbWVzdGFtcCI6IjEyMzQ1Njk5MDQifV0="}`)
}
