package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/r/gnoswap/v2/consts"

	en "gno.land/r/gnoswap/v2/emission"
	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gnft"
	"gno.land/r/gnoswap/v2/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func init() {
	// init pool tiers
	// tier 1
	delete(poolTiers, MUST_EXISTS_IN_TIER_1)

	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100"] = InternalTier{
		tier:           1,
		startTimestamp: time.Now().Unix(),
	}

	std.TestSkipHeights(1)

	// override warm-up period for testing
	warmUp[100] = 901 // 30m ~
	warmUp[70] = 301  // 10m ~ 30m
	warmUp[50] = 151  // 5m ~ 10m
	warmUp[30] = 1    // ~ 5m
}

func TestDoulbeMint(t *testing.T) {
	en.MintAndDistributeGns()
	en.MintAndDistributeGns()

	std.TestSkipHeights(1)
}

func TestPoolInitCreatePool(t *testing.T) {

	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

	pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
	pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

	std.TestSkipHeights(1)
}

func TestMintBarQux100_1(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"50",         // amount0Desired
		"50",         // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa.String(),
	)
	std.TestSkipHeights(1)
}

func TestMintBarQux100_2(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"300",        // amount0Desired
		"300",        // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa.String(),
	)
	std.TestSkipHeights(1)
}

func TestStakeToken_1(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
	StakeToken(1)

	gpi := GetPrintInfo()
	shouldEQ(t, gpi, `{"height":128,"time":1234567900,"gns":{"staker":0,"devOps":14269405,"communityPool":3567350,"xGNS":0,"protocolFee":253510274,"GnoswapAdmin":99999800000000},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":0,"position":[{"lpTokenId":1,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":0,"fullAmount":0,"ratio":0,"warmUpAmount":0,"full30":0,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0}]}]}`)

	std.TestSkipHeights(1)
}

// START, STAKE 1 TOKEN => GETTER TEST

func TestGetPoolGns(t *testing.T) {
	println(poolGns) // map{("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100" string):(0 uint64)}

	jsonStr := GetPoolGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"0"}]`)
}

func TestGetPoolCurrentBlockGns(t *testing.T) {
	println(poolCurrentBlockGns) // map{}

	jsonStr := GetPoolCurrentBlockGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolLastTmpGns(t *testing.T) {
	println(poolLastTmpGns) // map{("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100" string):(0 uint64)}

	jsonStr := GetPoolLastTmpGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"0"}]`)
}

func TestGetPoolAccuGns(t *testing.T) {
	println(poolAccuGns) // map{("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100" string):(53510274 uint64)}

	jsonStr := GetPoolAccuGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"53510274"}]`)
}

func TestGetPositionGns(t *testing.T) {
	println(positionGns) // map{}

	jsonStr := GetPositionGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPositionLastGns(t *testing.T) {
	println(positionLastGns) // map{}

	jsonStr := GetPositionLastGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPositionLastExternal(t *testing.T) {
	println(positionLastExternal) // map{}

	jsonStr := GetPositionLastExternal()
	shouldEQ(t, jsonStr, ``)
}

func TestGetExternalLastCalculatedTimestamp(t *testing.T) {
	println(externalLastCalculatedTimestamp) // map{}

	jsonStr := GetExternalLastCalculatedTimestamp()
	shouldEQ(t, jsonStr, ``)
}

func TestGetExternalGns(t *testing.T) {
	println(externalGns) // map{}

	jsonStr := GetExternalGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolTotalStakedLiquidity(t *testing.T) {
	println(poolTotalStakedLiquidity) // map{}

	jsonStr := GetPoolTotalStakedLiquidity()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPositionsLiquidityRatio(t *testing.T) {
	println(positionsLiquidityRatio) // map{}

	jsonStr := GetPositionsLiquidityRatio()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolsPositions(t *testing.T) {
	println(poolsPositions) // map{}

	jsonStr := GetPoolsPositions()
	shouldEQ(t, jsonStr, ``)
}

// END, STAKE 1 TOKEN => GETTER TEST

func TestStakeToken_2(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(GetOrigPkgAddr()), tid(2))
	StakeToken(2)

	gpi := GetPrintInfo()
	shouldEQ(t, gpi, `{"height":129,"time":1234567902,"gns":{"staker":10702055,"devOps":17123286,"communityPool":4280820,"xGNS":0,"protocolFee":253510274,"GnoswapAdmin":99999800000000},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":10702055,"position":[{"lpTokenId":1,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":1,"fullAmount":10702055,"ratio":30,"warmUpAmount":3210616,"full30":10702055,"give30":3210616,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0},{"lpTokenId":2,"stakedHeight":129,"stakedTimestamp":1234567902,"stakedDuration":0,"fullAmount":0,"ratio":0,"warmUpAmount":0,"full30":0,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0}]}]}`)

	std.TestSkipHeights(1)
}

// START, STAKE 1 + 2 TOKEN => GETTER TEST

func TestGetPoolGns2(t *testing.T) {
	println(poolGns) // map{("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100" string):(10702055 uint64)}

	jsonStr := GetPoolGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"10702055"}]`)
}

func TestGetPoolCurrentBlockGns2(t *testing.T) {
	println(poolCurrentBlockGns) // map{}

	jsonStr := GetPoolCurrentBlockGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolLastTmpGns2(t *testing.T) {
	println(poolLastTmpGns) // map{("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100" string):(0 uint64)}

	jsonStr := GetPoolLastTmpGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"0"}]`)
}

func TestGetPoolAccuGns2(t *testing.T) {
	println(poolAccuGns) // map{("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100" string):(64212329 uint64)}

	jsonStr := GetPoolAccuGns()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","gnsAmount":"64212329"}]`)
}

func TestGetPositionGns2(t *testing.T) {
	println(positionGns) // map{(1 uint64):(10702055 uint64)}

	jsonStr := GetPositionGns()
	shouldEQ(t, jsonStr, `[{"tokenId":"1","gnsAmount":"10702055"}]`)
}

func TestGetPositionLastGns2(t *testing.T) {
	println(positionLastGns) // map{(1 uint64):(0 uint64)}

	jsonStr := GetPositionLastGns()
	shouldEQ(t, jsonStr, `[{"tokenId":"1","gnsAmount":"0"}]`)
}

func TestGetPositionLastExternal2(t *testing.T) {
	println(positionLastExternal) // map{}

	jsonStr := GetPositionLastExternal()
	shouldEQ(t, jsonStr, ``)
}

func TestGetExternalLastCalculatedTimestamp2(t *testing.T) {
	println(externalLastCalculatedTimestamp) // map{}

	jsonStr := GetExternalLastCalculatedTimestamp()
	shouldEQ(t, jsonStr, ``)
}

func TestGetExternalGns2(t *testing.T) {
	println(externalGns) // map{}

	jsonStr := GetExternalGns()
	shouldEQ(t, jsonStr, ``)
}

func TestGetPoolTotalStakedLiquidity2(t *testing.T) {
	println(poolTotalStakedLiquidity) // map{("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100" string):(&(struct{(array[(1025 uint64),(0 uint64),(0 uint64),(0 uint64)] [4]uint64)} gno.land/p/gnoswap/uint256.Uint) *gno.land/p/gnoswap/uint256.Uint)}

	jsonStr := GetPoolTotalStakedLiquidity()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","totalStakedLiquidity":"1025"}]`)
}

func TestGetPositionsLiquidityRatio2(t *testing.T) {
	println(positionsLiquidityRatio) // map{(1 uint64):(&(struct{(array[(0 uint64),(4294967296 uint64),(0 uint64),(0 uint64)] [4]uint64)} gno.land/p/gnoswap/uint256.Uint) *gno.land/p/gnoswap/uint256.Uint)}

	jsonStr := GetPositionsLiquidityRatio()
	shouldEQ(t, jsonStr, `[{"tokenId":"1","positionRatio":"79228162514264337593543950336"}]`)
}

func TestGetPoolsPositions2(t *testing.T) {
	println(poolsPositions) // map{("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100" string):(slice[(1 uint64)] []uint64)}

	jsonStr := GetPoolsPositions()
	shouldEQ(t, jsonStr, `[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","tokenIds":["1"]}]`)
}

// END, STAKE 1 + 2 TOKEN => GETTER TEST

// START, ETC GETTER TEST
func TestGetHeight(t *testing.T) {
	println(GetHeight()) // 130

	res := GetHeight()
	shouldEQ(t, res, int64(130))
}

func TestGetTimeNowUnix(t *testing.T) {
	println(GetTimeNowUnix()) // 1234567904

	res := GetTimeNowUnix()
	shouldEQ(t, res, int64(1234567904))
}

func TestGetExternalGnsAmount(t *testing.T) {
	println(GetExternalGnsAmount()) // 0

	res := GetExternalGnsAmount()
	shouldEQ(t, res, uint64(0))
}

func TestGetStakerGnsBalance(t *testing.T) {
	println(GetStakerGnsBalance()) // 21404110

	res := GetStakerGnsBalance()
	shouldEQ(t, res, uint64(21404110))
}

func TestGetStakerEmissionGnsBalance(t *testing.T) {
	println(GetStakerEmissionGnsBalance()) // 21404110

	res := GetStakerEmissionGnsBalance()
	shouldEQ(t, res, uint64(21404110))
}

func TestGetLastCalculatedBalance(t *testing.T) {
	println(GetLastCalculatedBalance()) // 10702055

	res := GetLastCalculatedBalance()
	shouldEQ(t, res, uint64(10702055))
}

func TestGetLastCalculatedHeight(t *testing.T) {
	println(GetLastCalculatedHeight()) // 129

	res := GetLastCalculatedHeight()
	shouldEQ(t, res, int64(129))
}

func TestGetMintedGnsAmount(t *testing.T) {
	println(GetMintedGnsAmount()) // 10702055

	res := GetMintedGnsAmount()
	shouldEQ(t, res, uint64(10702055))
}

func TestGetNumPoolTiers(t *testing.T) {
	println(GetNumPoolTiers()) // 1*STAKER*0*STAKER*0

	res := GetNumPoolTiers()
	shouldEQ(t, res, `1*STAKER*0*STAKER*0`)
}

func TestGetTiersRatio(t *testing.T) {
	println(GetTiersRatio()) // 100*STAKER*0*STAKER*0

	res := GetTiersRatio()
	shouldEQ(t, res, `100*STAKER*0*STAKER*0`)
}

func TestGetWarmUpPeriods(t *testing.T) {
	println(GetWarmUpPeriods()) // 1*STAKER*151*STAKER*301*STAKER*901

	res := GetWarmUpPeriods()
	shouldEQ(t, res, `1*STAKER*151*STAKER*301*STAKER*901`)
}

func TestGetGetPositionsInternalWarmUpAmount(t *testing.T) {
	println(GetPositionsInternalWarmUpAmount())

	res := GetPositionsInternalWarmUpAmount()
	shouldEQ(t, res, `[{"tokenId":"1","full30":"10702055","give30":"3210616","left30":"7491439","full50":"0","give50":"0","left50":"0","full70":"0","give70":"0","left70":"0","full100":"0"},{"tokenId":"2","full30":"0","give30":"0","left30":"0","full50":"0","give50":"0","left50":"0","full70":"0","give70":"0","left70":"0","full100":"0"}]`)
}

// CREATE EXTERNAL INCENTIVE
func TestCreateExternalIncentive_90_180(t *testing.T) {
	{
		std.TestSetOrigCaller(gsa)
		std.TestSetRealm(gsaRealm)

		bar.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
			barPath,     // rewardToken string, // token path should be registered
			"900000000", // _rewardAmount string,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)
	}

	{
		std.TestSetOrigCaller(gsa)
		std.TestSetRealm(gsaRealm)

		qux.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
			quxPath,      // rewardToken string, // token path should be registered
			"1230000000", // _rewardAmount string,
			1234569600,
			1234569600+TIMESTAMP_180DAYS,
		)
	}
}

func TestGetPositionsExternalWarmUpAmount(t *testing.T) {
	std.TestSkipHeights(1000)

	en.MintAndDistributeGns()
	CalcPoolPosition() // trigger this to update externalGns

	println(GetPositionsExternalWarmUpAmount())

	res := GetPositionsExternalWarmUpAmount()
	shouldEQ(t, res, `[{"tokenId":"1","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","full30":"4959","give30":"1487","left30":"3472","full50":"66","give50":"33","left50":"33","full70":"0","give70":"0","left70":"0","full100":"0"},{"tokenId":"1","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","full30":"3428","give30":"1028","left30":"2400","full50":"6","give50":"3","left50":"3","full70":"0","give70":"0","left70":"0","full100":"0"},{"tokenId":"2","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","full30":"29762","give30":"8928","left30":"20834","full50":"396","give50":"198","left50":"198","full70":"0","give70":"0","left70":"0","full100":"0"},{"tokenId":"2","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","full30":"20572","give30":"6171","left30":"14401","full50":"36","give50":"18","left50":"18","full70":"0","give70":"0","left70":"0","full100":"0"}]`)
}

func TestGetPositionsExternalLastCalculatedHeight(t *testing.T) {
	println(GetPositionsExternalLastCalculatedHeight())

	res := GetPositionsExternalLastCalculatedHeight()
	shouldEQ(t, res, `[{"tokenId":"1","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","lastCalculatedHeight":"1130"},{"tokenId":"1","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","lastCalculatedHeight":"1130"},{"tokenId":"2","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","lastCalculatedHeight":"1130"},{"tokenId":"2","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","lastCalculatedHeight":"1130"}]`)
}

func TestGetExternalLastCalculatedTimestamp3(t *testing.T) {
	println(GetExternalLastCalculatedTimestamp())

	jsonStr := GetExternalLastCalculatedTimestamp()
	shouldEQ(t, jsonStr, `[{"incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9iYXI6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMA==","lastCalculatedTimestamp":"1234569904"},{"incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjEwMDpnbm8ubGFuZC9yL29uYmxvYy9xdXg6MTIzNDU2OTYwMDoxMjUwMTIxNjAwOjEzMA==","lastCalculatedTimestamp":"1234569904"}]`)
}

func TestGetNecessary(t *testing.T) {
	println(GetNecessary())
}
