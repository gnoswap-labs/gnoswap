package staker

import (
	"std"
	"testing"
	"time"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v2/gnft"

	"gno.land/r/gnoswap/v2/consts"
)

func init() {
	// set pool create fee to 0 for testing
	std.TestSetRealm(gsaRealm)
	pl.SetPoolCreationFee(0)
}

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500"] = InternalTier{
		tier:           1,
		startTimestamp: time.Now().Unix(),
	}
}

func TestPoolCreatePool(t *testing.T) {
	shouldEQ(t, gns.TotalSupply(), uint64(100000000000000))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(0))

	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	std.TestSkipHeights(1)

	pl.CreatePool(consts.WUGNOT_PATH, consts.GNS_PATH, 3000, "79228162514264337593543950336") // tick 0 ≈ x1
	pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006")                    // tick 10_000 ≈ x2.7
	std.TestSkipHeights(2)

	shouldEQ(t, gns.TotalSupply(), uint64(100000014269406))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(10702054))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(2853881))
}

func TestPositionMintPos01Tier01(t *testing.T) {
	// mint position in tier 1 pool
	// gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000

	std.TestSetRealm(gsaRealm)
	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		"gno.land/r/gnoswap/v2/gns", // token0
		"gno.land/r/demo/wugnot",    // token1
		fee3000,                     // fee
		int32(1020),                 // tickLower
		int32(5040),                 // tickUpper
		"1000",                      // amount0Desired
		"1000",                      // amount1Desired
		"0",                         // amount0Min
		"0",                         // amount1Min
		max_timeout,
		gsa,
		gsa,
	)
	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, uint64(1))
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), gsa)
	shouldEQ(t, amount0, "0")
	shouldEQ(t, amount1, "1000")

	// approve nft to staker for staking
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100000071347030))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(53510272))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(14269406))
}

func TestPositionMintPos02Tier01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee500,       // fee
		int32(9000),  // tickLower
		int32(11000), // tickUpper
		"1000",       // amount0Desired
		"1000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa,
		gsa,
	)

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, uint64(2))
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), gsa)
	shouldEQ(t, amount0, "368")
	shouldEQ(t, amount1, "1000")

	// approve nft to staker for staking
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100000128424654))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(96318490))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(25684931))
}

func TestPositionMintPos03Tier01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee500,       // fee
		int32(9100),  // tickLower
		int32(12000), // tickUpper
		"5000",       // amount0Desired
		"5000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa,
		gsa,
	)

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, uint64(3))
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), gsa)
	shouldEQ(t, amount0, "3979")
	shouldEQ(t, amount1, "5000")

	// approve nft to staker
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100000185502278))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(139126708))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(37100456))
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)

	gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

	AddToken(oblPath)
	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500", // targetPoolPath
		oblPath,                     // rewardToken
		"1000000000",                // rewardAmount
		1234569600,                  // startTimestamp
		1234569600+TIMESTAMP_90DAYS, // endTimestamp
	)

	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)
	CreateExternalIncentive("gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500", oblPath, "1000000000", 1234569600, 1234569600+TIMESTAMP_90DAYS)
}

func TestStakeToken01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(1) // GNFT tokenId

	std.TestSkipHeights(500)

	shouldEQ(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 1)

	shouldEQ(t, gns.TotalSupply(), uint64(100000214041090))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(2))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(2000000001))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(42808218))
}

func TestStakeToken02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(2) // GNFT tokenId

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 2)

	shouldEQ(t, gns.TotalSupply(), uint64(100007348744090))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(2000000002))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(1469748818))
}

func TestStakeToken03(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(3) // GNFT tokenId

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(3)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 3)

	shouldEQ(t, gns.TotalSupply(), uint64(100007363013496))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(2005351030))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(1472602699))
}

func TestSameHeightCalculation(t *testing.T) {
	CalcPoolPosition()
	CalcPoolPosition()
}

func TestCollectReward01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	CollectReward(1, false)
	std.TestSkipHeights(1)

	shouldEQ(t, poolGns["gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000"], uint64(0))
	shouldEQ(t, positionGns[1], uint64(0))
}

func TestUnstakeToken01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	UnstakeToken(1, false)
	std.TestSkipHeights(1)

	shouldEQ(t, len(deposits), 2)

	shouldEQ(t, gns.TotalSupply(), uint64(100007391552308))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(2016053085))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(1478310461))

	shouldEQ(t, poolGns["gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000"], uint64(0))
	shouldEQ(t, positionGns[1], uint64(0))
}

func TestUnstakeToken02(t *testing.T) {
	shouldEQ(t, poolGns["gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000"], uint64(0))
	shouldEQ(t, positionGns[1], uint64(0))

	shouldEQ(t, poolGns["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500"], uint64(16053082))
	shouldEQ(t, positionGns[2], uint64(6986943))
	shouldEQ(t, positionGns[3], uint64(9066138))

	std.TestSetRealm(gsaRealm)
	UnstakeToken(2, false)
	std.TestSkipHeights(1)

	shouldEQ(t, len(deposits), 1)

	shouldEQ(t, poolGns["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500"], uint64(13599208))
	shouldEQ(t, positionGns[2], uint64(0))
	shouldEQ(t, positionGns[3], uint64(13599207))

	shouldEQ(t, gns.TotalSupply(), uint64(100007405821714))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(2013599212))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(1481164342))
}

func TestCollectReward02(t *testing.T) {
	shouldPanicWithMsg(
		t,
		func() {
			CollectReward(2, false)
		},
		"[STAKER] staker.gno__CollectReward() || tokenId(2) not staked",
	)
}
