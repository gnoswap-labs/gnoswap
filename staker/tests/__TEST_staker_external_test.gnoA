package staker

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v2/gnft"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)
	std.TestSkipHeights(1)

	pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006") // internal, tier 1 // tick 10_000 â‰ˆ x2.7

	pl.CreatePool(barPath, bazPath, 100, "79228162514264337593543950337") // will be external

	std.TestSkipHeights(3)
}

func TestMintBarQux500_1(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee500,       // fee
		int32(9000),  // tickLower
		int32(11000), // tickUpper
		"100000",     // amount0Desired
		"100000",     // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa.String(),
	)
	std.TestSkipHeights(1)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, gnft.OwnerOf(tid(tokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "36790")
	shouldEQ(t, amount1, "100000")
}

func TestMintBarBaz100_2(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		bazPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"100000",     // amount0Desired
		"100000",     // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa.String(),
	)
	std.TestSkipHeights(1)

	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, gnft.OwnerOf(tid(tokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "100000")
	shouldEQ(t, amount1, "100000")
}

func TestMintBarBaz100_3(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		bazPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"100000",     // amount0Desired
		"100000",     // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa.String(),
	)
	std.TestSkipHeights(1)

	shouldEQ(t, tokenId, uint64(3))
	shouldEQ(t, gnft.OwnerOf(tid(tokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "100000")
	shouldEQ(t, amount1, "100000")
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	obl.Approve(a2u(consts.STAKER_ADDR), uint64(100_000_000))
	std.TestSkipHeights(1)

	AddToken(oblPath)
	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:100", // targetPoolPath
		"gno.land/r/onbloc/obl",                           // rewardToken
		"100000000",                                       // rewardAmount
		1234569600,                                        // startTimestamp
		1234569600+TIMESTAMP_90DAYS,                       // endTimestamp
	)

	std.TestSkipHeights(1)
}

func TestStakeExternal_2(t *testing.T) {
	std.TestSkipHeights(900) // active

	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(2))
	StakeToken(2)

	std.TestSkipHeights(2)

	shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr())
	shouldEQ(t, len(deposits), 1)
}

func TestStakeExternal_3(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(3))
	StakeToken(3)

	std.TestSkipHeights(2)

	shouldEQ(t, gnft.OwnerOf(tid(3)), GetOrigPkgAddr())
	shouldEQ(t, len(deposits), 2)
}

func TestCollectExternalReward_2(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	// before claim
	oblOld := obl.BalanceOf(a2u(gsa))
	shouldEQ(t, oblOld, uint64(99999900000000))

	std.TestSkipHeights(777601) // 45 days + 1 block
	CollectReward(2, false)

	std.TestSkipHeights(1)

	oblNew := obl.BalanceOf(a2u(gsa))
	shouldEQ(t, oblNew-oblOld, uint64(9895486))
}

func TestCollectExternalReward_3(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	// before claim
	oblOld := obl.BalanceOf(a2u(gsa))
	shouldEQ(t, oblOld, uint64(99999909895486))

	std.TestSkipHeights(1)
	CollectReward(3, false)

	std.TestSkipHeights(1)

	oblNew := obl.BalanceOf(a2u(gsa))
	shouldEQ(t, oblNew-oblOld, uint64(9895478))
}
