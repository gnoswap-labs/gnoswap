// external incentive + warm up period testing
// with two external incentives for same pool
// bar + gns

package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/consts"

	en "gno.land/r/gnoswap/v2/emission"
	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gnft"
	"gno.land/r/gnoswap/v2/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func TestShortWarmUpTwoExternalIncentive_OneOfThemIsGNS(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testMintBarQux100_1(t)
	testCreateExternalIncentiveBar(t)
	testCreateExternalIncentiveGns(t)
	testStakeToken_1(t)
	testBeforeActive(t)
	testAfterActive(t)
	testDuratino200(t)
	testCollectReward(t)
}

func testInit(t *testing.T) {
	t.Run("initialize", func(t *testing.T) {
		// override warm-up period for testing
		warmUp[100] = 901 // 30m ~
		warmUp[70] = 301  // 10m ~ 30m
		warmUp[50] = 151  // 5m ~ 10m
		warmUp[30] = 1    // ~ 5m
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

		pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
		pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

		std.TestSkipHeights(1)
	})
}

func testMintBarQux100_1(t *testing.T) {
	t.Run("mint bar qux 100", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

		tokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee100,       // fee
			int32(-1000), // tickLower
			int32(1000),  // tickUpper
			"50",         // amount0Desired
			"50",         // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			admin,
			admin,
		)

		uassert.Equal(t, tokenId, uint64(1))
		uassert.Equal(t, gnft.OwnerOf(tid(tokenId)), admin)

		std.TestSkipHeights(1)
	})
}

func testCreateExternalIncentiveBar(t *testing.T) {
	t.Run("create external incentive bar", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		bar.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
			barPath,    // rewardToken string, // token path should be registered
			"20000000", // _rewardAmount string,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)

		// after
		printExternalInfo()

		std.TestSkipHeights(1)
	})
}

func testCreateExternalIncentiveGns(t *testing.T) {
	t.Run("create external incentive gns", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX) // this includes depositGnsAmount

		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
			consts.GNS_PATH, // rewardToken string, // token path should be registered
			"20000000",      // _rewardAmount string,
			1234569600,
			1234569600+TIMESTAMP_90DAYS,
		)

		// after
		printExternalInfo()

		std.TestSkipHeights(1)
	})
}

func testStakeToken_1(t *testing.T) {
	t.Run("stake token 1", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
		StakeToken(1)

		std.TestSkipHeights(1)
	})
}

func testBeforeActive(t *testing.T) {
	t.Run("before active", func(t *testing.T) {
		en.MintAndDistributeGns()
		if consts.EMISSION_REFACTORED {
			CalcPoolPositionRefactor()
		} else {
			CalcPoolPosition()
		}
		printExternalInfo()

		std.TestSkipHeights(1)
	})
}

func testAfterActive(t *testing.T) {
	t.Run("after active", func(t *testing.T) {
		std.TestSkipHeights(849) // in active
		std.TestSkipHeights(1)   // active // but no block passed since active
		std.TestSkipHeights(50)  // skip 50 more block

		en.MintAndDistributeGns()
		if consts.EMISSION_REFACTORED {
			CalcPoolPositionRefactor()
		} else {
			CalcPoolPosition()
		}

		std.TestSkipHeights(1)
	})
}

func testDuratino200(t *testing.T) {
	t.Run("duration 200", func(t *testing.T) {
		std.TestSkipHeights(199) // skip 1 + 199 = 200 more block
		en.MintAndDistributeGns()
		if consts.EMISSION_REFACTORED {
			CalcPoolPositionRefactor()
		} else {
			CalcPoolPosition()
		}
		printExternalInfo()
	})
}

func testCollectReward(t *testing.T) {
	t.Run("collect reward", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		oldBar := bar.BalanceOf(a2u(admin))
		oldGns := gns.BalanceOf(a2u(admin))

		CollectReward(1, false)

		newBar := bar.BalanceOf(a2u(admin))
		newGns := gns.BalanceOf(a2u(admin))

		uassert.Equal(t, newBar-oldBar, uint64(485))
		uassert.Equal(t, newGns-oldGns, uint64(485))

		uassert.True(t, newBar > oldBar)
		uassert.True(t, newGns > oldGns)
	})
}
