// User 'A' mints NFT
// User 'A' stakes NFT
// User 'A' can not transfer NFT to 'B'
// user 'A' can collect reward

package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gnft"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func TestNftTransfer01(t *testing.T) {
	testInit(t)
	testPoolCreatePool(t)
	testPositionMint01(t)
	testStakeToken01(t)
	testTransferNft(t)
	testCollectReward01(t)
}

func testInit(t *testing.T) {
	t.Run("initial", func(t *testing.T) {
		// set pool create fee to 0 for testing
		std.TestSetRealm(adminRealm)
		pl.SetPoolCreationFeeByAdmin(0)

		// init pool tiers
		// tier 1
		poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500"] = InternalTier{
			tier:           1,
			startTimestamp: time.Now().Unix(),
		}
	})
}

func testPoolCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006") // tick 10_000 â‰ˆ x2.7
		std.TestSkipHeights(1)
	})
}

func testPositionMint01(t *testing.T) {
	t.Run("mint position 01, bar:qux:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			uint32(500),  // fee
			int32(9000),  // tickLower
			int32(11000), // tickUpper
			"1000",       // amount0Desired
			"1000",       // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,  // deadline
			admin,
			admin,
		)

		std.TestSkipHeights(1)

		uassert.Equal(t, lpTokenId, uint64(1))
		uassert.Equal(t, gnft.OwnerOf(tid(lpTokenId)), admin)
		uassert.Equal(t, amount0, "368")
		uassert.Equal(t, amount1, "1000")
	})
}

func testStakeToken01(t *testing.T) {
	t.Run("stake position 01, bar:qux:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		// approve nft to staker
		gnft.Approve(a2u(consts.STAKER_ADDR), tid(uint64(1)))
		std.TestSkipHeights(1)

		StakeToken(1) // GNFT tokenId

		std.TestSkipHeights(1)

		uassert.Equal(t, gnft.OwnerOf(tid(1)), consts.STAKER_ADDR)
		uassert.Equal(t, len(deposits), 1)
	})
}

func testTransferNft(t *testing.T) {
	t.Run("transfer nft", func(t *testing.T) {
		dummyAddr := testutils.TestAddress("dummy")

		t.Run("caller is not a owner (caller is same as spender)", func(t *testing.T) {
			uassert.PanicsWithMessage(
				t,
				`caller is not token owner or approved`,
				func() {
					std.TestSetRealm(adminRealm)
					gnft.TransferFrom(a2u(admin), a2u(dummyAddr), tid(uint64(1)))
				},
			)
		})

		t.Run("caller is not a owner (caller is different from spender)", func(t *testing.T) {
			uassert.PanicsWithMessage(
				t,
				`caller is not token owner or approved`,
				func() {
					std.TestSetRealm(adminRealm)
					gnft.TransferFrom(a2u(consts.STAKER_ADDR), a2u(dummyAddr), tid(uint64(1)))
				},
			)
		})

		gnft.TransferFrom(a2u(consts.STAKER_ADDR), a2u(dummyAddr), tid(uint64(1)))
	})
}

func testCollectReward01(t *testing.T) {
	t.Run("collect reward", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		uassert.NotPanics(
			t,
			func() {
				CollectReward(1, false)
			},
			`should not panic`,
		)
	})
}
