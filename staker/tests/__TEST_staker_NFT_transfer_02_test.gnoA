// User 'A' mints and stake NFT (with one click staking)
// user 'A' can collect reward

package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func TestNftTransfer02(t *testing.T) {
	testInit(t)
	testPoolCreatePool(t)
	testStakerMintAndStake(t)
	testCollectReward01(t)
}

func testInit(t *testing.T) {
	t.Run("initial", func(t *testing.T) {
		// set pool create fee to 0 for testing
		std.TestSetRealm(adminRealm)
		pl.SetPoolCreationFeeByAdmin(0)

		// init pool tiers
		// tier 1
		poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500"] = InternalTier{
			tier:           1,
			startTimestamp: time.Now().Unix(),
		}
	})
}

func testPoolCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006") // tick 10_000 â‰ˆ x2.7
		std.TestSkipHeights(1)
	})
}

func testStakerMintAndStake(t *testing.T) {
	t.Run("mint and stake", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(2)

		MintAndStake(
			barPath, // token0
			quxPath, // token1
			500,     // fee
			9000,    // tickLower
			11000,   // tickUpper
			"1000",  // amount0Desired
			"1000",  // amount1Desired
			"1",     // amount0Min
			"1",     // amount1Min
			max_timeout,
		)
	})
}

func testCollectReward01(t *testing.T) {
	t.Run("collect reward", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		uassert.NotPanics(
			t,
			func() {
				CollectReward(1, false)
			},
			`should not panic`,
		)
	})
}
