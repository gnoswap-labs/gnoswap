package staker

import (
	"std"
	"testing"
	"time"

	pl "gno.land/r/gnoswap/pool"
	pn "gno.land/r/gnoswap/position"

	"gno.land/r/gnoswap/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/consts"
	"gno.land/r/gnoswap/gnft"

	"gno.land/p/demo/testutils"
)

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"] = InternalTier{
		tier:           1,
		startTimestamp: time.Now().Unix(),
		startHeight:    std.GetHeight(),
		updateHeight:   std.GetHeight(),
	}

	// tier 2
	poolTiers["gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500"] = InternalTier{
		tier:           2,
		startTimestamp: time.Now().Unix(),
		startHeight:    std.GetHeight(),
		updateHeight:   std.GetHeight(),
	}

	// set pool create fee to 0 for testing
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)
	pl.SetPoolCreationFee(0)
}

func TestPoolCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	std.TestSkipHeights(1)

	pl.CreatePool(fooPath, barPath, uint32(500), "130621891405341611593710811006") // tick 10_000 ≈ x2.7

	pl.CreatePool(bazPath, quxPath, uint32(500), "130621891405341611593710811006") // tick 10_000 ≈ x2.7

	std.TestSkipHeights(1)
}

func TestPositionMintFooBar01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		fooPath,      // token0
		barPath,      // token1
		uint32(500),  // fee
		int32(9000),  // tickLower
		int32(11000), // tickUpper
		"1000",       // amount0Desired
		"1000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 1)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "1000")
	shouldEQ(t, amount1, "368")

	// approve nft to staker for staking
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestPositionMintFooBar02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		fooPath,      // token0
		barPath,      // token1
		uint32(500),  // fee
		int32(9100),  // tickLower
		int32(12000), // tickUpper
		"5000",       // amount0Desired
		"5000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 2)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "5000")
	shouldEQ(t, amount1, "3979")

	// approve nft to staker
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestPositionMintBazQux01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		bazPath,      // token0
		quxPath,      // token1
		uint32(500),  // fee
		int32(9100),  // tickLower
		int32(12000), // tickUpper
		"5000",       // amount0Desired
		"5000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, 3)
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "3979")
	shouldEQ(t, amount1, "5000")

	// approve nft to staker
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	std.TestSkipHeights(1)

	AddToken(oblPath)
	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500", // targetPoolPath
		oblPath,                     // rewardToken
		"1000000000",                // rewardAmount
		1234569600,                  // startTimestamp
		1234569600+TIMESTAMP_90DAYS, // endTimestamp
	)

	std.TestSkipHeights(1)

	obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
	std.TestSkipHeights(1)
	CreateExternalIncentive("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500", oblPath, "100000000", 1234569600, 1234569600+TIMESTAMP_90DAYS)
	std.TestSkipHeights(1)
}

func TestStakeToken01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(1) // GNFT tokenId

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 1)
}

func TestStakeToken02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(2) // GNFT tokenId

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 2)
}

func TestStakeToken03(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(3) // GNFT tokenId

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(3)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 3)
}

/*
RPC_API_INCENTIVE
*/
func TestApiGetRewardTokens(t *testing.T) {
	grt := ApiGetRewardTokens()
	res := `{"stat":{"height":144,"timestamp":1234567932},"response":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","tokens":["gno.land/r/gnoswap/gns","gno.land/r/onbloc/obl"]},{"poolPath":"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500","tokens":["gno.land/r/gnoswap/gns"]}]}`

	shouldEQ(t, grt, res)
}

func TestApiGetRewardTokensByPoolPath(t *testing.T) {
	grt := ApiGetRewardTokensByPoolPath("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	res := `{"stat":{"height":144,"timestamp":1234567932},"response":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","tokens":["gno.land/r/gnoswap/gns","gno.land/r/onbloc/obl"]}]}`

	shouldEQ(t, grt, res)
}

func TestApiGetExternalIncentives(t *testing.T) {
	extIncen := ApiGetExternalIncentives()
	res := `{"stat":{"height":144,"timestamp":1234567932},"response":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardToken":"gno.land/r/onbloc/obl","rewardAmount":"1100000000","rewardLeft":"1100000000","startTimestamp":1234569600,"endTimestamp":1242345600,"active":false,"refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c"}]}`
	shouldEQ(t, extIncen, res)
}

func TestApiGetExternalIncentivesByPoolPath(t *testing.T) {
	extIncen := ApiGetExternalIncentivesByPoolPath("gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500")
	res := `{"stat":{"height":144,"timestamp":1234567932},"response":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardToken":"gno.land/r/onbloc/obl","rewardAmount":"1100000000","rewardLeft":"1100000000","startTimestamp":1234569600,"endTimestamp":1242345600,"active":false,"refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c"}]}`
	shouldEQ(t, extIncen, res)
}

func TestApiGetExternalIncentivesByRewardTokenPath(t *testing.T) {
	extIncen := ApiGetExternalIncentivesByRewardTokenPath("gno.land/r/onbloc/obl")
	res := `{"stat":{"height":144,"timestamp":1234567932},"response":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardToken":"gno.land/r/onbloc/obl","rewardAmount":"1100000000","rewardLeft":"1100000000","startTimestamp":1234569600,"endTimestamp":1242345600,"active":false,"refundee":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c"}]}`
	shouldEQ(t, extIncen, res)
}

func TestApiGetInternalIncentives(t *testing.T) {
	intIncen := ApiGetInternalIncentives()
	res := `{"stat":{"height":144,"timestamp":1234567932},"response":[{"poolPath":"gno.land/r/demo/wugnot:gno.land/r/gnoswap/gns:3000","rewardToken":"gno.land/r/gnoswap/gns","tier":1,"startTimestamp":1234567890,"rewardPerBlock":"3850","accuGns":33711471},{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardToken":"gno.land/r/gnoswap/gns","tier":1,"startTimestamp":1234567890,"rewardPerBlock":"3850","accuGns":33711471},{"poolPath":"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500","rewardToken":"gno.land/r/gnoswap/gns","tier":2,"startTimestamp":1234567890,"rewardPerBlock":"3300","accuGns":28895546}]}`
	shouldEQ(t, intIncen, res)
}

func TestApiGetInternalIncentivesByPoolPath(t *testing.T) {
	intIncen := ApiGetInternalIncentivesByPoolPath("gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500")
	res := `{"stat":{"height":144,"timestamp":1234567932},"response":[{"poolPath":"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500","rewardToken":"gno.land/r/gnoswap/gns","tier":2,"startTimestamp":1234567890,"rewardPerBlock":"3300","accuGns":28895546}]}`
	shouldEQ(t, intIncen, res)
}

func TestApiGetInternalIncentivesByTiers(t *testing.T) {
	intIncen := ApiGetInternalIncentivesByTiers(uint64(2))
	res := `{"stat":{"height":144,"timestamp":1234567932},"response":[{"poolPath":"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500","rewardToken":"gno.land/r/gnoswap/gns","tier":2,"startTimestamp":1234567890,"rewardPerBlock":"3300","accuGns":28895546}]}`
	shouldEQ(t, intIncen, res)
}

/*
RPC_API_INCENTIVE
*/
func TestApiGetRewards(t *testing.T) {
	std.TestSkipHeights(1000)
	CalcPoolPosition()

	rewards := ApiGetRewards()
	res := `{"stat":{"height":1144,"timestamp":1234569932},"response":[{"lpTokenId":1,"address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/gnoswap/gns","rewardTokenAmount":3502421,"stakeTimestamp":1234567926,"stakeHeight":141,"incentiveStart":1234567926},{"incentiveType":"EXTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/onbloc/obl","rewardTokenAmount":4564,"stakeTimestamp":1234567926,"stakeHeight":141,"incentiveStart":1234569600}]},{"lpTokenId":2,"address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/gnoswap/gns","rewardTokenAmount":6099000,"stakeTimestamp":1234567928,"stakeHeight":142,"incentiveStart":1234567928},{"incentiveType":"EXTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/onbloc/obl","rewardTokenAmount":25298,"stakeTimestamp":1234567928,"stakeHeight":142,"incentiveStart":1234569600}]},{"lpTokenId":3,"address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500","rewardTokenPath":"gno.land/r/gnoswap/gns","rewardTokenAmount":4111374,"stakeTimestamp":1234567930,"stakeHeight":143,"incentiveStart":1234567930}]}]}`
	shouldEQ(t, rewards, res)
}

func TestApiGetRewardsByLpTokenId(t *testing.T) {
	rewards := ApiGetRewardsByLpTokenId(uint64(1))
	res := `{"stat":{"height":1144,"timestamp":1234569932},"response":[{"lpTokenId":1,"address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/gnoswap/gns","rewardTokenAmount":3502421,"stakeTimestamp":1234567926,"stakeHeight":141,"incentiveStart":1234567926},{"incentiveType":"EXTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/onbloc/obl","rewardTokenAmount":4564,"stakeTimestamp":1234567926,"stakeHeight":141,"incentiveStart":1234569600}]}]}`
	shouldEQ(t, rewards, res)
}

func TestApiGetRewardsByAddress(t *testing.T) {
	rewards := ApiGetRewardsByAddress("g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c")
	res := `{"stat":{"height":1144,"timestamp":1234569932},"response":[{"lpTokenId":1,"address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/gnoswap/gns","rewardTokenAmount":3502421,"stakeTimestamp":1234567926,"stakeHeight":141,"incentiveStart":1234567926},{"incentiveType":"EXTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/onbloc/obl","rewardTokenAmount":4564,"stakeTimestamp":1234567926,"stakeHeight":141,"incentiveStart":1234569600}]},{"lpTokenId":2,"address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/gnoswap/gns","rewardTokenAmount":6099000,"stakeTimestamp":1234567928,"stakeHeight":142,"incentiveStart":1234567928},{"incentiveType":"EXTERNAL","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500","rewardTokenPath":"gno.land/r/onbloc/obl","rewardTokenAmount":25298,"stakeTimestamp":1234567928,"stakeHeight":142,"incentiveStart":1234569600}]},{"lpTokenId":3,"address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","rewards":[{"incentiveType":"INTERNAL","targetPoolPath":"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500","rewardTokenPath":"gno.land/r/gnoswap/gns","rewardTokenAmount":4111374,"stakeTimestamp":1234567930,"stakeHeight":143,"incentiveStart":1234567930}]}]}`
	shouldEQ(t, rewards, res)
}

func TestApiGetStakes(t *testing.T) {
	stakes := ApiGetStakes()
	res := `{"stat":{"height":1144,"timestamp":1234569932},"response":[{"tokenId":1,"owner":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","numberOfStakes":1,"stakeTimestamp":1234567926,"targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"},{"tokenId":2,"owner":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","numberOfStakes":1,"stakeTimestamp":1234567928,"targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"},{"tokenId":3,"owner":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","numberOfStakes":1,"stakeTimestamp":1234567930,"targetPoolPath":"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500"}]}`
	shouldEQ(t, stakes, res)
}

func TestApiGetStakesByLpTokenId(t *testing.T) {
	stakes := ApiGetStakesByLpTokenId(uint64(1))
	res := `{"stat":{"height":1144,"timestamp":1234569932},"response":[{"tokenId":1,"owner":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","numberOfStakes":1,"stakeTimestamp":1234567926,"targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"}]}`
	shouldEQ(t, stakes, res)
}

func TestApiGetStakesByAddress(t *testing.T) {
	stakes := ApiGetStakesByAddress("g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c")
	res := `{"stat":{"height":1144,"timestamp":1234569932},"response":[{"tokenId":1,"owner":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","numberOfStakes":1,"stakeTimestamp":1234567926,"targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"},{"tokenId":2,"owner":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","numberOfStakes":1,"stakeTimestamp":1234567928,"targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"},{"tokenId":3,"owner":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","numberOfStakes":1,"stakeTimestamp":1234567930,"targetPoolPath":"gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500"}]}`
	shouldEQ(t, stakes, res)
}

// Test Getter/Setter for UnstakingFee
func TestGetUnstakingFee(t *testing.T) {
	shouldEQ(t, GetUnstakingFee(), uint64(100))
}

func TestSetUnstakingFeeNoPermission(t *testing.T) {
	dummy := testutils.TestAddress("dummy")
	std.TestSetOrigCaller(dummy)

	shouldPanicWithMsg(
		t,
		func() {
			SetUnstakingFee(2)
		},
		"[STAKER] protocol_fee_unstaking.gno__SetUnstakingFee() || only admin(g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c) or governance(g1egdt2l7xjcrm6qjwyd3g60z6e9cnr75pmcuasc) can set unstaking fee, called from g1v36k6mteta047h6lta047h6lta047h6lz7gmv8",
	)
}

func TestSetUnstakingFeeOutOfRange(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	shouldPanicWithMsg(
		t,
		func() {
			SetUnstakingFee(10001)
		},
		"[STAKER] reward_fee.gno__SetUnstakingFee() || fee(10001) must be in range 0 ~ 10000",
	)
}

func TestSetUnstakingFee(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	shouldEQ(t, GetUnstakingFee(), uint64(100))
	SetUnstakingFee(30)
	shouldEQ(t, GetUnstakingFee(), uint64(30))
}
