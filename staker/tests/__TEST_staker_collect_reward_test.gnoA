package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gnft"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/obl"
)

func init() {
	// set pool create fee to 0 for testing
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)
	pl.SetPoolCreationFee(0)
}

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500"] = InternalTier{
		tier:           1,
		startTimestamp: time.Now().Unix(),
	}
}

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())

	pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006") // tick 10_000 â‰ˆ x2.7

	std.TestSkipHeights(1)
}

func TestPositionMint01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		uint32(500),  // fee
		int32(9000),  // tickLower
		int32(11000), // tickUpper
		"1000",       // amount0Desired
		"1000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, uint64(1))
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "368")
	shouldEQ(t, amount1, "1000")

	// approve nft to staker
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestPositionMint02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	lpTokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		uint32(500),  // fee
		int32(9100),  // tickLower
		int32(12000), // tickUpper
		"5000",       // amount0Desired
		"5000",       // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,  // deadline
		gsa.String(),
	)

	std.TestSkipHeights(1)

	shouldEQ(t, lpTokenId, uint64(2))
	shouldEQ(t, gnft.OwnerOf(tid(lpTokenId)), std.GetOrigCaller()) // gsa
	shouldEQ(t, amount0, "3979")
	shouldEQ(t, amount1, "5000")

	// approve nft to staker
	std.TestSetRealm(gsaRealm)
	gnft.Approve(a2u(GetOrigPkgAddr()), tid(lpTokenId))
	std.TestSkipHeights(1)
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	obl.Approve(a2u(consts.STAKER_ADDR), uint64(10_000_000_000))
	std.TestSkipHeights(1)

	gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

	// obl token isnt't allowed for external reward, so panic
	shouldPanicWithMsg(
		t,
		func() {
			CreateExternalIncentive(
				"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500", // targetPoolPath
				"gno.land/r/onbloc/obl",                           // rewardToken
				"1000000000",                                      // rewardAmount 10_000_000_000
				1234569600,                                        // startTimestamp
				1234569600+TIMESTAMP_90DAYS,                       // endTimestamp
			)
		},
		"[STAKER] staker.gno__isAllowedForExternalReward() || tokenPath(gno.land/r/onbloc/obl) is not allowed for external reward for poolPath(gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500)",
	)

	// allow obl to be used as external reward token
	AddToken(oblPath)
	gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500", // targetPoolPath
		"gno.land/r/onbloc/obl",                           // rewardToken
		"1000000000",                                      // rewardAmount 10_000_000_000
		1234569600,                                        // startTimestamp
		1234569600+TIMESTAMP_90DAYS,                       // endTimestamp
	)
	// std.GetHeight() = 133
	std.TestSkipHeights(1)

	obl.Approve(a2u(consts.STAKER_ADDR), uint64(10_000_000_000))
	std.TestSkipHeights(1)
}

func TestStakeToken01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(1) // GNFT tokenId

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 1)
}

func TestStakeToken02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	StakeToken(2) // GNFT tokenId

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
	shouldEQ(t, len(deposits), 2)
}

func TestCollectReward01_External(t *testing.T) {
	std.TestSkipHeights(1)

	// before claim
	oblOld := obl.BalanceOf(a2u(gsa))
	std.TestSkipHeights(1)
	shouldEQ(t, oblOld, uint64(99999000000000))

	std.TestSetRealm(stkRealm)
	std.TestSetOrigCaller(gsa)
	CollectReward(1, true) // GNFT tokenId

	std.TestSkipHeights(1) // not enough time to claim external reward

	oblNew := obl.BalanceOf(a2u(gsa))
	std.TestSkipHeights(1)
	shouldEQ(t, oblNew, uint64(99999000000000))
}

func TestUnstakeToken01(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	std.TestSkipHeights(900) //  enough time to claim external reward

	// check reward balance before unstake
	shouldEQ(t, gns.BalanceOf(a2u(gsa)), uint64(99999002318056)) // internal
	shouldEQ(t, obl.BalanceOf(a2u(gsa)), uint64(99999000000000)) // external

	response := ApiGetRewardsByLpTokenId(1)
	shouldEQ(t, response, `{"stat":{"height":1041,"timestamp":1234569726},"response":[{"lpTokenId":1,"address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","rewards":[{"incentiveType":"INTERNAL","incentiveId":"","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500","rewardTokenPath":"gno.land/r/gnoswap/v2/gns","rewardTokenAmount":445623695,"stakeTimestamp":1234567914,"stakeHeight":135,"incentiveStart":1234567914},{"incentiveType":"EXTERNAL","incentiveId":"ZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yzpnbm8ubGFuZC9yL29uYmxvYy9iYXI6Z25vLmxhbmQvci9vbmJsb2MvcXV4OjUwMDpnbm8ubGFuZC9yL29uYmxvYy9vYmw6MTIzNDU2OTYwMDoxMjQyMzQ1NjAwOjEzMw==","targetPoolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500","rewardTokenPath":"gno.land/r/onbloc/obl","rewardTokenAmount":743,"stakeTimestamp":1234567914,"stakeHeight":135,"incentiveStart":1234569600}]}]}`)

	UnstakeToken(1, false) // GNFT tokenId
	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(1)), gsa)

	// check reward balance after unstake
	shouldEQ(t, gns.BalanceOf(a2u(gsa)), uint64(99999443485515))
	shouldEQ(t, obl.BalanceOf(a2u(gsa)), uint64(99999000000736))
}

func TestUnstakeToken02(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	UnstakeToken(2, true) // GNFT tokenId

	std.TestSkipHeights(1)

	shouldEQ(t, gnft.OwnerOf(tid(2)), gsa)

	// check reward
	shouldEQ(t, gns.BalanceOf(a2u(gsa)), uint64(100001894600370)) // internal
	shouldEQ(t, obl.BalanceOf(a2u(gsa)), uint64(99999000004890))  // external
}

func TestEndExternalIncentive(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	std.TestSkipHeights(9999999)

	// use same parameter as CreateExternalIncentive()
	EndExternalIncentive(
		std.GetOrigCaller().String(),
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500",
		"gno.land/r/onbloc/obl",
		1234569600,                  // startTimestamp
		1234569600+TIMESTAMP_90DAYS, // endTimestamp
		133,
	)

	std.TestSkipHeights(1)

	shouldEQ(t, len(incentives), 0)
	shouldEQ(t, len(poolIncentives["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500"]), 0)
}
