package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/consts"

	en "gno.land/r/gnoswap/v1/emission"
	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func TestShortWarmUpInternalSmallLiq(t *testing.T) {
	testInit(t)
	testDoubleMint(t)
	testCreatePool(t)
	testMintBarQux100_1(t)
	testMintBarQux100_2(t)
	testStakeToken_1_2(t)
	testNow(t)
	testCollectRewardBoth(t)
}

func testInit(t *testing.T) {
	t.Run("initialize", func(t *testing.T) {
		// init pool tiers
		// tier 1
		delete(poolTiers, MUST_EXISTS_IN_TIER_1)

		poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100"] = InternalTier{
			tier:           1,
			startTimestamp: time.Now().Unix(),
		}

		std.TestSkipHeights(1)

		// override warm-up period for testing
		warmUp[100] = 901 // 30m ~
		warmUp[70] = 301  // 10m ~ 30m
		warmUp[50] = 151  // 5m ~ 10m
		warmUp[30] = 1    // ~ 5m
	})
}

func testDoubleMint(t *testing.T) {
	t.Run("mint and distribute gns", func(t *testing.T) {
		en.MintAndDistributeGns()
		en.MintAndDistributeGns()

		std.TestSkipHeights(1)
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

		pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
		pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

		std.TestSkipHeights(1)
	})
}

func testMintBarQux100_1(t *testing.T) {
	t.Run("mint position 01, bar:qux:100", func(t *testing.T) {
		curr := getCurrentInfo()

		std.TestSetRealm(adminRealm)

		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

		tokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee100,       // fee
			int32(-1000), // tickLower
			int32(1000),  // tickUpper
			"500000000",  // amount0Desired
			"500000000",  // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			admin,
			admin,
		)

		uassert.Equal(t, tokenId, uint64(1))
		uassert.Equal(t, gnft.OwnerOf(tid(tokenId)), admin)

		gpi := GetPrintInfo()
		uassert.Equal(t, gpi, `{"height":126,"time":1234567896,"gns":{"staker":0,"devOps":8561643,"communityPool":34246574,"govStaker":0,"protocolFee":200000000,"GnoswapAdmin":99999800000000},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":0,"position":[]}]}`)
		printInfo(curr)

		std.TestSkipHeights(1)
	})
}

func testMintBarQux100_2(t *testing.T) {
	t.Run("mint position 02, bar:qux:100", func(t *testing.T) {
		curr := getCurrentInfo()

		std.TestSetRealm(adminRealm)

		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

		tokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee100,       // fee
			int32(-1000), // tickLower
			int32(1000),  // tickUpper
			"50",         // amount0Desired
			"50",         // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			admin,
			admin,
		)

		uassert.Equal(t, tokenId, uint64(2))
		uassert.Equal(t, gnft.OwnerOf(tid(tokenId)), admin)

		gpi := GetPrintInfo()
		uassert.Equal(t, gpi, `{"height":127,"time":1234567898,"gns":{"staker":0,"devOps":11415524,"communityPool":45662099,"govStaker":0,"protocolFee":200000000,"GnoswapAdmin":99999800000000},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":0,"position":[]}]}`)
		printInfo(curr)

		std.TestSkipHeights(1)
	})
}

func testStakeToken_1_2(t *testing.T) {
	t.Run("stake position 01 and 02", func(t *testing.T) {
		curr := getCurrentInfo()

		std.TestSetRealm(adminRealm)

		gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
		StakeToken(1)

		gnft.Approve(a2u(GetOrigPkgAddr()), tid(2))
		StakeToken(2)

		gpi := GetPrintInfo()
		uassert.Equal(t, gpi, `{"height":128,"time":1234567900,"gns":{"staker":0,"devOps":14269405,"communityPool":57077624,"govStaker":0,"protocolFee":200000000,"GnoswapAdmin":99999800000000},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":0,"position":[{"lpTokenId":1,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":0,"fullAmount":0,"ratio":0,"warmUpAmount":0,"full30":0,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0},{"lpTokenId":2,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":0,"fullAmount":0,"ratio":0,"warmUpAmount":0,"full30":0,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0}]}]}`)
		printInfo(curr)

		std.TestSkipHeights(1)
	})
}

func testNow(t *testing.T) {
	t.Run("now", func(t *testing.T) {
		curr := getCurrentInfo()

		std.TestSetRealm(adminRealm)

		gpi := GetPrintInfo()
		uassert.Equal(t, gpi, `{"height":129,"time":1234567902,"gns":{"staker":10702055,"devOps":17123286,"communityPool":57791094,"govStaker":0,"protocolFee":200000000,"GnoswapAdmin":99999800000000},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":10702055,"position":[{"lpTokenId":1,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":1,"fullAmount":10702053,"ratio":30,"warmUpAmount":3210615,"full30":10702053,"give30":3210615,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0},{"lpTokenId":2,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":1,"fullAmount":1,"ratio":30,"warmUpAmount":0,"full30":1,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0}]}]}`)
		printInfo(curr)

		std.TestSkipHeights(1)
	})
}

func testCollectRewardBoth(t *testing.T) {
	t.Run("collect reward for position 01 and 02", func(t *testing.T) {
		curr := getCurrentInfo()

		std.TestSetRealm(adminRealm)

		CollectReward(1, false) // 21404107 > 6421231
		CollectReward(2, false)

		gpi := GetPrintInfo()
		uassert.Equal(t, gpi, `{"height":130,"time":1234567904,"gns":{"staker":3,"devOps":19977167,"communityPool":73487440,"govStaker":0,"protocolFee":200064212,"GnoswapAdmin":99999806357019},"pool":[{"poolPath":"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100","startTimestamp":1234567890,"tier":1,"numPoolSameTier":1,"poolReward":3,"position":[{"lpTokenId":1,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":2,"fullAmount":0,"ratio":30,"warmUpAmount":0,"full30":0,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0},{"lpTokenId":2,"stakedHeight":128,"stakedTimestamp":1234567900,"stakedDuration":2,"fullAmount":2,"ratio":30,"warmUpAmount":0,"full30":2,"give30":0,"full50":0,"give50":0,"full70":0,"give70":0,"full100":0}]}]}`)
		printInfo(curr)

		std.TestSkipHeights(1)
	})
}
