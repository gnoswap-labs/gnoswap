// external incentive + warm up period testing
// with two external incentives for same pool
// bar + qux

package staker

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	en "gno.land/r/gnoswap/v2/emission"
	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gnft"
	"gno.land/r/gnoswap/v2/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"
)

func init() {
	// override warm-up period for testing
	warmUp[100] = 901 // 30m ~
	warmUp[70] = 301  // 10m ~ 30m
	warmUp[50] = 151  // 5m ~ 10m
	warmUp[30] = 1    // ~ 5m
}

func TestPoolInitCreatePool(t *testing.T) {

	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

	pl.CreatePool(barPath, quxPath, 100, "79228162514264337593543950337")
	pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950337")

	std.TestSkipHeights(1)
}

func TestMintBarQux100_1(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(
		barPath,      // token0
		quxPath,      // token1
		fee100,       // fee
		int32(-1000), // tickLower
		int32(1000),  // tickUpper
		"50",         // amount0Desired
		"50",         // amount1Desired
		"1",          // amount0Min
		"1",          // amount1Min
		max_timeout,
		gsa,
		gsa,
	)

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, gnft.OwnerOf(tid(tokenId)), gsa)

	std.TestSkipHeights(1)
}

func TestCreateExternalIncentiveBar(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
	gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
		barPath,    // rewardToken string, // token path should be registered
		"20000000", // _rewardAmount string,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)

	// after
	printExternalInfo()

	std.TestSkipHeights(1)
}

func TestCreateExternalIncentiveQux(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	qux.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
	gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

	CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100", // targetPoolPath string,
		quxPath,    // rewardToken string, // token path should be registered
		"20000000", // _rewardAmount string,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)

	// after
	printExternalInfo()

	std.TestSkipHeights(1)
}

func TestStakeToken_1(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
	StakeToken(1)

	std.TestSkipHeights(1)
}

func TestBeforeActive(t *testing.T) {
	en.MintAndDistributeGns()
	CalcPoolPosition()
	printExternalInfo()

	std.TestSkipHeights(1)
}

func TestAfterActive(t *testing.T) {
	std.TestSkipHeights(849) // in active
	std.TestSkipHeights(1)   // active // but no block passed since active
	std.TestSkipHeights(50)  // skip 50 more block

	en.MintAndDistributeGns()
	CalcPoolPosition()

	std.TestSkipHeights(1)
}

func TestDuratino200(t *testing.T) {
	std.TestSkipHeights(199) // skip 1 + 199 = 200 more block
	en.MintAndDistributeGns()
	CalcPoolPosition()
	printExternalInfo()
}

func TestCollectReward(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	oldBar := bar.BalanceOf(a2u(gsa))
	oldQux := qux.BalanceOf(a2u(gsa))

	CollectReward(1, false)

	newBar := bar.BalanceOf(a2u(gsa))
	newQux := qux.BalanceOf(a2u(gsa))

	shouldEQ(t, bool(newBar > oldBar), true)
	shouldEQ(t, bool(newQux > oldQux), true)
}
