package staker

import (
	"std"
	"time"

	"gno.land/p/demo/json"
	"gno.land/p/demo/ufmt"

	u256 "gno.land/p/gnoswap/uint256"

	en "gno.land/r/gnoswap/v1/emission"
	pl "gno.land/r/gnoswap/v1/pool"

	"gno.land/r/gnoswap/v1/consts"

	"gno.land/r/gnoswap/v1/gns"
)

type RewardToken struct {
	PoolPath         string   `json:"poolPath"`
	RewardsTokenList []string `json:"rewardsTokenList"`
}

type ApiExternalIncentive struct {
	IncentiveId      string `json:"incentiveId"`
	PoolPath         string `json:"poolPath"`
	RewardToken      string `json:"rewardToken"`
	RewardAmount     string `json:"rewardAmount"`
	RewardLeft       string `json:"rewardLeft"`
	StartTimestamp   int64  `json:"startTimestamp"`
	EndTimestamp     int64  `json:"endTimestamp"`
	Active           bool   `json:"active"`
	Refundee         string `json:"refundee"`
	CreatedHeight    int64  `json:"createdHeight"`
	DepositGnsAmount uint64 `json:"depositGnsAmount"`
}

type ApiInternalIncentive struct {
	PoolPath       string `json:"poolPath"`
	Tier           uint64 `json:"tier"`
	StartTimestamp int64  `json:"startTimestamp"`
	RewardPerBlock string `json:"rewardPerBlock"`
}

func ApiGetRewardTokens() string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	rewardTokens := []RewardToken{}

	poolList := pl.PoolGetPoolList()
	for _, poolPath := range poolList {
		thisPoolRewardTokens := []string{}

		// HANDLE INTERNAL
		if isExistPoolTiers(poolPath) {
			thisPoolRewardTokens = append(thisPoolRewardTokens, consts.GNS_PATH)
		}

		// HANDLE EXTERNAL
		ictvList, exists := poolIncentives.Get(poolPath)
		if !exists {
			continue
		}

		for _, incentiveId := range ictvList {
			ictv, exist := incentives.Get(incentiveId)
			if !exist {
				continue
			}
			if ictv.RewardToken() == "" {
				continue
			}
			thisPoolRewardTokens = append(thisPoolRewardTokens, ictv.RewardToken())
		}

		if len(thisPoolRewardTokens) == 0 {
			continue
		}

		rewardTokens = append(rewardTokens, RewardToken{
			PoolPath:         poolPath,
			RewardsTokenList: thisPoolRewardTokens,
		})
	}

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, rewardToken := range rewardTokens {
		_rewardTokenNode := json.ObjectNode("", map[string]*json.Node{
			"poolPath": json.StringNode("poolPath", rewardToken.PoolPath),
			"tokens":   json.ArrayNode("tokens", makeRewardTokensArray(rewardToken.RewardsTokenList)),
		})
		responses.AppendArray(_rewardTokenNode)
	}

	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func ApiGetRewardTokensByPoolPath(targetPoolPath string) string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	rewardTokens := []RewardToken{}

	poolList := pl.PoolGetPoolList()
	for _, poolPath := range poolList {
		if poolPath != targetPoolPath {
			continue
		}

		thisPoolRewardTokens := []string{}

		// HANDLE INTERNAL
		if isExistPoolTiers(poolPath) {
			thisPoolRewardTokens = append(thisPoolRewardTokens, consts.GNS_PATH)
		}

		// HANDLE EXTERNAL
		ictvList, exists := poolIncentives.Get(poolPath)
		if !exists {
			continue
		}

		for _, incentiveId := range ictvList {
			ictv, exist := incentives.Get(incentiveId)
			if !exist {
				continue
			}
			thisPoolRewardTokens = append(thisPoolRewardTokens, ictv.RewardToken())
		}

		rewardTokens = append(rewardTokens, RewardToken{
			PoolPath:         poolPath,
			RewardsTokenList: thisPoolRewardTokens,
		})
	}

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, rewardToken := range rewardTokens {
		_rewardTokenNode := json.ObjectNode("", map[string]*json.Node{
			"poolPath": json.StringNode("poolPath", rewardToken.PoolPath),
			"tokens":   json.ArrayNode("tokens", makeRewardTokensArray(rewardToken.RewardsTokenList)),
		})
		responses.AppendArray(_rewardTokenNode)
	}

	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func ApiGetExternalIncentives() string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	updateExternalIncentiveLeftAmount()

	apiExternalIncentives := []ApiExternalIncentive{}

	for incentiveId, incentive := range incentives {
		apiExternalIncentives = append(apiExternalIncentives, ApiExternalIncentive{
			IncentiveId:      incentiveId,
			PoolPath:         incentive.targetPoolPath,
			RewardToken:      incentive.rewardToken,
			RewardAmount:     incentive.rewardAmount.ToString(),
			RewardLeft:       incentive.rewardLeft.ToString(),
			StartTimestamp:   incentive.startTimestamp,
			EndTimestamp:     incentive.endTimestamp,
			Refundee:         incentive.refundee.String(),
			CreatedHeight:    incentive.createdHeight,
			DepositGnsAmount: incentive.depositGnsAmount,
		})
	}

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, incentive := range apiExternalIncentives {
		active := false
		if time.Now().Unix() >= incentive.StartTimestamp && time.Now().Unix() <= incentive.EndTimestamp {
			active = true
		}

		_incentiveNode := json.ObjectNode("", map[string]*json.Node{
			"incentiveId":      json.StringNode("incentiveId", incentive.IncentiveId),
			"poolPath":         json.StringNode("poolPath", incentive.PoolPath),
			"rewardToken":      json.StringNode("rewardToken", incentive.RewardToken),
			"rewardAmount":     json.StringNode("rewardAmount", incentive.RewardAmount),
			"rewardLeft":       json.StringNode("rewardLeft", incentive.RewardLeft),
			"startTimestamp":   json.NumberNode("startTimestamp", float64(incentive.StartTimestamp)),
			"endTimestamp":     json.NumberNode("endTimestamp", float64(incentive.EndTimestamp)),
			"active":           json.BoolNode("active", active),
			"refundee":         json.StringNode("refundee", incentive.Refundee),
			"createdHeight":    json.NumberNode("createdHeight", float64(incentive.CreatedHeight)),
			"depositGnsAmount": json.NumberNode("depositGnsAmount", float64(incentive.DepositGnsAmount)),
		})
		responses.AppendArray(_incentiveNode)
	}

	// RETURN
	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func ApiGetExternalIncentiveById(incentiveId string) string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	updateExternalIncentiveLeftAmount()

	apiExternalIncentives := []ApiExternalIncentive{}

	incentive, exist := incentives.Get(incentiveId)
	if !exist {
		panic(addDetailToError(
			errDataNotFound,
			ufmt.Sprintf("incentive(%s) not found", incentiveId),
		))
	}

	apiExternalIncentives = append(apiExternalIncentives, ApiExternalIncentive{
		IncentiveId:      incentiveId,
		PoolPath:         incentive.targetPoolPath,
		RewardToken:      incentive.rewardToken,
		RewardAmount:     incentive.rewardAmount.ToString(),
		RewardLeft:       incentive.rewardLeft.ToString(),
		StartTimestamp:   incentive.startTimestamp,
		EndTimestamp:     incentive.endTimestamp,
		Refundee:         incentive.refundee.String(),
		CreatedHeight:    incentive.createdHeight,
		DepositGnsAmount: incentive.depositGnsAmount,
	})

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, incentive := range apiExternalIncentives {
		active := false
		if time.Now().Unix() >= incentive.StartTimestamp && time.Now().Unix() <= incentive.EndTimestamp {
			active = true
		}

		_incentiveNode := json.ObjectNode("", map[string]*json.Node{
			"incentiveId":      json.StringNode("incentiveId", incentive.IncentiveId),
			"poolPath":         json.StringNode("poolPath", incentive.PoolPath),
			"rewardToken":      json.StringNode("rewardToken", incentive.RewardToken),
			"rewardAmount":     json.StringNode("rewardAmount", incentive.RewardAmount),
			"rewardLeft":       json.StringNode("rewardLeft", incentive.RewardLeft),
			"startTimestamp":   json.NumberNode("startTimestamp", float64(incentive.StartTimestamp)),
			"endTimestamp":     json.NumberNode("endTimestamp", float64(incentive.EndTimestamp)),
			"active":           json.BoolNode("active", active),
			"refundee":         json.StringNode("refundee", incentive.Refundee),
			"createdHeight":    json.NumberNode("createdHeight", float64(incentive.CreatedHeight)),
			"depositGnsAmount": json.NumberNode("depositGnsAmount", float64(incentive.DepositGnsAmount)),
		})
		responses.AppendArray(_incentiveNode)
	}

	// RETURN
	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func ApiGetExternalIncentivesByPoolPath(targetPoolPath string) string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	updateExternalIncentiveLeftAmount()

	apiExternalIncentives := []ApiExternalIncentive{}

	for incentiveId, incentive := range incentives {
		if incentive.targetPoolPath != targetPoolPath {
			continue
		}

		apiExternalIncentives = append(apiExternalIncentives, ApiExternalIncentive{
			IncentiveId:      incentiveId,
			PoolPath:         incentive.targetPoolPath,
			RewardToken:      incentive.rewardToken,
			RewardAmount:     incentive.rewardAmount.ToString(),
			RewardLeft:       incentive.rewardLeft.ToString(),
			StartTimestamp:   incentive.startTimestamp,
			EndTimestamp:     incentive.endTimestamp,
			Refundee:         incentive.refundee.String(),
			CreatedHeight:    incentive.createdHeight,
			DepositGnsAmount: incentive.depositGnsAmount,
		})
	}

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, incentive := range apiExternalIncentives {
		active := false
		if time.Now().Unix() >= incentive.StartTimestamp && time.Now().Unix() <= incentive.EndTimestamp {
			active = true
		}

		_incentiveNode := json.ObjectNode("", map[string]*json.Node{
			"incentiveId":      json.StringNode("incentiveId", incentive.IncentiveId),
			"poolPath":         json.StringNode("poolPath", incentive.PoolPath),
			"rewardToken":      json.StringNode("rewardToken", incentive.RewardToken),
			"rewardAmount":     json.StringNode("rewardAmount", incentive.RewardAmount),
			"rewardLeft":       json.StringNode("rewardLeft", incentive.RewardLeft),
			"startTimestamp":   json.NumberNode("startTimestamp", float64(incentive.StartTimestamp)),
			"endTimestamp":     json.NumberNode("endTimestamp", float64(incentive.EndTimestamp)),
			"active":           json.BoolNode("active", active),
			"refundee":         json.StringNode("refundee", incentive.Refundee),
			"createdHeight":    json.NumberNode("createdHeight", float64(incentive.CreatedHeight)),
			"depositGnsAmount": json.NumberNode("depositGnsAmount", float64(incentive.DepositGnsAmount)),
		})
		responses.AppendArray(_incentiveNode)
	}

	// RETURN
	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func ApiGetExternalIncentivesByRewardTokenPath(rewardTokenPath string) string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	updateExternalIncentiveLeftAmount()

	apiExternalIncentives := []ApiExternalIncentive{}

	for incentiveId, incentive := range incentives {
		if incentive.rewardToken != rewardTokenPath {
			continue
		}

		apiExternalIncentives = append(apiExternalIncentives, ApiExternalIncentive{
			IncentiveId:      incentiveId,
			PoolPath:         incentive.targetPoolPath,
			RewardToken:      incentive.rewardToken,
			RewardAmount:     incentive.rewardAmount.ToString(),
			RewardLeft:       incentive.rewardLeft.ToString(),
			StartTimestamp:   incentive.startTimestamp,
			EndTimestamp:     incentive.endTimestamp,
			Refundee:         incentive.refundee.String(),
			CreatedHeight:    incentive.createdHeight,
			DepositGnsAmount: incentive.depositGnsAmount,
		})
	}

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, incentive := range apiExternalIncentives {
		active := false
		if time.Now().Unix() >= incentive.StartTimestamp && time.Now().Unix() <= incentive.EndTimestamp {
			active = true
		}

		_incentiveNode := json.ObjectNode("", map[string]*json.Node{
			"incentiveId":      json.StringNode("incentiveId", incentive.IncentiveId),
			"poolPath":         json.StringNode("poolPath", incentive.PoolPath),
			"rewardToken":      json.StringNode("rewardToken", incentive.RewardToken),
			"rewardAmount":     json.StringNode("rewardAmount", incentive.RewardAmount),
			"rewardLeft":       json.StringNode("rewardLeft", incentive.RewardLeft),
			"startTimestamp":   json.NumberNode("startTimestamp", float64(incentive.StartTimestamp)),
			"endTimestamp":     json.NumberNode("endTimestamp", float64(incentive.EndTimestamp)),
			"active":           json.BoolNode("active", active),
			"refundee":         json.StringNode("refundee", incentive.Refundee),
			"createdHeight":    json.NumberNode("createdHeight", float64(incentive.CreatedHeight)),
			"depositGnsAmount": json.NumberNode("depositGnsAmount", float64(incentive.DepositGnsAmount)),
		})
		responses.AppendArray(_incentiveNode)
	}

	// RETURN
	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func ApiGetInternalIncentives() string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	apiInternalIncentives := []ApiInternalIncentive{}

	poolTiers.Iter(func(poolPath string, internalTier InternalTier) {
		apiInternalIncentives = append(apiInternalIncentives, ApiInternalIncentive{
			PoolPath:       poolPath,
			Tier:           internalTier.tier,
			StartTimestamp: internalTier.startTimestamp,
			RewardPerBlock: calculateInternalRewardPerBlockByPoolPath(poolPath),
		})
	})

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, incentive := range apiInternalIncentives {
		_incentiveNode := json.ObjectNode("", map[string]*json.Node{
			"poolPath":       json.StringNode("poolPath", incentive.PoolPath),
			"rewardToken":    json.StringNode("rewardToken", consts.GNS_PATH),
			"tier":           json.NumberNode("tier", float64(incentive.Tier)),
			"startTimestamp": json.NumberNode("startTimestamp", float64(incentive.StartTimestamp)),
			"rewardPerBlock": json.StringNode("rewardPerBlock", incentive.RewardPerBlock),
			"accuGns":        json.NumberNode("accuGns", float64(poolAccuGns[incentive.PoolPath])),
		})
		responses.AppendArray(_incentiveNode)
	}

	// RETURN
	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func ApiGetInternalIncentivesByPoolPath(targetPoolPath string) string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	apiInternalIncentives := []ApiInternalIncentive{}

	poolTiers.Iter(func(poolPath string, internalTier InternalTier) {
		if poolPath != targetPoolPath {
			return
		}

		apiInternalIncentives = append(apiInternalIncentives, ApiInternalIncentive{
			PoolPath:       poolPath,
			Tier:           internalTier.tier,
			StartTimestamp: internalTier.startTimestamp,
			RewardPerBlock: calculateInternalRewardPerBlockByPoolPath(poolPath),
		})
	})

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, incentive := range apiInternalIncentives {
		_incentiveNode := json.ObjectNode("", map[string]*json.Node{
			"poolPath":       json.StringNode("poolPath", incentive.PoolPath),
			"rewardToken":    json.StringNode("rewardToken", consts.GNS_PATH),
			"tier":           json.NumberNode("tier", float64(incentive.Tier)),
			"startTimestamp": json.NumberNode("startTimestamp", float64(incentive.StartTimestamp)),
			"rewardPerBlock": json.StringNode("rewardPerBlock", incentive.RewardPerBlock),
			"accuGns":        json.NumberNode("accuGns", float64(poolAccuGns[targetPoolPath])),
		})
		responses.AppendArray(_incentiveNode)
	}

	// RETURN
	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func ApiGetInternalIncentivesByTiers(targetTier uint64) string {
	en.MintAndDistributeGns()
	if consts.EMISSION_REFACTORED {
		CalcPoolPositionRefactor()
	} else {
		CalcPoolPosition()
	}

	apiInternalIncentives := []ApiInternalIncentive{}

	poolTiers.Iter(func(poolPath string, internalTier InternalTier) {
		if internalTier.tier != targetTier {
			return
		}

		apiInternalIncentives = append(apiInternalIncentives, ApiInternalIncentive{
			PoolPath:       poolPath,
			Tier:           internalTier.tier,
			StartTimestamp: internalTier.startTimestamp,
			RewardPerBlock: calculateInternalRewardPerBlockByPoolPath(poolPath),
		})
	})

	// STAT NODE
	_stat := json.ObjectNode("", map[string]*json.Node{
		"height":    json.NumberNode("height", float64(std.GetHeight())),
		"timestamp": json.NumberNode("timestamp", float64(time.Now().Unix())),
	})

	// RESPONSE (ARRAY) NODE
	responses := json.ArrayNode("", []*json.Node{})
	for _, incentive := range apiInternalIncentives {
		_incentiveNode := json.ObjectNode("", map[string]*json.Node{
			"poolPath":       json.StringNode("poolPath", incentive.PoolPath),
			"rewardToken":    json.StringNode("rewardToken", consts.GNS_PATH),
			"tier":           json.NumberNode("tier", float64(incentive.Tier)),
			"startTimestamp": json.NumberNode("startTimestamp", float64(incentive.StartTimestamp)),
			"rewardPerBlock": json.StringNode("rewardPerBlock", incentive.RewardPerBlock),
			"accuGns":        json.NumberNode("accuGns", float64(poolAccuGns[incentive.PoolPath])),
		})
		responses.AppendArray(_incentiveNode)
	}

	// RETURN
	node := json.ObjectNode("", map[string]*json.Node{
		"stat":     _stat,
		"response": responses,
	})

	b, err := json.Marshal(node)
	if err != nil {
		panic(err.Error())
	}

	return string(b)
}

func makeRewardTokensArray(rewardsTokenList []string) []*json.Node {
	rewardsTokenArray := make([]*json.Node, len(rewardsTokenList))
	for i, rewardToken := range rewardsTokenList {
		rewardsTokenArray[i] = json.StringNode("", rewardToken)
	}
	return rewardsTokenArray
}

func calculateInternalRewardPerBlockByPoolPath(poolPath string) string {
	nowHeight := std.GetHeight()
	fullGnsForThisHeight := gns.GetAmountByHeight(nowHeight)

	// staker distribution pct
	bpsPct := en.GetDistributionPct(1)

	// calculate reward per block
	stakerGns := fullGnsForThisHeight * bpsPct / 10000

	tier1Amount, tier2Amount, tier3Amount := getTiersAmount(stakerGns)
	tier1Num, tier2Num, tier3Num := getNumPoolTiers()

	internalTier, exist := poolTiers.Get(poolPath)
	if !exist {
		return "0"
	}

	tier := internalTier.Tier()

	if tier == 1 {
		return ufmt.Sprintf("%d", tier1Amount/tier1Num)
	} else if tier == 2 {
		return ufmt.Sprintf("%d", tier2Amount/tier2Num)
	} else if tier == 3 {
		return ufmt.Sprintf("%d", tier3Amount/tier3Num)
	}

	return "0"
}

func updateExternalIncentiveLeftAmount() {
	// external incentive reward left update
	for _, positionWarmUpAmount := range positionsExternalWarmUpAmount {
		for incentiveId, warmUpAmount := range positionWarmUpAmount {

			full := warmUpAmount.full100 + warmUpAmount.full70 + warmUpAmount.full50 + warmUpAmount.full30

			ictv, exist := incentives.Get(incentiveId)
			if !exist {
				continue
			}
			ictv.rewardLeft = new(u256.Uint).Sub(ictv.rewardLeft, u256.NewUint(full))
			incentives.Set(incentiveId, ictv)
		}
	}
}
