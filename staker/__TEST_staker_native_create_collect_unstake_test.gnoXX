package staker

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/gnoswap/v1/gnft"

	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/gnoswap/v1/consts"
)

func TestNativeCreateAndCollectUnstake(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testPositionMintNative01(t)
	testPositionMintNative02(t)
	testCreateExternalIncentive(t)
	testStakeToken01(t)
	testStakeToken02(t)
	testCollectReward01(t)
	testUnstakeToken02(t)
	testEndExternalIncentive(t)
}

func testInit(t *testing.T) {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:500"] = InternalTier{
		tier:           1,
		startTimestamp: time.Now().Unix(),
	}

	poolTiers["gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:500"] = InternalTier{
		tier:           2,
		startTimestamp: time.Now().Unix(),
	}

	// override warm-up period for testing
	warmUp[100] = 901 // 30m ~
	warmUp[70] = 301  // 10m ~ 30m
	warmUp[50] = 151  // 5m ~ 10m
	warmUp[30] = 1    // ~ 5m
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
		std.TestSkipHeights(1)

		pl.CreatePool(consts.GNOT, consts.GNS_PATH, uint32(500), common.TickMathGetSqrtRatioAtTick(-10000).ToString())
		std.TestSkipHeights(1)
	})
}

func testPositionMintNative01(t *testing.T) {
	t.Run("position mint native 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)    // MINT
		wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // MINT

		wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // WRAP
		std.TestSkipHeights(3)

		// prepare 50000005ugnot (5 for refund test)
		std.TestIssueCoins(admin, std.Coins{{"ugnot", 50000005}})
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(50000005))
		uassert.Equal(t, ugnotBalanceOf(consts.POSITION_ADDR), uint64(0))

		banker := std.GetBanker(std.BankerTypeRealmIssue)
		banker.SendCoins(admin, consts.POSITION_ADDR, std.Coins{{"ugnot", 50000005}})
		std.TestSetOrigSend(std.Coins{{"ugnot", 50000005}}, nil)

		uassert.Equal(t, ugnotBalanceOf(admin), uint64(0))
		uassert.Equal(t, ugnotBalanceOf(consts.POSITION_ADDR), uint64(50000005))

		adminOldWugnotBalance := wugnot.BalanceOf(a2u(admin))
		uassert.Equal(t, adminOldWugnotBalance, uint64(0))

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			consts.GNS_PATH, // token0
			consts.GNOT,     // token1
			uint32(500),     // fee
			int32(9000),     // tickLower
			int32(11000),    // tickUpper
			"1000",          // amount0Desired
			"1000",          // amount1Desired
			"1",             // amount0Min
			"1",             // amount1Min
			max_timeout,     // deadline
			admin,
			admin,
		)

		std.TestSkipHeights(1)

		uassert.Equal(t, lpTokenId, uint64(1))
		uassert.Equal(t, gnft.OwnerOf(tid(lpTokenId)), admin)
		uassert.Equal(t, amount0, "1000")
		uassert.Equal(t, amount1, "368")
	})
}

func testPositionMintNative02(t *testing.T) {
	t.Run("position mint native 02", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)    // MINT
		wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // MINT

		wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // WRAP
		std.TestSkipHeights(3)

		// prepare 50000005ugnot (5 for refund test)
		std.TestIssueCoins(admin, std.Coins{{"ugnot", 50000005}})
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(99999010))
		uassert.Equal(t, ugnotBalanceOf(consts.POSITION_ADDR), uint64(0))

		// send & set orig send
		banker := std.GetBanker(std.BankerTypeRealmIssue)
		banker.SendCoins(admin, consts.POSITION_ADDR, std.Coins{{"ugnot", 50000005}})
		std.TestSetOrigSend(std.Coins{{"ugnot", 50000005}}, nil)

		uassert.Equal(t, ugnotBalanceOf(admin), uint64(49999005))
		uassert.Equal(t, ugnotBalanceOf(consts.POSITION_ADDR), uint64(50000005))

		adminOldWugnotBalance := wugnot.BalanceOf(a2u(admin))
		uassert.Equal(t, adminOldWugnotBalance, uint64(0))

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			consts.GNS_PATH, // token0
			consts.GNOT,     // token1
			uint32(500),     // fee
			int32(9000),     // tickLower
			int32(11000),    // tickUpper
			"1000",          // amount0Desired
			"1000",          // amount1Desired
			"1",             // amount0Min
			"1",             // amount1Min
			max_timeout,     // deadline
			admin,
			admin,
		)

		std.TestSkipHeights(1)

		uassert.Equal(t, lpTokenId, uint64(2))
		uassert.Equal(t, gnft.OwnerOf(tid(lpTokenId)), admin)
		uassert.Equal(t, amount0, "1000")
		uassert.Equal(t, amount1, "368")
	})
}

func testCreateExternalIncentive(t *testing.T) {
	t.Run("create external incentive", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		// prepare 10000000000 ugnot
		std.TestIssueCoins(admin, std.Coins{{"ugnot", 10_000_000_000}})
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(10099998010))
		uassert.Equal(t, ugnotBalanceOf(consts.STAKER_ADDR), uint64(200000000))

		banker := std.GetBanker(std.BankerTypeRealmIssue)
		banker.SendCoins(admin, consts.STAKER_ADDR, std.Coins{{"ugnot", 10_000_000_000}})
		std.TestSetOrigSend(std.Coins{{"ugnot", 10_000_000_000}}, nil)

		uassert.Equal(t, ugnotBalanceOf(admin), uint64(99998010))
		uassert.Equal(t, ugnotBalanceOf(consts.STAKER_ADDR), uint64(10200000000))

		adminOldWugnotBalance := wugnot.BalanceOf(a2u(admin))
		uassert.Equal(t, adminOldWugnotBalance, uint64(0))

		wugnot.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(1)

		AddToken(oblPath)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

		CreateExternalIncentive(
			"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:500", // targetPoolPath
			consts.GNOT,                 // rewardToken
			"10000000000",               // rewardAmount
			1234569600,                  // startTimestamp
			1234569600+TIMESTAMP_90DAYS, // endTimestamp
		)
		// std.GetHeight() = 134

		adminNewWugnotBalance := wugnot.BalanceOf(a2u(admin))
		uassert.Equal(t, adminNewWugnotBalance, uint64(0))

		std.TestSkipHeights(1)
	})
}

func testStakeToken01(t *testing.T) {
	t.Run("stake token 01", func(t *testing.T) {
		// approve nft to staker for staking
		std.TestSetRealm(adminRealm)
		gnft.Approve(a2u(GetOrigPkgAddr()), tid(1))
		std.TestSkipHeights(1)

		StakeToken(1) // GNFT tokenId

		std.TestSkipHeights(1)

		uassert.Equal(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
		uassert.Equal(t, len(deposits), 1)
	})
}

func testStakeToken02(t *testing.T) {
	t.Run("stake token 02", func(t *testing.T) {
		// approve nft to staker for staking
		std.TestSetRealm(adminRealm)
		gnft.Approve(a2u(GetOrigPkgAddr()), tid(2))
		std.TestSkipHeights(1)

		StakeToken(2) // GNFT tokenId

		std.TestSkipHeights(1)

		uassert.Equal(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
		uassert.Equal(t, len(deposits), 2)
	})
}

func testCollectReward01(t *testing.T) {
	t.Run("collect reward 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(1000)

		uassert.Equal(t, wugnot.BalanceOf(a2u(admin)), uint64(0))
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(99998010))

		CollectReward(1, false)

		std.TestSkipHeights(1)

		uassert.Equal(t, wugnot.BalanceOf(a2u(admin)), uint64(64294))
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(99998010))
	})
}

func testUnstakeToken02(t *testing.T) {
	t.Run("unstake token 02", func(t *testing.T) {
		std.TestSkipHeights(335) // skip times

		uassert.Equal(t, wugnot.BalanceOf(a2u(admin)), uint64(64294))
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(99998010))

		std.TestSetRealm(adminRealm)

		UnstakeToken(2, false) // GNFT tokenId
		std.TestSkipHeights(1)

		uassert.Equal(t, gnft.OwnerOf(tid(2)), admin)

		uassert.Equal(t, wugnot.BalanceOf(a2u(admin)), uint64(392638))
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(99998010))
	})
}

func testEndExternalIncentive(t *testing.T) {
	t.Run("end external incentive", func(t *testing.T) {
		wugnot.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX) // UNWRAP
		uassert.Equal(t, wugnot.BalanceOf(a2u(admin)), uint64(392638))
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(99998010))

		std.TestSkipHeights(9999999)
		// use same parameter as CreateExternalIncentive()
		std.TestSetRealm(adminRealm)
		EndExternalIncentive(
			admin,
			"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:500",
			consts.WRAPPED_WUGNOT,
			1234569600,                  // startTimestamp
			1234569600+TIMESTAMP_90DAYS, // endTimestamp
			134,
		)

		std.TestSkipHeights(1)

		uassert.Equal(t, wugnot.BalanceOf(a2u(admin)), uint64(392638))
		uassert.Equal(t, ugnotBalanceOf(admin), uint64(10099151818)) // always refund

		uassert.Equal(t, len(incentives), 0)
		uassert.Equal(t, len(poolIncentives["gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:500"]), 0)
	})
}
