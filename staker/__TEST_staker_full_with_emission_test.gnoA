package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v1/gnft"

	"gno.land/r/gnoswap/v1/consts"
)

func TestStakerWithEmissionAmount(t *testing.T) {
	testInit(t)
	testCreatePool(t)
	testPositionMintPos01Tier01(t)
	testPositionMintPos02Tier01(t)
	testPositionMintPos03Tier01(t)
	testCreateExternalIncentive(t)
	testStakeToken01(t)
	testStakeToken02(t)
	testStakeToken03(t)
	testSameHeightCalculation(t)
	testCollectReward01(t)
	testUnstakeToken01(t)
	testUnstakeToken02(t)
	testCollectReward02(t)
}

func testInit(t *testing.T) {
	t.Run("initial", func(t *testing.T) {
		// set pool create fee to 0 for testing
		std.TestSetRealm(adminRealm)
		pl.SetPoolCreationFeeByAdmin(0)

		// init pool tiers
		// tier 1
		addPoolTier(t, `gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500`, 1)
	})
}

func testCreatePool(t *testing.T) {
	t.Run("create pool", func(t *testing.T) {
		uassert.Equal(t, gns.TotalSupply(), uint64(100000000000000))
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(0))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(0))
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(0))

		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
		std.TestSkipHeights(1)

		pl.CreatePool(consts.WUGNOT_PATH, consts.GNS_PATH, 3000, "79228162514264337593543950336") // tick 0 ≈ x1
		pl.CreatePool(barPath, quxPath, 500, "130621891405341611593710811006")                    // tick 10_000 ≈ x2.7
		std.TestSkipHeights(2)

		uassert.Equal(t, gns.TotalSupply(), uint64(100000014269406)) // + 14269406
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(10702054)) // + 10702054
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(2853881))      // + 2853881
	})
}

func testPositionMintPos01Tier01(t *testing.T) {
	t.Run("mint position 01, gns:wugnot:3000", func(t *testing.T) {
		// mint position in tier 1 pool
		// gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000

		std.TestSetRealm(adminRealm)
		gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			"gno.land/r/gnoswap/v1/gns", // token0
			"gno.land/r/demo/wugnot",    // token1
			fee3000,                     // fee
			int32(1020),                 // tickLower
			int32(5040),                 // tickUpper
			"1000",                      // amount0Desired
			"1000",                      // amount1Desired
			"0",                         // amount0Min
			"0",                         // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
		)
		std.TestSkipHeights(1)

		// approve nft to staker for staking
		std.TestSetRealm(adminRealm)
		gnft.Approve(consts.STAKER_ADDR, tid(lpTokenId))
		std.TestSkipHeights(1)

		// 4 block passed
		uassert.Equal(t, gns.TotalSupply(), uint64(100000071347030)) // + 57077624
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(53510272)) // + 42808218
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(14269406))     // + 11415525
	})
}

func testPositionMintPos02Tier01(t *testing.T) {
	t.Run("mint position 02, bar:qux:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee500,       // fee
			int32(9000),  // tickLower
			int32(11000), // tickUpper
			"1000",       // amount0Desired
			"1000",       // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
		)

		std.TestSkipHeights(1)

		// approve nft to staker for staking
		std.TestSetRealm(adminRealm)
		gnft.Approve(consts.STAKER_ADDR, tid(lpTokenId))
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100000128424654))
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(96318490))
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(25684931))
	})
}

func testPositionMintPos03Tier01(t *testing.T) {
	t.Run("mint position 03, bar:qux:500", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
		std.TestSkipHeights(2)

		lpTokenId, liquidity, amount0, amount1 := pn.Mint(
			barPath,      // token0
			quxPath,      // token1
			fee500,       // fee
			int32(9100),  // tickLower
			int32(12000), // tickUpper
			"5000",       // amount0Desired
			"5000",       // amount1Desired
			"1",          // amount0Min
			"1",          // amount1Min
			max_timeout,
			adminAddr,
			adminAddr,
		)

		std.TestSkipHeights(1)

		// approve nft to staker
		std.TestSetRealm(adminRealm)
		gnft.Approve(consts.STAKER_ADDR, tid(lpTokenId))
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100000185502278))
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(139126708))
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(37100456))
	})
}

func testCreateExternalIncentive(t *testing.T) {
	t.Run("create external incentive", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)

		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)

		AddToken(oblPath)
		CreateExternalIncentive(
			"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:500", // targetPoolPath
			oblPath,                     // rewardToken
			1000000000,                  // rewardAmount
			1234569600,                  // startTimestamp
			1234569600+TIMESTAMP_90DAYS, // endTimestamp
		)
		std.TestSkipHeights(1)

		obl.Approve(a2u(consts.STAKER_ADDR), 10_000_000_000)
		gns.Approve(a2u(consts.STAKER_ADDR), depositGnsAmount)
	})
}

func testStakeToken01(t *testing.T) {
	t.Run("stake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		uassert.Equal(t, gnsBalance(consts.COMMUNITY_POOL_ADDR), uint64(10702053))
		StakeToken(1) // GNFT tokenId
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100000228310496))
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(1171232873))
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(45662099))
	})
}

func testStakeToken02(t *testing.T) {
	t.Run("stake token 02", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		StakeToken(2) // GNFT tokenId

		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100000242579902))
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(1181934928))
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(48515980))
	})
}

func testStakeToken03(t *testing.T) {
	t.Run("stake token 03", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		StakeToken(3) // GNFT tokenId

		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100000256849308))
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(1192636983))
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(51369861))
	})
}

func testSameHeightCalculation(t *testing.T) {

}

func testCollectReward01(t *testing.T) {
	t.Run("collect reward 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		CollectReward(1, false)
		std.TestSkipHeights(1)
	})
}

func testUnstakeToken01(t *testing.T) {
	t.Run("unstake token 01", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		UnstakeToken(1, false)
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.TotalSupply(), uint64(100000285388120))
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(1112371580))
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(57077623))
	})
}

func testUnstakeToken02(t *testing.T) {
	t.Run("unstake token 02", func(t *testing.T) {

		std.TestSetRealm(adminRealm)
		UnstakeToken(2, false)
		std.TestSkipHeights(1)

		// 1 block passed
		uassert.Equal(t, gns.TotalSupply(), uint64(100000299657526)) // + 14269406
		uassert.Equal(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
		uassert.Equal(t, gnsBalance(consts.STAKER_ADDR), uint64(1024301275))
		uassert.Equal(t, gnsBalance(consts.DEV_OPS), uint64(1481164342))
	})
}

func testCollectReward02(t *testing.T) {
	t.Run("collect reward from unstaked position should panic", func(t *testing.T) {
		uassert.PanicsWithMessage(
			t,
			"[GNOSWAP-STAKER-022] requested data not found || staker.gno__Deposits.Get() || tokenId(2) not found",
			func() {
				CollectReward(2, false)
			},
		)
	})
}
