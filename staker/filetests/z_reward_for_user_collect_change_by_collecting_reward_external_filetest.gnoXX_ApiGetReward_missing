// PKGPATH: gno.land/r/gnoswap/v1/staker_test

// POOLs:
// 1. gnot:gns:3000

// POSITIONs:
// 1. in-range
// 2. in-range

// REWARDs:
// - external bar ( bar:qux:100 )
// - external qux ( qux:gns:100 )

package staker_test

import (
	"std"
	"strconv"
	"time"

	"gno.land/p/demo/grc/grc721"

	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/gnoswap/v1/consts"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v1/gns"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"

	"gno.land/r/gnoswap/v1/gnft"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"
	sr "gno.land/r/gnoswap/v1/staker"
)

var (
	adminAddr  = consts.ADMIN
	adminUser  = common.AddrToUser(adminAddr)
	adminRealm = std.NewUserRealm(adminAddr)

	stakerAddr  = consts.STAKER_ADDR
	stakerUser  = common.AddrToUser(stakerAddr)
	stakerRealm = std.NewCodeRealm(consts.STAKER_PATH)

	wugnotAddr = consts.WUGNOT_ADDR

	fooPath = "gno.land/r/onbloc/foo"
	barPath = "gno.land/r/onbloc/bar"
	bazPath = "gno.land/r/onbloc/baz"
	quxPath = "gno.land/r/onbloc/qux"
	oblPath = "gno.land/r/onbloc/obl"

	gnsPath    = "gno.land/r/gnoswap/v1/gns"
	wugnotPath = "gno.land/r/demo/wugnot"

	fee100  uint32 = 100
	fee500  uint32 = 500
	fee3000 uint32 = 3000

	max_timeout int64 = 9999999999

	// external incentive deposit fee
	depositGnsAmount uint64 = 1_000_000_000 // 1_000 GNS

	TIMESTAMP_90DAYS  int64 = 90 * 24 * 60 * 60
	TIMESTAMP_180DAYS int64 = 180 * 24 * 60 * 60
	TIMESTAMP_365DAYS int64 = 365 * 24 * 60 * 60
)

func main() {
	testInit()
	testCreatePool()

	testCreateExternalIncentiveBar()
	testCreateExternalIncentiveQux()

	testMintAndStakeBarQuxPos01()
	testMintAndStakeBarQuxPos02()

	testMakeExternalBarAndQuxStart()

	testCollectRewardPos01()
}

func testInit() {
	std.TestSetRealm(adminRealm)

	// prepare wugnot
	std.TestIssueCoins(adminAddr, std.Coins{{"ugnot", 100_000_000_000_000}})
	banker := std.GetBanker(std.BankerTypeRealmSend)
	banker.SendCoins(adminAddr, wugnotAddr, std.Coins{{"ugnot", 50_000_000_000_000}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 50_000_000_000_000}}, nil)
	wugnot.Deposit()
	std.TestSetOrigSend(nil, nil)
}

func testCreatePool() {
	std.TestSetRealm(adminRealm)

	pl.SetPoolCreationFeeByAdmin(0)

	std.TestSkipHeights(1)
	pl.CreatePool(
		barPath,
		quxPath,
		fee100,
		common.TickMathGetSqrtRatioAtTick(0).ToString(), // 79228162514264337593543950337
	)
}

func testCreateExternalIncentiveBar() {
	std.TestSetRealm(adminRealm)

	bar.Approve(common.AddrToUser(consts.STAKER_ADDR), consts.UINT64_MAX)
	gns.Approve(common.AddrToUser(consts.STAKER_ADDR), depositGnsAmount)

	std.TestSkipHeights(1)
	sr.CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100",
		barPath,
		9000000000,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)
}

func testCreateExternalIncentiveQux() {
	std.TestSetRealm(adminRealm)

	qux.Approve(common.AddrToUser(consts.STAKER_ADDR), consts.UINT64_MAX)
	gns.Approve(common.AddrToUser(consts.STAKER_ADDR), depositGnsAmount)

	std.TestSkipHeights(1)
	sr.CreateExternalIncentive(
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/qux:100",
		quxPath,
		18000000000,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)
}

func testMintAndStakeBarQuxPos01() {
	std.TestSetRealm(adminRealm)

	bar.Approve(common.AddrToUser(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(common.AddrToUser(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSkipHeights(1)
	pn.Mint(
		barPath,
		quxPath,
		fee100,
		int32(-50),
		int32(50),
		"100",
		"100",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
	)

	gnft.Approve(stakerAddr, tokenIdFrom(1))
	sr.StakeToken(1)
}

func testMintAndStakeBarQuxPos02() {
	std.TestSetRealm(adminRealm)

	bar.Approve(common.AddrToUser(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(common.AddrToUser(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSkipHeights(1)
	pn.Mint(
		barPath,
		quxPath,
		fee100,
		int32(-50),
		int32(50),
		"100",
		"100",
		"0",
		"0",
		max_timeout,
		adminAddr,
		adminAddr,
	)

	gnft.Approve(stakerAddr, tokenIdFrom(2))
	sr.StakeToken(2)
}

func testMakeExternalBarAndQuxStart() {
	externalStartTime := int64(1234569600)
	nowTime := time.Now().Unix()
	timeLeft := externalStartTime - nowTime

	blockAvgTime := consts.BLOCK_GENERATION_INTERVAL
	blockLeft := timeLeft / blockAvgTime

	std.TestSkipHeights(int64(blockLeft)) // skip until external bar starts
	std.TestSkipHeights(10)               // skip bit more to see reward calculation

	/*
		std.TestSkipHeights(1)

		TODO: (after fixing unit test) check reward
		- position-01 and position-02 should have the same reward for bar and qux
	*/
}

func testCollectRewardPos01() {
	std.TestSetRealm(adminRealm)

	std.TestSkipHeights(1)
	sr.CollectReward(1, false)

	/*
		std.TestSkipHeights(1)

		TODO: (after fixing unit test) check reward
		- only position-01 reward collected (bar and qux)
		- reward for position-01 should be reset to 0 and increased
		- reward for position-02 should be increased
	*/
}

func tokenIdFrom(tokenId interface{}) grc721.TokenID {
	if tokenId == nil {
		panic("tokenId is nil")
	}

	switch tokenId.(type) {
	case string:
		return grc721.TokenID(tokenId.(string))
	case int:
		return grc721.TokenID(strconv.Itoa(tokenId.(int)))
	case uint64:
		return grc721.TokenID(strconv.Itoa(int(tokenId.(uint64))))
	case grc721.TokenID:
		return tokenId.(grc721.TokenID)
	default:
		panic("unsupported tokenId type")
	}
}
