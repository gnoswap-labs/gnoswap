package governance

import (
	"std"
	"strings"
	"testing"

	"gno.land/r/gnoswap/v2/consts"
	"gno.land/r/gnoswap/v2/gns"
	gs "gno.land/r/gnoswap/v2/gov/staker"

	u256 "gno.land/p/gnoswap/uint256"

	"gno.land/p/demo/testutils"
)

func TestProposeText(t *testing.T) {
	t.Run("ProposeText with insufficient delegation", func(t *testing.T) {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("The code did not panic")
			} else if !strings.Contains(string(r), "PROPOSER_HAS_NOT_ENOUGH_XGNS") {
				t.Errorf("Unexpected panic message: %v", r)
			}
		}()

		std.TestSetRealm(gsaRealm)
		ProposeText("title", "text")
	})

	t.Run("Successful text proposal", func(t *testing.T) {
		dummyAddr := testutils.TestAddress("dummyAddr")

		proposalsJson := GetProposals()
		if proposalsJson != `` {
			t.Errorf("Expected empty proposals, got %v", proposalsJson)
		}

		std.TestSetRealm(gsaRealm)

		gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
		gs.Delegate(gsa, uint64(1_000_000)) // self delegate

		gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(2_000_000))
		gs.Delegate(dummyAddr, uint64(2_000_000)) // delegate to dummy
		std.TestSkipHeights(11)

		proposalID := ProposeText("test_title", "test_description")
		if proposalID != 1 {
			t.Errorf("Expected proposal ID to be 1, got %d", proposalID)
		}

		proposalsJson = GetProposals()
		if proposalsJson != `{"height":"134","now":"1234567912","proposals":[{"id":"1","configVersion":"1","proposer":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","status":"eyJDcmVhdGVkQXQiOiIxMjM0NTY3OTEyIiwiVXBjb21pbmciOiJ0cnVlIiwiQWN0aXZlIjoiZmFsc2UiLCJWb3RpbmdTdGFydCI6IjEyMzQ1Njc5MjIiLCJWb3RpbmdFbmQiOiIxMjM0NTY3OTUyIiwiUGFzc2VkIjoiZmFsc2UiLCJQYXNzZWRBdCI6IjAiLCJSZWplY3RlZCI6ImZhbHNlIiwiUmVqZWN0ZWRBdCI6IjAiLCJDYW5jZWxlZCI6ImZhbHNlIiwiQ2FuY2VsZWRBdCI6IjAiLCJFeGVjdXRlZCI6ImZhbHNlIiwiRXhlY3V0ZWRBdCI6IjAiLCJFeHBpcmVkIjoiZmFsc2UiLCJFeHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiIxNTAwMDAwIiwibWF4IjoiMzAwMDAwMCIsInllcyI6IjAiLCJubyI6IjAifQ==","extra":""}]}` {
			t.Errorf("Incorrect proposals json: %v", proposalsJson)
		}

		votesJsonGsa := GetVotesByAddress(gsa)
		if votesJsonGsa != `` {
			t.Errorf("Expected empty votes for gsa, got %v", votesJsonGsa)
		}

		votesJsonDummy := GetVotesByAddress(dummyAddr)
		if votesJsonDummy != `` {
			t.Errorf("Expected empty votes for dummy, got %v", votesJsonDummy)
		}
	})
}

func TestVote(t *testing.T) {
	dummyAddr := testutils.TestAddress("dummyAddr")
	dummyRealm := std.NewUserRealm(dummyAddr)

	t.Run("Vote non existent proposal", func(t *testing.T) {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("The code did not panic")
			} else if !strings.Contains(string(r), "does not exist") {
				t.Errorf("Unexpected panic message: %v", r)
			}
		}()

		Vote(uint64(123), true)
	})

	proposalId := uint64(1) // text proposal id

	t.Run("Vote before voting period", func(t *testing.T) {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("The code did not panic")
			} else if !strings.Contains(string(r), "not started yet") {
				t.Errorf("Unexpected panic message: %v", r)
			}
		}()

		Vote(proposalId, true)
	})

	t.Run("Successful vote YES", func(t *testing.T) {
		std.TestSkipHeights(11)

		std.TestSetRealm(gsaRealm)
		voteKey := Vote(proposalId, true)
		voted := votes[voteKey]
		if voted != true {
			t.Errorf("Vote not recorded correctly")
		}

		proposal := proposals[proposalId]
		if proposal.Yea.Cmp(u256.NewUint(1_000_000)) != 0 {
			t.Errorf("Vote count not updated correctly", proposal.Yea.ToString())
		}

		if proposal.Nay.Cmp(u256.NewUint(0)) != 0 {
			t.Errorf("Vote count not updated correctly")
		}

		if proposal.ExecutionState.Upcoming {
			t.Errorf("Proposal should not be upcoming after vote")
		}

		if !proposal.ExecutionState.Active {
			t.Errorf("Proposal should be active after vote")
		}

		proposalsJson := GetProposals()
		if proposalsJson != `{"height":"145","now":"1234567934","proposals":[{"id":"1","configVersion":"1","proposer":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","status":"eyJDcmVhdGVkQXQiOiIxMjM0NTY3OTEyIiwiVXBjb21pbmciOiJmYWxzZSIsIkFjdGl2ZSI6InRydWUiLCJWb3RpbmdTdGFydCI6IjEyMzQ1Njc5MjIiLCJWb3RpbmdFbmQiOiIxMjM0NTY3OTUyIiwiUGFzc2VkIjoiZmFsc2UiLCJQYXNzZWRBdCI6IjAiLCJSZWplY3RlZCI6ImZhbHNlIiwiUmVqZWN0ZWRBdCI6IjAiLCJDYW5jZWxlZCI6ImZhbHNlIiwiQ2FuY2VsZWRBdCI6IjAiLCJFeGVjdXRlZCI6ImZhbHNlIiwiRXhlY3V0ZWRBdCI6IjAiLCJFeHBpcmVkIjoiZmFsc2UiLCJFeHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiIxNTAwMDAwIiwibWF4IjoiMzAwMDAwMCIsInllcyI6IjEwMDAwMDAiLCJubyI6IjAifQ==","extra":""}]}` {
			t.Errorf("Incorrect proposals json: %v", proposalsJson)
		}

		gsaDelegationStat := gs.GetModifiedDelegationHistoryByAddress(gsa)
		shouldEQ(t, gsaDelegationStat, `{"height":"145","now":"1234567934","delegationModifiedHistory":[{"from":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","to":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","delegatedHeight":"123","delegatedTimestamp":"1234567890","delegatedAmount":"1000000","undelegatedHeight":"0","undelegatedTimestamp":"0","undelegatedAmount":"0"}]}`)

		votesJsonGsa := GetVotesByAddress(gsa)
		if votesJsonGsa != `{"height":"145","now":"1234567934","votes":[{"proposalId":"1","voteYes":"true","voteWeight":"1000000","voteHeight":"145","voteTimestamp":"1234567934"}]}` {
			t.Errorf("Incorrect votes json: %v", votesJsonGsa)
		}

		std.TestSetRealm(gsaRealm)
		std.TestSkipHeights(1)
		gs.Undelegate(dummyAddr, uint64(1_500_000)) // undelegate to dummy (75% of origin delegated amount)

		dummyDelegationStat := gs.GetModifiedDelegationHistoryByAddress(dummyAddr)
		shouldEQ(t, dummyDelegationStat, `{"height":"146","now":"1234567936","delegationModifiedHistory":[{"from":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","to":"g1v36k6mteg9jxgujlta047h6lta047h6lydhz9l","delegatedHeight":"123","delegatedTimestamp":"1234567890","delegatedAmount":"2000000","undelegatedHeight":"146","undelegatedTimestamp":"1234567936","undelegatedAmount":"1500000"}]}`)

		std.TestSetRealm(dummyRealm)
		voteKey = Vote(proposalId, false)
		voted = votes[voteKey]
		if voted != false {
			t.Errorf("Vote not recorded correctly")
		}

		votesJsonDummy := GetVotesByAddress(dummyAddr)
		if votesJsonDummy != `{"height":"146","now":"1234567936","votes":[{"proposalId":"1","voteYes":"false","voteWeight":"500000","voteHeight":"146","voteTimestamp":"1234567936"}]}` {
			t.Errorf("Incorrect votes json: %v", votesJsonDummy)
		}
	})
}
