package governance

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/consts"
	"gno.land/r/gnoswap/v2/gns"
	gs "gno.land/r/gnoswap/v2/gov/staker"
)

func init() {
	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	configVersions[1] = config
}

func TestProposeText(t *testing.T) {
	proposeText(t)
	vote(t)
	// cancel(t)
	// execute(t)
}

func proposeText(t *testing.T) {
	t.Run("ProposeText with insufficient delegation", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t, "PROPOSER_HAS_NOT_ENOUGH_XGNS", func() {
			ProposeText("title", "text")
		})
	})

	t.Run("Successful text proposal", func(t *testing.T) {
		dummyAddr := testutils.TestAddress("dummyAddr")

		proposalsJson := GetProposals()
		uassert.Equal(t, proposalsJson, ``)

		std.TestSetRealm(adminRealm)

		gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
		gs.Delegate(admin, uint64(1_000_000)) // self delegate

		gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(2_000_000))
		gs.Delegate(dummyAddr, uint64(2_000_000)) // delegate to dummy
		std.TestSkipHeights(11)

		proposalID := ProposeText("test_title", "test_description")
		uassert.Equal(t, proposalID, uint64(1))

		proposalsJson = GetProposals()
		uassert.Equal(t, proposalsJson, `{"height":"134","now":"1234567912","proposals":[{"id":"1","configVersion":"1","proposer":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","status":"eyJDcmVhdGVkQXQiOiIxMjM0NTY3OTEyIiwiVXBjb21pbmciOiJ0cnVlIiwiQWN0aXZlIjoiZmFsc2UiLCJWb3RpbmdTdGFydCI6IjEyMzQ1Njc5MjIiLCJWb3RpbmdFbmQiOiIxMjM0NTY3OTUyIiwiUGFzc2VkIjoiZmFsc2UiLCJQYXNzZWRBdCI6IjAiLCJSZWplY3RlZCI6ImZhbHNlIiwiUmVqZWN0ZWRBdCI6IjAiLCJDYW5jZWxlZCI6ImZhbHNlIiwiQ2FuY2VsZWRBdCI6IjAiLCJFeGVjdXRlZCI6ImZhbHNlIiwiRXhlY3V0ZWRBdCI6IjAiLCJFeHBpcmVkIjoiZmFsc2UiLCJFeHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiIxNTAwMDAwIiwibWF4IjoiMzAwMDAwMCIsInllcyI6IjAiLCJubyI6IjAifQ==","extra":""}]}`)

		votesJsonAdmin := GetVotesByAddress(admin)
		uassert.Equal(t, votesJsonAdmin, ``)

		votesJsonDummy := GetVotesByAddress(dummyAddr)
		uassert.Equal(t, votesJsonDummy, ``)
	})
}

func vote(t *testing.T) {
	dummyAddr := testutils.TestAddress("dummyAddr")
	dummyRealm := std.NewUserRealm(dummyAddr)

	t.Run("Vote non existent proposal", func(t *testing.T) {
		std.TestSetRealm(dummyRealm)
		uassert.PanicsWithMessage(t, "Proposal 123 does not exist", func() {
			Vote(uint64(123), true)
		})
	})

	t.Run("vote with only delegated", func(t *testing.T) {
		std.TestSkipHeights(11)
		std.TestSetRealm(dummyRealm)
		Vote(uint64(1), true)

		proposal := proposals[1]
		uassert.Equal(t, "2000000", proposal.Yea.ToString())
		uassert.Equal(t, "0", proposal.Nay.ToString())

		uassert.Equal(t, false, proposal.ExecutionState.Upcoming)
		uassert.Equal(t, true, proposal.ExecutionState.Active)

		proposalsJson := GetProposals()
		uassert.Equal(t, proposalsJson, `{"height":"145","now":"1234567934","proposals":[{"id":"1","configVersion":"1","proposer":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","status":"eyJDcmVhdGVkQXQiOiIxMjM0NTY3OTEyIiwiVXBjb21pbmciOiJmYWxzZSIsIkFjdGl2ZSI6InRydWUiLCJWb3RpbmdTdGFydCI6IjEyMzQ1Njc5MjIiLCJWb3RpbmdFbmQiOiIxMjM0NTY3OTUyIiwiUGFzc2VkIjoiZmFsc2UiLCJQYXNzZWRBdCI6IjAiLCJSZWplY3RlZCI6ImZhbHNlIiwiUmVqZWN0ZWRBdCI6IjAiLCJDYW5jZWxlZCI6ImZhbHNlIiwiQ2FuY2VsZWRBdCI6IjAiLCJFeGVjdXRlZCI6ImZhbHNlIiwiRXhlY3V0ZWRBdCI6IjAiLCJFeHBpcmVkIjoiZmFsc2UiLCJFeHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiIxNTAwMDAwIiwibWF4IjoiMzAwMDAwMCIsInllcyI6IjIwMDAwMDAiLCJubyI6IjAifQ==","extra":""}]}`)

		adminDelegationStat := gs.GetModifiedDelegationHistoryByAddress(admin)
		uassert.Equal(t, adminDelegationStat, `{"height":"145","now":"1234567934","delegationModifiedHistory":[{"from":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","to":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","delegatedHeight":"123","delegatedTimestamp":"1234567890","delegatedAmount":"1000000","undelegatedHeight":"0","undelegatedTimestamp":"0","undelegatedAmount":"0"}]}`)
	})
}
