package governance

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	u256 "gno.land/p/gnoswap/uint256"

	"gno.land/r/gnoswap/v2/consts"
	"gno.land/r/gnoswap/v2/gns"
	gs "gno.land/r/gnoswap/v2/gov/staker"
)

func init() {
	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	configVersions[1] = config
}

func TestProposeText(t *testing.T) {
	proposeText(t)
	vote(t)
	cancel(t)
	execute(t)
}

func proposeText(t *testing.T) {
	t.Run("ProposeText with insufficient delegation", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-005] not enough balance || governance.gno__ProposeText() || proposer(g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c) has not enough xGNS, balance(0), wanted(100)",
			func() {
				ProposeText("title", "text")
			})
	})

	t.Run("Successful text proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		proposalsJson := GetProposals()
		uassert.Equal(t, proposalsJson, ``)

		std.TestSetRealm(adminRealm)
		gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
		gs.Delegate(admin, uint64(1_000_000))
		std.TestSkipHeights(11) // VotingWeightSmoothingDuration is 10 block

		proposalID := ProposeText("test_title", "test_description")
		uassert.Equal(t, proposalID, uint64(1))

		proposal, exist := proposals[proposalID]
		uassert.True(t, exist)
		uassert.Equal(t, proposal.Proposer, admin)
		uassert.Equal(t, proposal.ProposalType, "TEXT")
		uassert.True(t, proposal.ExecutionState.Created)
		uassert.True(t, proposal.ExecutionState.Upcoming)
		uassert.Equal(t, proposal.Yea.ToString(), "0")
		uassert.Equal(t, proposal.Nay.ToString(), "0")
		uassert.Equal(t, proposal.ConfigVersion, uint64(1))
		uassert.Equal(t, proposal.Title, "test_title")
		uassert.Equal(t, proposal.Description, "test_description")

		proposalsJson = GetProposals()
		uassert.Equal(t, proposalsJson, `{"height":"134","now":"1234567912","proposals":[{"id":"1","configVersion":"1","proposer":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","status":"eyJDcmVhdGVkQXQiOiIxMjM0NTY3OTEyIiwiVXBjb21pbmciOiJ0cnVlIiwiQWN0aXZlIjoiZmFsc2UiLCJWb3RpbmdTdGFydCI6IjEyMzQ1Njc5MjIiLCJWb3RpbmdFbmQiOiIxMjM0NTY3OTUyIiwiUGFzc2VkIjoiZmFsc2UiLCJQYXNzZWRBdCI6IjAiLCJSZWplY3RlZCI6ImZhbHNlIiwiUmVqZWN0ZWRBdCI6IjAiLCJDYW5jZWxlZCI6ImZhbHNlIiwiQ2FuY2VsZWRBdCI6IjAiLCJFeGVjdXRlZCI6ImZhbHNlIiwiRXhlY3V0ZWRBdCI6IjAiLCJFeHBpcmVkIjoiZmFsc2UiLCJFeHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiI1MDAwMDAiLCJtYXgiOiIxMDAwMDAwIiwieWVzIjoiMCIsIm5vIjoiMCJ9","extra":""}]}`)

		votesJson := GetVotesByAddress(admin)
		uassert.Equal(t, votesJson, ``)
	})
}

func vote(t *testing.T) {
	t.Run("Vote non existent proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-004] data not found || vote.gno__Vote() || proposalId(123) does not exist",
			func() {
				Vote(uint64(123), true)
			})
	})

	proposalId := uint64(1) // text proposal id

	t.Run("Vote before voting period", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-006] unable to vote before starting || vote.gno__Vote() || voting has not started yet. now(1234567912) < votingStart(1234567922)",
			func() {
				Vote(proposalId, true)
			})
	})

	t.Run("Successful vote YES", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(5)

		voteKey := Vote(proposalId, true)
		voted := votes[voteKey]
		uassert.True(t, voted)

		proposal := proposals[proposalId]

		uassert.Equal(t, proposal.Yea.Cmp(u256.NewUint(1_000_000)), 0)
		uassert.Equal(t, proposal.Nay.ToString(), "0")

		uassert.False(t, proposal.ExecutionState.Upcoming)
		uassert.True(t, proposal.ExecutionState.Active)

		proposalsJson := GetProposals()
		uassert.Equal(t, proposalsJson, `{"height":"139","now":"1234567922","proposals":[{"id":"1","configVersion":"1","proposer":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","status":"eyJDcmVhdGVkQXQiOiIxMjM0NTY3OTEyIiwiVXBjb21pbmciOiJmYWxzZSIsIkFjdGl2ZSI6InRydWUiLCJWb3RpbmdTdGFydCI6IjEyMzQ1Njc5MjIiLCJWb3RpbmdFbmQiOiIxMjM0NTY3OTUyIiwiUGFzc2VkIjoiZmFsc2UiLCJQYXNzZWRBdCI6IjAiLCJSZWplY3RlZCI6ImZhbHNlIiwiUmVqZWN0ZWRBdCI6IjAiLCJDYW5jZWxlZCI6ImZhbHNlIiwiQ2FuY2VsZWRBdCI6IjAiLCJFeGVjdXRlZCI6ImZhbHNlIiwiRXhlY3V0ZWRBdCI6IjAiLCJFeHBpcmVkIjoiZmFsc2UiLCJFeHBpcmVkQXQiOiIwIn0=","type":"TEXT","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiI1MDAwMDAiLCJtYXgiOiIxMDAwMDAwIiwieWVzIjoiMTAwMDAwMCIsIm5vIjoiMCJ9","extra":""}]}`)

		votesJson := GetVotesByAddress(admin)
		uassert.Equal(t, votesJson, `{"height":"139","now":"1234567922","votes":[{"proposalId":"1","voteYes":"true","voteWeight":"1000000","voteHeight":"139","voteTimestamp":"1234567922"}]}`)

		addrVoteJson := GetVoteByAddressFromProposalById(admin, proposalId)
		uassert.Equal(t, addrVoteJson, `{"height":"139","now":"1234567922","votes":[{"proposalId":"1","voteYes":"true","voteWeight":"1000000","voteHeight":"139","voteTimestamp":"1234567922"}]}`)
	})

	t.Run("Vote twice", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-009] already voted || vote.gno__Vote() || user(g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c) has already voted on proposalId(1)",
			func() {
				Vote(proposalId, true)
			})
	})

	t.Run("Vote after voting period", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(2001)

		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-007] unable to vote after ending || vote.gno__Vote() || voting has ended. now(1234571924) >= votingEnd(1234567952)",
			func() {
				Vote(proposalId, true)
			})
	})

	t.Run("Proposal status after voting period", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		updateProposalsState()

		proposal := proposals[proposalId]
		uassert.False(t, proposal.ExecutionState.Active)

		uassert.False(t, proposal.ExecutionState.Rejected)
		uassert.False(t, proposal.ExecutionState.Executed)
	})
}

func cancel(t *testing.T) {
	t.Run("Cancel non existent proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-004] data not found || vote.gno__Cancel() || proposalId(123) does not exist",
			func() {
				Cancel(uint64(123))
			})
	})

	t.Run("new text proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		proposalId := ProposeText("test2_title", "test2_description")
		std.TestSkipHeights(1)
	})

	t.Run("Cancel new text proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(1)
		Cancel(proposalId)

		proposal := proposals[proposalId]
		uassert.True(t, proposal.ExecutionState.Canceled)
		uassert.False(t, proposal.ExecutionState.Active)
		uassert.False(t, proposal.ExecutionState.Upcoming)
	})

	t.Run("Cancel already canceled proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-011] already canceled proposal || vote.gno__Cancel() || proposalId(2) has already canceled",
			func() {
				Cancel(proposalId)
			})
	})

	t.Run("Cancel after voting period", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		proposalId = ProposeText("test3_title", "test3_description")
		std.TestSkipHeights(11)

		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-012] unable to cancel voting proposal || vote.gno__Cancel() || voting has already started for proposalId(3)",
			func() {
				Cancel(proposalId)
			})
	})
}

func execute(t *testing.T) {
	t.Run("Execute non existent proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-004] data not found || execute.gno__Execute() || proposalId(123) does not exist, failed to execute",
			func() {
				Execute(uint64(123))
			})
	})

	t.Run("Execute text proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(11)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-014] text proposal not executable || execute.gno__Execute() || proposalId(1) is a TEXT proposal, not executable",
			func() {
				Execute(uint64(1))
			})
	})
}
