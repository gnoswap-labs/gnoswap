package governance

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/consts"
	gns "gno.land/r/gnoswap/v2/gns"

	cn "gno.land/r/gnoswap/v2/common"
	en "gno.land/r/gnoswap/v2/emission"
	gs "gno.land/r/gnoswap/v2/gov/staker"
	pl "gno.land/r/gnoswap/v2/pool"
	pf "gno.land/r/gnoswap/v2/protocol_fee"
	rr "gno.land/r/gnoswap/v2/router"
	sr "gno.land/r/gnoswap/v2/staker"
)

func init() {
	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	configVersions[1] = config
}

func TestProposeParameterChange_Emission_ChangeDistributionPct(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
	gs.Delegate(admin, uint64(1_000_000))
	std.TestSkipHeights(5) // VotingWeightSmoothingDuration

	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/emission*EXE*ChangeDistributionPct*EXE*1,7000,2,1500,3,1000,4,500",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)
	std.TestSkipHeights(16) // ends voting period

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(6)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, en.GetDistributionPct(1), uint64(7000))
		uassert.Equal(t, en.GetDistributionPct(2), uint64(1500))
		uassert.Equal(t, en.GetDistributionPct(3), uint64(1000))
		uassert.Equal(t, en.GetDistributionPct(4), uint64(500))
	})
}

func TestProposeParameterChange_GNS_SetAvgBlockTimeInMs(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/gns*EXE*SetAvgBlockTimeInMs*EXE*5000",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, gns.GetAvgBlockTimeInMs(), int64(5000))
	})
}

func TestProposeParameterChange_GOV_reconfigure(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/gov/governance*EXE*Reconfigure*EXE*123,456,789,1234,5678,12345,67890",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, GetConfigVersion(0).VotingStartDelay, uint64(123))
		uassert.Equal(t, GetConfigVersion(0).VotingPeriod, uint64(456))
		uassert.Equal(t, GetConfigVersion(0).VotingWeightSmoothingDuration, uint64(789))
		uassert.Equal(t, GetConfigVersion(0).Quorum, uint64(1234))
		uassert.Equal(t, GetConfigVersion(0).ProposalCreationThreshold, uint64(5678))
		uassert.Equal(t, GetConfigVersion(0).ExecutionDelay, uint64(12345))
		uassert.Equal(t, GetConfigVersion(0).ExecutionWindow, uint64(67890))

		// overwrite latest config version to old one for further tests
		config.VotingStartDelay = 10
		config.VotingPeriod = 30
		config.VotingWeightSmoothingDuration = 10
		config.Quorum = 50
		config.ProposalCreationThreshold = 100
		config.ExecutionDelay = 10
		config.ExecutionWindow = 1000
		configVersions[uint64(2)] = config
	})
}

func TestProposeParameterChange_Pool_SetFeeProtocol(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/pool*EXE*SetFeeProtocol*EXE*4,4",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, gns.GetAvgBlockTimeInMs(), int64(5000))
	})
}

func TestProposeParameterChange_Pool_SetPoolCreationFee(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/pool*EXE*SetPoolCreationFee*EXE*500",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, pl.GetPoolCreationFee(), uint64(500))
	})
}

func TestProposeParameterChange_Pool_SetWithdrawalFee(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/pool*EXE*SetWithdrawalFee*EXE*600",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, pl.GetWithdrawalFee(), uint64(600))
	})
}

func TestProposeParameterChange_ProtocolFee_SetDevOpsPct(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/protocol_fee*EXE*SetDevOpsPct*EXE*900",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, pf.GetDevOpsPct(), uint64(900))
	})
}

func TestProposeParameterChange_Router_SetSwapFee(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/router*EXE*SetSwapFee*EXE*400",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, rr.GetSwapFee(), uint64(400))
	})
}

func TestProposeParameterChange_Staker_SetDepositGnsAmount(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/staker*EXE*SetDepositGnsAmount*EXE*400",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, sr.GetDepositGnsAmount(), uint64(400))
	})
}

func TestProposeParameterChange_Staker_SetPoolTier(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/staker*EXE*SetPoolTier*EXE*gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:100,1",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		// create sample pool
		std.TestSetRealm(adminRealm)
		pl.SetPoolCreationFeeByAdmin(0)
		pl.CreatePool(consts.WUGNOT_PATH, consts.GNS_PATH, 100, "79228162514264337593543950337")

		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		after := sr.GetPoolsWithTier()
		uassert.Equal(t, len(after), 2)
		uassert.Equal(t, after[0], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000_1")
		uassert.Equal(t, after[1], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:100_1")
	})
}

func TestProposeParameterChange_Staker_ChangePoolTier(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/staker*EXE*ChangePoolTier*EXE*gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:100,3",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		after := sr.GetPoolsWithTier()
		uassert.Equal(t, len(after), 2)
		uassert.Equal(t, after[0], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000_1")
		uassert.Equal(t, after[1], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:100_3")
	})
}

func TestProposeParameterChange_Staker_RemovePoolTier(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/staker*EXE*RemovePoolTier*EXE*gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:100",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		after := sr.GetPoolsWithTier()
		uassert.Equal(t, len(after), 1)
		uassert.Equal(t, after[0], "gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000_1")
	})
}

func TestProposeParameterChange_Staker_SetUnstakingFee(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/staker*EXE*SetUnstakingFee*EXE*200",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, sr.GetUnstakingFee(), uint64(200))
	})
}

func TestProposeParameterChange_Staker_SetWarmUp(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/staker*EXE*SetWarmUp*EXE*100,1000",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.Equal(t, sr.GetWarmUp(100), int64(1000))
	})
}

func TestProposeParameterChange_Common_SetHalt(t *testing.T) {
	std.TestSkipHeights(5)

	std.TestSetRealm(adminRealm)
	proposalId := ProposeParameterChange(
		"test_title",
		"test_description",
		uint64(1),
		"gno.land/r/gnoswap/v2/common*EXE*SetHalt*EXE*true",
	)

	std.TestSkipHeights(5)
	Vote(proposalId, true)

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSkipHeights(20)
		std.TestSetRealm(govRealm)
		Execute(proposalId)

		uassert.True(t, cn.GetHalt())
	})
}
