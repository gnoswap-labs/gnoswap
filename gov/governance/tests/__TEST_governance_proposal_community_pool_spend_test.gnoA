package governance

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/consts"
	gns "gno.land/r/gnoswap/v2/gns"

	gs "gno.land/r/gnoswap/v2/gov/staker"
)

var (
	to        = std.Address(testutils.TestAddress("to"))
	tokenPath = consts.GNS_PATH
)

func init() {
	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	configVersions[1] = config
}

func TestCommunityPoolSpend(t *testing.T) {
	proposeCommunityPoolSpend(t)
	passAndExecute(t)
	rejectAndExecute(t)
	passAndExpire(t)

}

func proposeCommunityPoolSpend(t *testing.T) {
	t.Run("propose with insufficient delegation", func(t *testing.T) {
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-005] not enough balance || governance.gno__ProposeCommunityPoolSpend() || proposer(g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm) has not enough xGNS, balance(0), wanted(100)",
			func() {
				ProposeCommunityPoolSpend("test_title", "test_description", to, tokenPath, 100)
			},
		)
	})

	t.Run("successful proposal", func(t *testing.T) {
		proposalsJson := GetProposals()
		if proposalsJson != `` {
			t.Errorf("Expected empty proposals, got %v", proposalsJson)
		}

		std.TestSetRealm(adminRealm)
		gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
		gs.Delegate(admin, uint64(1_000_000))
		std.TestSkipHeights(11) // VotingWeightSmoothingDuration

		proposalID := ProposeCommunityPoolSpend("test_title", "test_description", to, tokenPath, 100)
		if proposalID != 1 {
			t.Errorf("Expected proposal ID to be 1, got %d", proposalID)
		}

		proposal, exist := proposals[proposalID]
		if !exist {
			t.Errorf("Proposal not found after creation")
		}

		uassert.Equal(t, proposal.Proposer, admin)
		uassert.Equal(t, proposal.ProposalType, "COMMUNITY_POOL_SPEND")
		uassert.True(t, proposal.ExecutionState.Created)
		uassert.True(t, proposal.ExecutionState.Upcoming)
		uassert.Equal(t, proposal.Yea.ToString(), "0")
		uassert.Equal(t, proposal.Nay.ToString(), "0")
		uassert.Equal(t, proposal.ConfigVersion, uint64(1))
		uassert.Equal(t, proposal.Title, "test_title")
		uassert.Equal(t, proposal.Description, "test_description")
	})
}

func passAndExecute(t *testing.T) {
	proposalId := uint64(1)

	t.Run("did not pass yet", func(t *testing.T) {
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-015] unable to execute proposal || execute.gno__Execute() || proposalId(1) has not passed, failed to execute",
			func() {
				std.TestSetRealm(adminRealm)
				Execute(proposalId)
			})
	})

	t.Run("vote proposal to make it passed", func(t *testing.T) {
		std.TestSkipHeights(11)
		std.TestSetRealm(adminRealm)
		voteKey := Vote(proposalId, true)
		voted := votes[voteKey]
	})

	t.Run("check status before execution", func(t *testing.T) {
		std.TestSkipHeights(100) // ends voting period + skip execution delay
		updateProposalsState()

		proposalsJson := GetProposals()
		uassert.Equal(t, `{"height":"245","now":"1234568134","proposals":[{"id":"1","configVersion":"1","proposer":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","status":"eyJDcmVhdGVkQXQiOiIxMjM0NTY3OTEyIiwiVXBjb21pbmciOiJmYWxzZSIsIkFjdGl2ZSI6ImZhbHNlIiwiVm90aW5nU3RhcnQiOiIxMjM0NTY3OTIyIiwiVm90aW5nRW5kIjoiMTIzNDU2Nzk1MiIsIlBhc3NlZCI6InRydWUiLCJQYXNzZWRBdCI6IjEyMzQ1NjgxMzQiLCJSZWplY3RlZCI6ImZhbHNlIiwiUmVqZWN0ZWRBdCI6IjAiLCJDYW5jZWxlZCI6ImZhbHNlIiwiQ2FuY2VsZWRBdCI6IjAiLCJFeGVjdXRlZCI6ImZhbHNlIiwiRXhlY3V0ZWRBdCI6IjAiLCJFeHBpcmVkIjoiZmFsc2UiLCJFeHBpcmVkQXQiOiIwIn0=","type":"COMMUNITY_POOL_SPEND","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiI1MDAwMDAiLCJtYXgiOiIxMDAwMDAwIiwieWVzIjoiMTAwMDAwMCIsIm5vIjoiMCJ9","extra":"eyJ0byI6ImcxdzNoNDdoNmx0YTA0N2g2bHRhMDQ3aDZsdGEwNDdoNmxma250cDciLCJ0b2tlblBhdGgiOiJnbm8ubGFuZC9yL2dub3N3YXAvdjIvZ25zIiwiYW1vdW50IjoiMTAwIn0="}]}`, proposalsJson)

		proposal := proposals[proposalId]
		uassert.True(t, proposal.ExecutionState.Passed)
	})

	t.Run("successful execute proposal", func(t *testing.T) {
		// to execute community pool spend proposal, we need to have enough balance in community pool
		std.TestSetRealm(adminRealm)

		uassert.Equal(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(87043376))
		uassert.Equal(t, gns.BalanceOf(a2u(to)), uint64(0))

		Execute(proposalId)
		std.TestSkipHeights(1)

		uassert.Equal(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(87043276))
		uassert.Equal(t, gns.BalanceOf(a2u(to)), uint64(100))

		// status
		proposal := proposals[proposalId]
		uassert.True(t, proposal.ExecutionState.Executed)
	})

	t.Run("already executed", func(t *testing.T) {
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-015] unable to execute proposal || execute.gno__Execute() || proposalId(1) has already executed(true) or canceled(false) or rejected(false), failed to execute",
			func() {
				Execute(proposalId)
			})
	})
}

func rejectAndExecute(t *testing.T) {
	t.Run("prpoose new community pool spend", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		proposalId := ProposeCommunityPoolSpend("test_title", "test_description", to, tokenPath, 50) // create new proposal
	})

	t.Run("vote to reject", func(t *testing.T) {
		std.TestSkipHeights(11)
		std.TestSetRealm(adminRealm)
		Vote(proposalId, false) // vote Nay
	})

	t.Run("check status after rejected", func(t *testing.T) {
		std.TestSkipHeights(100) // ends voting period

		updateProposalsState() // proposal rejected
		proposal := proposals[proposalId]

		uassert.True(t, proposal.ExecutionState.Rejected)
	})

	t.Run("execute rejected proposal", func(t *testing.T) {
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-015] unable to execute proposal || execute.gno__Execute() || proposalId(2) has already executed(false) or canceled(false) or rejected(true), failed to execute",
			func() {
				Execute(proposalId)
			})
	})
}

func passAndExpire(t *testing.T) {
	t.Run("prpoose new community pool spend", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		proposalId := ProposeCommunityPoolSpend("test_title", "test_description", to, tokenPath, 50) // create new proposal
	})

	t.Run("vote to pass", func(t *testing.T) {
		std.TestSkipHeights(11)
		std.TestSetRealm(adminRealm)
		Vote(proposalId, true)
	})

	t.Run("check status after pass and expire", func(t *testing.T) {
		std.TestSkipHeights(100) // ends voting period
		updateProposalsState()   // proposal passed

		std.TestSkipHeights(10)   // execution delay
		std.TestSkipHeights(1000) // execution window
		std.TestSkipHeights(1)    // expired
		updateProposalsState()

		proposal := proposals[proposalId]

		uassert.True(t, proposal.ExecutionState.Passed)
		uassert.True(t, proposal.ExecutionState.Expired)

		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-017] proposal execution time expired || execute.gno__Execute() || EXECUTION_WINDOW_OVER (now(1234570602) >= windowEnd(1234569408))",
			func() {
				Execute(proposalId)
			})
	})
}
