package governance

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/gnoswap/v2/gov/xgns"

	lp "gno.land/r/gnoswap/v2/launchpad"

	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/onbloc/obl"
)

func init() {
	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	configVersions[1] = config
}

var (
	dummyToAddr  = testutils.TestAddress("dummyTo")
	dummyToRealm = std.NewUserRealm(dummyToAddr)

	dummyAddr  = testutils.TestAddress("dummy")
	dummyRealm = std.NewUserRealm(dummyAddr)

	reDelegate = testutils.TestAddress("reDelegate")

	// launchpad
	projectAddr  = testutils.TestAddress("projectAddr")
	projectRealm = std.NewUserRealm(projectAddr)

	user01      = testutils.TestAddress("user01")
	user01Realm = std.NewUserRealm(user01)
)

func TestVoteWithoutLaunchpadXGns(t *testing.T) {
	checkInitialGnsAndXGns(t)
	launchPad(t)
}

func checkInitialGnsAndXGns(t *testing.T) {
	t.Run("check current gns and xgns (total/voting) supply", func(t *testing.T) {
		gnsTotal := gns.TotalSupply()
		adminGnsBalance := gns.BalanceOf(a2u(admin))
		xgnsTotal := xgns.TotalSupply()
		xgnsVoting := xgns.VotingSupply()
		uassert.Equal(t, gnsTotal, uint64(100_000_000_000_000))
		uassert.Equal(t, adminGnsBalance, uint64(100_000_000_000_000))
		uassert.Equal(t, xgnsTotal, uint64(0))
		uassert.Equal(t, xgnsVoting, uint64(0))
	})
}

func launchPad(t *testing.T) {
	t.Run("launchpad project create", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		obl.Approve(a2u(consts.LAUNCHPAD_ADDR), 1_000_000_000)
		projectId := lp.CreateProject(
			"OBL PROTOCOL",
			oblPath,
			projectAddr,
			uint64(1_000_000_000), // 1000000000
			"",
			"",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 5 block later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/obl:123`)
		std.TestSkipHeights(10) // active project
	})

	t.Run("deposit gns", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		gns.Transfer(a2u(user01), uint64(1_000_000)) // to deposit

		std.TestSetRealm(user01Realm)
		gns.Approve(a2u(consts.LAUNCHPAD_ADDR), uint64(1_000_000))

		lp.DepositGns(
			`gno.land/r/onbloc/obl:123:30`,
			uint64(1_000_000), // this xGNS can not be used for voting
		)
		std.TestSkipHeights(1)
	})

	t.Run("check xGNS", func(t *testing.T) {
		xgnsTotal := xgns.TotalSupply()
		xgnsVoting := xgns.VotingSupply()
		uassert.Equal(t, xgnsTotal, uint64(1_000_000))
		uassert.Equal(t, xgnsVoting, uint64(0))
	})
}
