package governance

import (
	"std"
	"strings"
	"testing"
)

func TestReconfigure(t *testing.T) {
	t.Run("Successful reconfiguration", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		newConfigParams := "200*GOV*2000*GOV*200*GOV*1000*GOV*200*GOV*200*GOV*2000"
		params := strings.Split(newConfigParams, "*GOV*")
		newVersion := ReconfigureByAdmin(handleGovernanceReconfigure(params))

		if newVersion != 2 {
			t.Errorf("Expected new version to be 2, got %d", newVersion)
		}

		if len(configVersions) != 2 {
			t.Errorf("Expected config versions to have 2 entries, got %d", len(configVersions))
		}

		newConfig := GetConfigVersion(0) // 0 will return the latest config
		if newConfig.VotingStartDelay != 200 ||
			newConfig.VotingPeriod != 2000 ||
			newConfig.VotingWeightSmoothingDuration != 200 ||
			newConfig.Quorum != 1000 ||
			newConfig.ProposalCreationThreshold != 200 ||
			newConfig.ExecutionDelay != 200 ||
			newConfig.ExecutionWindow != 2000 {
			t.Errorf("New configuration does not match expected values")
		}
	})
}

func TestGetLatestConfigVersion(t *testing.T) {
	latestVersion := GetLatestConfigVersion()
	shouldEQ(t, latestVersion, uint64(2))
}

func TestGetLatestConfig(t *testing.T) {
	latestConfig := GetLatestConfig()
	shouldEQ(t, latestConfig, config)
}
