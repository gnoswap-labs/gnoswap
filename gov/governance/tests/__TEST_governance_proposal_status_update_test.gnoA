package governance

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v2/consts"
	"gno.land/r/gnoswap/v2/gns"

	gs "gno.land/r/gnoswap/v2/gov/staker"
)

var (
	oldHeight uint64
	oldTime   uint64

	nowHeight uint64
	nowTime   uint64
)

func init() {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
	gs.Delegate(admin, uint64(1_000_000))
	std.TestSkipHeights(11) // VotingWeightSmoothingDuration is 10 block

	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	configVersions[1] = config
}

func TestProposeText(t *testing.T) {
	oldHeight = uint64(std.GetHeight())
	oldTime = uint64(time.Now().Unix())

	nowHeight = oldHeight
	nowTime = oldTime

	t.Run("create text proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		proposalId := ProposeText("test_title_1", "test_description_1")
		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.True(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.False(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, uint64(0))
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})

	t.Run("vote YES", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(11)

		nowHeight = uint64(std.GetHeight())
		nowTime = uint64(time.Now().Unix())

		voteKey := Vote(proposalId, true)
		voted := votes[voteKey]
		uassert.True(t, voted)

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.True(t, proposalStat.Active)
		uassert.False(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, uint64(0))
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})

	t.Run("skip time to check proposal pass/reject", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(31)

		nowHeight = uint64(std.GetHeight())
		nowTime = uint64(time.Now().Unix())

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.True(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, nowTime)
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})

	t.Run("skip long to check proposal status", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(500)

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		if proposalStat.Created != true {
			t.Errorf("Proposal should be created")
		}

		if proposalStat.CreatedAt != oldTime {
			t.Errorf("Proposal created at time is incorrect")
		}

		if proposalStat.Upcoming != false {
			t.Errorf("Proposal should not be upcoming")
		}

		if proposalStat.Active != false {
			t.Errorf("Proposal should not be active")
		}

		if proposalStat.Passed != true {
			t.Errorf("Proposal should be passed")
		}

		if proposalStat.PassedAt != nowTime {
			t.Errorf("Proposal passed at time should be now")
		}

		if proposalStat.Rejected != false {
			t.Errorf("Proposal should not be rejected")
		}

		if proposalStat.RejectedAt != uint64(0) {
			t.Errorf("Proposal rejected at time should be 0")
		}

		if proposalStat.Canceled != false {
			t.Errorf("Proposal should not be cancelled")
		}

		if proposalStat.CanceledAt != uint64(0) {
			t.Errorf("Proposal cancelled at time should be 0")
		}

		if proposalStat.Executed != false {
			t.Errorf("Proposal should not be executed")
		}

		if proposalStat.ExecutedAt != uint64(0) {
			t.Errorf("Proposal executed at time should be 0")
		}
	})

	t.Run("create new text proposal and cancel", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		proposalId := ProposeText("test_title_2", "test_description_2")
		Cancel(proposalId)

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		nowHeight = uint64(std.GetHeight())
		nowTime = uint64(time.Now().Unix())

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, nowTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.False(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, uint64(0))
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.True(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, nowTime)
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})
}

func TestParamaterChange(t *testing.T) {
	oldHeight = uint64(std.GetHeight())
	oldTime = uint64(time.Now().Unix())

	nowHeight = oldHeight
	nowTime = oldTime

	t.Run("create param change", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		proposalId := ProposeParameterChange("test_title_3", "test_description_3", uint64(1), "gno.land/r/gnoswap/v2/gns*EXE*SetAvgBlockTimeInMs*EXE*100")
		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.True(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.False(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, uint64(0))
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})

	t.Run("vote YES", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(11)

		nowHeight = uint64(std.GetHeight())
		nowTime = uint64(time.Now().Unix())

		voteKey := Vote(proposalId, true)
		voted := votes[voteKey]
		if voted != true {
			t.Errorf("Vote not recorded correctly")
		}

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.True(t, proposalStat.Active)
		uassert.False(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, uint64(0))
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})

	t.Run("skip time to check proposal pass/reject => pass", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(31)

		nowHeight = uint64(std.GetHeight())
		nowTime = uint64(time.Now().Unix())

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.True(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, nowTime)
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})

	t.Run("execute", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		Execute(proposalId)
		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		nowHeight = uint64(std.GetHeight())
		nowTime = uint64(time.Now().Unix())

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.True(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, nowTime)
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.True(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, nowTime)
		uassert.False(t, proposalStat.Expired)
		uassert.Equal(t, proposalStat.ExpiredAt, uint64(0))
	})

	t.Run("skip long time after execute", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(1000)
		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.True(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, nowTime)
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.True(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, nowTime)
		uassert.False(t, proposalStat.Expired)
		uassert.Equal(t, proposalStat.ExpiredAt, uint64(0))
	})

	t.Run("create new param change proposal and cancel", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(100)
		proposalId := ProposeParameterChange("test_title_3", "test_description_3", uint64(1), "gno.land/r/gnoswap/v2/gns*EXE*SetAvgBlockTimeInMs*EXE*300")
		Cancel(proposalId)

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		nowHeight = uint64(std.GetHeight())
		nowTime = uint64(time.Now().Unix())

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, nowTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.False(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, uint64(0))
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.True(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, nowTime)
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})

	t.Run("skip long time after cancel", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		oldTime = nowTime
		oldHeight = nowHeight

		std.TestSkipHeights(1000)
		nowTime = uint64(time.Now().Unix())
		nowHeight = uint64(std.GetHeight())

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.False(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, uint64(0))
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.True(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, oldTime)
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
		uassert.False(t, proposalStat.Expired)
		uassert.Equal(t, proposalStat.ExpiredAt, uint64(0))
	})

	t.Run("create new param change proposal and pass", func(t *testing.T) {
		std.TestSetRealm(adminRealm)
		std.TestSkipHeights(100)
		proposalId := ProposeParameterChange("test_title_4", "test_description_4", uint64(1), "gno.land/r/gnoswap/v2/gns*EXE*SetAvgBlockTimeInMs*EXE*300")
		oldHeight = uint64(std.GetHeight())
		oldTime = uint64(time.Now().Unix())

		std.TestSkipHeights(11) // voting start
		Vote(proposalId, true)
		std.TestSkipHeights(31) // finish voting

		nowHeight = uint64(std.GetHeight())
		nowTime = uint64(time.Now().Unix())

		updateProposalsState()
		proposalStat := proposals[proposalId].ExecutionState

		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.True(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, nowTime)
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
	})

	t.Run("skip long time after passed => make expired", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		oldOldTime := oldTime
		oldTime = nowTime
		oldHeight = nowHeight

		std.TestSkipHeights(600)
		updateProposalsState()
		nowTime = uint64(time.Now().Unix())
		nowHeight = uint64(std.GetHeight())

		proposalStat := proposals[proposalId].ExecutionState
		uassert.True(t, proposalStat.Created)
		uassert.Equal(t, proposalStat.CreatedAt, oldOldTime)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.True(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, oldTime)
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
		uassert.True(t, proposalStat.Expired)
		uassert.Equal(t, proposalStat.ExpiredAt, nowTime)
	})

	t.Run("skip long time after expired", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		std.TestSkipHeights(100)
		updateProposalsState()

		proposalStat := proposals[proposalId].ExecutionState
		uassert.True(t, proposalStat.Created)
		uassert.False(t, proposalStat.Upcoming)
		uassert.False(t, proposalStat.Active)
		uassert.True(t, proposalStat.Passed)
		uassert.Equal(t, proposalStat.PassedAt, oldTime)
		uassert.False(t, proposalStat.Rejected)
		uassert.Equal(t, proposalStat.RejectedAt, uint64(0))
		uassert.False(t, proposalStat.Canceled)
		uassert.Equal(t, proposalStat.CanceledAt, uint64(0))
		uassert.False(t, proposalStat.Executed)
		uassert.Equal(t, proposalStat.ExecutedAt, uint64(0))
		uassert.True(t, proposalStat.Expired)
		uassert.Equal(t, proposalStat.ExpiredAt, nowTime)
	})
}
