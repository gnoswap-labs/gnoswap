package governance

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/consts"
	"gno.land/r/gnoswap/v1/gns"

	gs "gno.land/r/gnoswap/v1/gov/staker"
)

func init() {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1_000_000))
	gs.Delegate(admin, uint64(1_000_000))
	std.TestSkipHeights(11) // VotingWeightSmoothingDuration is 10 block

	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	configVersions[1] = config
}

func TestProposeParameterChange_Two_SetAvgBlockTimeInMs_CommunityPoolSpend(t *testing.T) {
	uassert.Equal(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(0))
	uassert.Equal(t, std.GetHeight(), int64(123))

	std.TestSkipHeights(5)

	t.Run("propose successful", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		proposalID := ProposeParameterChange(
			"test_title",
			"test_description",
			uint64(2),
			"gno.land/r/gnoswap/v1/gns*EXE*SetAvgBlockTimeInMs*EXE*123*GOV*gno.land/r/gnoswap/v1/community_pool*EXE*TransferToken*EXE*gno.land/r/gnoswap/v1/gns,g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d,905",
		)

		uassert.Equal(t, proposalID, uint64(1))

		proposalJson := GetProposalById(1)
		uassert.Equal(t, proposalJson, `{"height":"128","now":"1234567900","proposals":[{"id":"1","configVersion":"1","proposer":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","status":"eyJDcmVhdGVkQXQiOiIxMjM0NTY3OTAwIiwiVXBjb21pbmciOiJ0cnVlIiwiQWN0aXZlIjoiZmFsc2UiLCJWb3RpbmdTdGFydCI6IjEyMzQ1Njc5MTAiLCJWb3RpbmdFbmQiOiIxMjM0NTY3OTQwIiwiUGFzc2VkIjoiZmFsc2UiLCJQYXNzZWRBdCI6IjAiLCJSZWplY3RlZCI6ImZhbHNlIiwiUmVqZWN0ZWRBdCI6IjAiLCJDYW5jZWxlZCI6ImZhbHNlIiwiQ2FuY2VsZWRBdCI6IjAiLCJFeGVjdXRlZCI6ImZhbHNlIiwiRXhlY3V0ZWRBdCI6IjAiLCJFeHBpcmVkIjoiZmFsc2UiLCJFeHBpcmVkQXQiOiIwIn0=","type":"PARAMETER_CHANGE","title":"test_title","description":"test_description","vote":"eyJxdW9ydW0iOiI1MDAwMDAiLCJtYXgiOiIxMDAwMDAwIiwieWVzIjoiMCIsIm5vIjoiMCJ9","extra":"Z25vLmxhbmQvci9nbm9zd2FwL3YyL2ducypFWEUqU2V0QXZnQmxvY2tUaW1lSW5NcypFWEUqMTIzKkdPVipnbm8ubGFuZC9yL2dub3N3YXAvdjIvY29tbXVuaXR5X3Bvb2wqRVhFKlRyYW5zZmVyVG9rZW4qRVhFKmduby5sYW5kL3IvZ25vc3dhcC92Mi9nbnMsZzFsbXZycnJyNGVyMnVzODRoMjczMnNydTc2Yzl6bDJudmtuaGE4Yyw5MDU="}]}`)

		uassert.Equal(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(3567351)) // community pool receives 5% of emission reward
		uassert.Equal(t, std.GetHeight(), int64(128))
	})

	t.Run("vote => skip time => pass status", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		// vote to pass it
		std.TestSkipHeights(11) // voting start delay
		voteKey := Vote(proposalId, true)
		voted := votes[voteKey]
		if voted != true {
			t.Errorf("Vote not set correctly")
		}

		std.TestSkipHeights(31) // ends voting period
		updateProposalsState()

		uassert.Equal(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(33533103))
		uassert.Equal(t, std.GetHeight(), int64(170)) // 42 from block initial(123)
	})

	t.Run("execute proposal", func(t *testing.T) {
		std.TestSetRealm(adminRealm)

		uassert.Equal(t, gns.GetAvgBlockTimeInMs(), int64(2000))
		uassert.Equal(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(33533103))
		Execute(proposalId)
		uassert.Equal(t, gns.GetAvgBlockTimeInMs(), int64(123))
		uassert.Equal(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), uint64(33532198)) // 905 transferred, as paramter from proposal L#44
	})
}
