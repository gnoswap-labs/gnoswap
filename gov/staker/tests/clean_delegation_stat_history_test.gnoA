package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"
)

func TestCleanDelegationStatHistoryPermission(t *testing.T) {
	uassert.PanicsWithMessage(
		t,
		`only admin can clean delegation stat history`,
		func() {
			CleanDelegationStatHistoryByAdmin()
		},
	)

	uassert.NotPanics(t, func() {
		std.TestSetRealm(adminRealm)
		CleanDelegationStatHistoryByAdmin()
	})
}

func TestSetRunningPermission(t *testing.T) {
	uassert.PanicsWithMessage(
		t,
		`only admin can set running`,
		func() {
			SetRunning(false)
		},
	)

	uassert.NotPanics(t, func() {
		std.TestSetRealm(adminRealm)
		uassert.True(t, GetRunning())
		SetRunning(false)
		uassert.False(t, GetRunning())
		SetRunning(true) // revert
	})
}

func TestCleanDelegationStatHistory(t *testing.T) {
	cleanDelegationStatHistory()

	delegationStatHistory = map[std.Address][]DelegationStatHistory{}
	dummy01 := testutils.TestAddress("dummy01")
	dummy02 := testutils.TestAddress("dummy02")
	dummy03 := testutils.TestAddress("dummy03")

	delegationStatHistory[dummy01] = []DelegationStatHistory{
		{updatedBlock: 123}, // initial block height in gno tests
		{updatedBlock: 124},
		{updatedBlock: 86523}, // 123 + 86400
		{updatedBlock: 86524},
	}

	delegationStatHistory[dummy02] = []DelegationStatHistory{
		{updatedBlock: 86521},
		{updatedBlock: 86522},
		{updatedBlock: 86523},
		{updatedBlock: 86524},
		{updatedBlock: 86525},
	}

	delegationStatHistory[dummy03] = []DelegationStatHistory{
		{updatedBlock: 1},
		{updatedBlock: 2},
		{updatedBlock: 3},
		{updatedBlock: 4},
	}

	std.TestSkipHeights(86401)
	cleanDelegationStatHistory() // current 86524

	uassert.Equal(t, len(delegationStatHistory[dummy01]), 3)
	uassert.Equal(t, delegationStatHistory[dummy01][0].updatedBlock, uint64(124))

	uassert.Equal(t, len(delegationStatHistory[dummy02]), 5)
	uassert.Equal(t, delegationStatHistory[dummy02][0].updatedBlock, uint64(86521))

	uassert.Equal(t, len(delegationStatHistory[dummy03]), 1)
	uassert.Equal(t, delegationStatHistory[dummy03][0].updatedBlock, uint64(4))
}
