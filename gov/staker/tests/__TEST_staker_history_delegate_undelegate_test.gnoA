package staker

import (
	"testing"

	"gno.land/p/demo/testutils"
)

func TestGetDelegatedCumulative(t *testing.T) {
	delegateAddr := testutils.TestAddress("delegate")
	delegate := delegateAddr

	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("GetDelegatedCumulative panicked: %v", r)
		}
	}()

	// simulate time passing and additional stakes
	currentTime := uint64(1000)
	delegationModifiedHistory[delegateAddr] = []ModifiedDelegationHistory{
		{
			delegatedAmount:      2500,
			delegatedTimestamp:   currentTime,
			undelegatedTimestamp: currentTime + 230,
			undelegatedAmount:    2500,
		},

		{
			delegatedAmount:      1000,
			delegatedTimestamp:   currentTime + 100,
			undelegatedTimestamp: currentTime + 230,
			undelegatedAmount:    300,
		},

		{
			delegatedAmount:    500,
			delegatedTimestamp: currentTime + 200,
		},
	}

	tests := []struct {
		name           string
		timestamp      uint64
		expectedResult uint64
	}{
		{
			name:           "period +50",
			timestamp:      currentTime + 50,
			expectedResult: uint64(0),
		},
		{
			name:           "period +100",
			timestamp:      currentTime + 100,
			expectedResult: uint64(700), // (1000 - 300)
		},
		{
			name:           "period +150",
			timestamp:      currentTime + 150,
			expectedResult: uint64(700), // (1000 - 300)
		},
		{
			name:           "period +200",
			timestamp:      currentTime + 200,
			expectedResult: uint64(1200), // (1000 - 300) + 500
		},
		{
			name:           "period +250",
			timestamp:      currentTime + 250,
			expectedResult: uint64(1200), // (1000 - 300) + 500
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := GetDelegatedCumulative(delegate, tt.timestamp)
			if result != tt.expectedResult {
				t.Errorf("Expected %d, got %d", tt.expectedResult, result)
			}
		})
	}
}

func TestGetAverageDelegated(t *testing.T) {
	delegateAddr := testutils.TestAddress("delegate")
	delegate := delegateAddr

	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("GetAverageDelegated panicked: %v", r)
		}
	}()

	// simulate time passing and additional stakes
	currentTime := uint64(1000)
	delegationModifiedHistory[delegateAddr] = []ModifiedDelegationHistory{
		{
			delegatedAmount:      2500,
			delegatedTimestamp:   currentTime,
			undelegatedTimestamp: currentTime + 230,
			undelegatedAmount:    2500,
		},
		{
			delegatedAmount:      1000,
			delegatedTimestamp:   currentTime + 100,
			undelegatedTimestamp: currentTime + 230,
			undelegatedAmount:    500,
		},
		{
			delegatedAmount:    700,
			delegatedTimestamp: currentTime + 130,
		},
		{
			delegatedAmount:    500,
			delegatedTimestamp: currentTime + 200,
		},
	}

	tests := []struct {
		name           string
		start          uint64
		end            uint64
		expectedResult uint64
	}{
		{
			name:           "Full period average",
			start:          currentTime,
			end:            currentTime + 250,
			expectedResult: uint64(6), // (0 * 0 + 500 + 700 + 500) / 250
		},
		{
			name:           "Partial period average_middle",
			start:          currentTime + 50,
			end:            currentTime + 150,
			expectedResult: uint64(12), // (500 + 700) / 100
		},
		{
			name:           "Partial period average",
			start:          currentTime + 220,
			end:            currentTime + 500,
			expectedResult: uint64(6), // (500 + 700 + 500) / 280
		},
		{
			name:           "Single point in time",
			start:          currentTime + 100,
			end:            currentTime + 100,
			expectedResult: uint64(500), // 500
		},
		{
			name:           "Period before any stakes",
			start:          currentTime - 100,
			end:            currentTime - 50,
			expectedResult: uint64(0),
		},
		{
			name:           "Period after all recorded stakes",
			start:          currentTime + 300,
			end:            currentTime + 400,
			expectedResult: uint64(17), // (500 + 700 + 500) / 100
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := GetAverageDelegated(delegate, tt.start, tt.end)
			if result != tt.expectedResult {
				t.Errorf("Expected %d, got %d", tt.expectedResult, result)
			}
		})
	}
}

func TestGetAverageDelegatedOverLastDuration(t *testing.T) {
	delegateAddr := testutils.TestAddress("delegate")
	delegate := delegateAddr

	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("GetAverageDelegatedOverLastDuration panicked: %v", r)
		}
	}()

	// Set up delegation history
	currentTime := uint64(1000)
	delegationModifiedHistory[delegateAddr] = []ModifiedDelegationHistory{
		{
			delegatedAmount:      2500,
			delegatedTimestamp:   currentTime,
			undelegatedTimestamp: currentTime + 230,
			undelegatedAmount:    2500,
		},
		{
			delegatedAmount:      1000,
			delegatedTimestamp:   currentTime + 100,
			undelegatedTimestamp: currentTime + 230,
			undelegatedAmount:    500,
		},
		{
			delegatedAmount:    700,
			delegatedTimestamp: currentTime + 130,
		},
		{
			delegatedAmount:    500,
			delegatedTimestamp: currentTime + 200,
		},
	}

	avg := GetAverageDelegatedOverLastDuration(delegate, uint64(100))
	if avg != 17 { // (500 + 700 + 500) / 100
		t.Errorf("Expected 1700, got %d", avg)
	}
}
