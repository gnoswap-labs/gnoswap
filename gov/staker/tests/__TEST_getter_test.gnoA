package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/gnoswap/v2/gov/xgns"

	"gno.land/r/gnoswap/v2/consts"
)

const minAmount = uint64(1_000_000)

var (
	dummyAddr  = testutils.TestAddress("dummy")
	dummyRealm = std.NewUserRealm(dummyAddr)
	reDelegate = testutils.TestAddress("reDelegate")
)

func TestInit(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	shouldEQ(t, gns.BalanceOf(a2u(gsa)), uint64(100000000000000)) // admin has initial gns
	shouldEQ(t, xgns.BalanceOf(a2u(gsa)), uint64(0))
}

func TestDelegateLess(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	shouldPanic(
		t,
		func() {
			Delegate(dummyAddr, 1)
		},
	)
}

func TestDelegate(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	shouldEQ(t, GetTotalStaked(), uint64(0))
	shouldEQ(t, GetDelegationAmount(dummyAddr.String()), uint64(0))

	gns.Approve(a2u(consts.GOV_STAKER_ADDR), uint64(1000001))
	Delegate(dummyAddr, 1000001)

	shouldEQ(t, GetTotalStaked(), uint64(1000001))
	shouldEQ(t, GetDelegationAmount(dummyAddr.String()), uint64(1000001))

	shouldEQ(t, GetAllDelegations(), `[{"from":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","to":"g1v36k6mteta047h6lta047h6lta047h6lz7gmv8","amount":1000001}]`)
}
