package gns

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	pusers "gno.land/p/demo/users"

	"gno.land/r/gnoswap/v2/consts"
)

func TestInitValues(t *testing.T) {
	shouldEQ(t, lastMintedHeight, 123)
}

func TestMintNoBlock(t *testing.T) {
	emissionUsers := pusers.AddressOrName(consts.EMISSION_ADDR)
	emissionRealm := std.NewCodeRealm(consts.EMISSION_PATH)
	std.TestSetRealm(emissionRealm)

	shouldEQ(t, TotalSupply(), 100_000_000_000_000)

	Mint(emissionUsers) // no block mined => no emission
	shouldEQ(t, TotalSupply(), 100_000_000_000_000)
}

func TestMintSingleBlock(t *testing.T) {
	emissionUsers := pusers.AddressOrName(consts.EMISSION_ADDR)
	emissionRealm := std.NewCodeRealm(consts.EMISSION_PATH)
	std.TestSetRealm(emissionRealm)
	std.TestSkipHeights(1)

	Mint(emissionUsers) // + 14_269_406 (block 124)
	// 2s = 14_269_406
	// 1m = 428_082_180
	// 1h = 25_684_930_800
	// 24h = 616_438_339_200

	shouldEQ(t, TotalSupply(), 100_000_000_000_000+14_269_406)
}

func TestMintNoPermission(t *testing.T) {
	dummyAddr := testutils.TestAddress("dummy")
	dummyUser := pusers.AddressOrName(dummyAddr)
	dummyRealm := std.NewUserRealm(dummyAddr)
	std.TestSetRealm(dummyRealm)

	shouldPanicWithMsg(
		t,
		func() {
			Mint(dummyUser)
		},
		"only emission contract can call Mint",
	)
}
