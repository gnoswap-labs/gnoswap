package gns

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	pusers "gno.land/p/demo/users"

	"gno.land/r/gnoswap/v2/consts"
)

func TestInitValues(t *testing.T) {
	shouldEQ(t, lastMintedHeight, 123)
}

func TestMintNoBlock(t *testing.T) {
	emissionUsers := pusers.AddressOrName(consts.EMISSION_ADDR)
	emissionRealm := std.NewCodeRealm(consts.EMISSION_PATH)
	std.TestSetRealm(emissionRealm)

	shouldEQ(t, TotalSupply(), 100_000_000_000_000)

	Mint(emissionUsers) // no block mined => no emission
	shouldEQ(t, TotalSupply(), 100_000_000_000_000)
}

func TestMintSingleBlock(t *testing.T) {
	emissionUsers := pusers.AddressOrName(consts.EMISSION_ADDR)
	emissionRealm := std.NewCodeRealm(consts.EMISSION_PATH)
	std.TestSetRealm(emissionRealm)
	std.TestSkipHeights(1)

	Mint(emissionUsers) // + 14_269_406 (block 124)
	// 2s = 14_269_406
	// 1m = 428_082_180
	// 1h = 25_684_930_800
	// 24h = 616_438_339_200

	shouldEQ(t, TotalSupply(), 100_000_000_000_000+14_269_406) // 100000014269406
}

func TestMint_10_Block(t *testing.T) {
	emissionUsers := pusers.AddressOrName(consts.EMISSION_ADDR)
	emissionRealm := std.NewCodeRealm(consts.EMISSION_PATH)
	std.TestSetRealm(emissionRealm)
	std.TestSkipHeights(10)

	Mint(emissionUsers)
	shouldEQ(t, TotalSupply(), 100000014269406+142_694_060) // 100000156963466
}

func TestMintNoPermission(t *testing.T) {
	dummyAddr := testutils.TestAddress("dummy")
	dummyUser := pusers.AddressOrName(dummyAddr)
	dummyRealm := std.NewUserRealm(dummyAddr)
	std.TestSetRealm(dummyRealm)

	shouldPanicWithMsg(
		t,
		func() {
			Mint(dummyUser)
		},
		"only emission contract can call Mint",
	)
}

func TestMintReachFirstHalvingYear(t *testing.T) {
	height := std.GetHeight()
	shouldEQ(t, height, 134)

	year := GetHalvingYearByHeight(height)
	shouldEQ(t, year, 1)

	yearEndHeight := halvingYearBlock[year]
	shouldEQ(t, yearEndHeight, 15768123)

	leftBlock := yearEndHeight - height
	shouldEQ(t, leftBlock, 15767989)

	emissionUsers := pusers.AddressOrName(consts.EMISSION_ADDR)
	emissionRealm := std.NewCodeRealm(consts.EMISSION_PATH)
	std.TestSetRealm(emissionRealm)
	std.TestSkipHeights(15767980) // 9 block left to next halving year

	Mint(emissionUsers)
	shouldEQ(t, TotalSupply(), 100000156963466+224_999_708_419_880) // 324999865383346
}

func TestYear01AndYear02(t *testing.T) {
	height := std.GetHeight()
	shouldEQ(t, height, 15768114)

	year := GetHalvingYearByHeight(height)
	shouldEQ(t, year, 1)

	yearEndHeight := halvingYearBlock[year]
	shouldEQ(t, yearEndHeight, 15768123)

	leftBlock := yearEndHeight - height
	shouldEQ(t, leftBlock, 9)
	// 9 block left

	emissionUsers := pusers.AddressOrName(consts.EMISSION_ADDR)
	emissionRealm := std.NewCodeRealm(consts.EMISSION_PATH)
	std.TestSetRealm(emissionRealm)
	std.TestSkipHeights(9)  // year 1
	std.TestSkipHeights(10) // year 2

	Mint(emissionUsers)

	shouldEQ(t, halvingYearMintAmount[1], 225000000000000)
	shouldEQ(t, halvingYearAmount[1], 225000000000000)

	shouldEQ(t, TotalSupply(), 325000142694060)
	// 325000142694060 - 324999865383346
	// minted: 277_310_714

	// year 1
	// block 15768115: 14_269_406
	// block 15768116: 14_269_406
	// block 15768117: 14_269_406
	// block 15768118: 14_269_406
	// block 15768119: 14_269_406
	// block 15768120: 14_269_406
	// block 15768121: 14_269_406
	// block 15768122: 14_269_406
	// block 15768123: 14_269_406 + (left) 6_192_000
	// 128424654 + 6192000 = 134616654

	// year 2
	// block 15768124: 14_269_406
	// block 15768125: 14_269_406
	// block 15768126: 14_269_406
	// block 15768127: 14_269_406
	// block 15768128: 14_269_406
	// block 15768129: 14_269_406
	// block 15768130: 14_269_406
	// block 15768131: 14_269_406
	// block 15768132: 14_269_406
	// block 15768133: 14_269_406
	// 142694060

	// 134616654 + 142694060 = 277_310_714
}
