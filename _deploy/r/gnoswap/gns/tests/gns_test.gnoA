package gns

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"
	pusers "gno.land/p/demo/users"

	"gno.land/r/gnoswap/v2/consts"
)

func TestMint(t *testing.T) {
	t.Run("initial mint", func(t *testing.T) {
		uassert.Equal(t, uint64(100_000_000_000_000), TotalSupply())
		uassert.Equal(t, int64(123), lastMintedHeight)
	})

	t.Run("panic if not emission", func(t *testing.T) {
		uassert.PanicsWithMessage(t,
			`[GNOSWAP-GNS-001] caller has no permission || only emission contract(g1mfvpsj55gssep3wkt2t04d6dc3yfs9py5qquft) can call Mint, called from g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm`,
			func() { Mint(pusers.AddressOrName(testutils.TestAddress("dummy"))) })
	})

	t.Run("no block mined", func(t *testing.T) {
		std.TestSetRealm(std.NewCodeRealm(consts.EMISSION_PATH))
		Mint(pusers.AddressOrName(consts.EMISSION_ADDR))

		uassert.Equal(t, uint64(100_000_000_000_000), TotalSupply())
		uassert.Equal(t, int64(123), lastMintedHeight)
	})

	t.Run("1 block mined", func(t *testing.T) {
		std.TestSkipHeights(1)

		std.TestSetRealm(std.NewCodeRealm(consts.EMISSION_PATH))
		Mint(pusers.AddressOrName(consts.EMISSION_ADDR))

		uassert.Equal(t, uint64(100_000_000_000_000+14_269_406), TotalSupply())
		uassert.Equal(t, int64(124), lastMintedHeight)
	})

	t.Run("10 blocks mined", func(t *testing.T) {
		std.TestSkipHeights(10)

		std.TestSetRealm(std.NewCodeRealm(consts.EMISSION_PATH))
		Mint(pusers.AddressOrName(consts.EMISSION_ADDR))

		uassert.Equal(t, uint64(100000014269406+142_694_060), TotalSupply())
		uassert.Equal(t, int64(134), lastMintedHeight)
	})

	t.Run("reach first halving year", func(t *testing.T) {
		height := std.GetHeight()
		uassert.Equal(t, int64(134), height)

		year := GetHalvingYearByHeight(height)
		uassert.Equal(t, int64(1), year)

		yearEndHeight := halvingYearBlock[year]
		uassert.Equal(t, int64(15768123), yearEndHeight)

		leftBlock := yearEndHeight - height
		uassert.Equal(t, int64(15767989), leftBlock)

		std.TestSkipHeights(15767980) // 9 block left to next halving year

		std.TestSetRealm(std.NewCodeRealm(consts.EMISSION_PATH))
		Mint(pusers.AddressOrName(consts.EMISSION_ADDR))

		uassert.Equal(t, uint64(100000156963466+224_999_708_419_880), TotalSupply())
		// 324999865383346
	})

	t.Run("year01 and year02", func(t *testing.T) {
		height := std.GetHeight()
		uassert.Equal(t, int64(15768114), height)

		year := GetHalvingYearByHeight(height)
		uassert.Equal(t, int64(1), year)

		yearEndHeight := halvingYearBlock[year]
		uassert.Equal(t, int64(15768123), yearEndHeight)

		leftBlock := yearEndHeight - height
		uassert.Equal(t, int64(9), leftBlock) // 9 block left

		std.TestSetRealm(std.NewCodeRealm(consts.EMISSION_PATH))
		std.TestSkipHeights(9)  // year 1 ends
		std.TestSkipHeights(10) // year 2 starts and mined 10 blocks

		Mint(pusers.AddressOrName(consts.EMISSION_ADDR))

		uassert.Equal(t, halvingYearMintAmount[1], uint64(225000000000000))
		uassert.Equal(t, halvingYearAmount[1], uint64(225000000000000))

		uassert.Equal(t, TotalSupply(), uint64(325000142694060))
		// 325000142694060 - 324999865383346
		// minted: 277310714

		// year 1
		// block 15768115: 14_269_406
		// block 15768116: 14_269_406
		// block 15768117: 14_269_406
		// block 15768118: 14_269_406
		// block 15768119: 14_269_406
		// block 15768120: 14_269_406
		// block 15768121: 14_269_406
		// block 15768122: 14_269_406
		// block 15768123: 14_269_406 + (left) 6_192_000
		// 128424654 + 6192000 = 134616654

		// year 2
		// block 15768124: 14_269_406
		// block 15768125: 14_269_406
		// block 15768126: 14_269_406
		// block 15768127: 14_269_406
		// block 15768128: 14_269_406
		// block 15768129: 14_269_406
		// block 15768130: 14_269_406
		// block 15768131: 14_269_406
		// block 15768132: 14_269_406
		// block 15768133: 14_269_406
		// 142694060

		// 134616654 + 142694060 = 277310714
	})
}
