package gns

import (
	"testing"

	"std"
)

func TestEmissionAmount(t *testing.T) {
	shouldEQ(t, amountToEmission, uint64(900_000_000_000_000))

	sumAmount := uint64(0)
	for _, amountYearly := range halvingYearAmount {
		sumAmount += uint64(amountYearly)
	}
	shouldEQ(t, sumAmount, amountToEmission)
}

func TestSkip50Block(t *testing.T) {
	std.TestSkipHeights(50)
	shouldEQ(t, std.GetHeight(), int64(173)) // 123 + 50

	std.TestSetRealm(emissionRealm)

	Mint(emissionUsers) // 14269406 * 50
	shouldEQ(t, TotalMinted(), uint64(713470300))
}

// Assume block time is 4s = 4000ms
func TestSetAvgBlockTimeInMs(t *testing.T) {
	// for block time 2s
	shouldEQ(t, amountPerBlockPerHalvingYear[1], uint64(14269406))
	shouldEQ(t, halvingYearBlock[1], int64(15768123))

	std.TestSetRealm(swapAdminRealm)
	SetAvgBlockTimeInMsByAdmin(4000)
	std.TestSkipHeights(1)

	std.TestSetRealm(emissionRealm)
	Mint(emissionUsers)                                    // 28538812
	shouldEQ(t, TotalMinted(), uint64(713470300+28538812)) // 742009112

	// for block time 4s
	// amount == 28538812
	shouldEQ(t, amountPerBlockPerHalvingYear[1], uint64(28538812))
	shouldEQ(t, halvingYearBlock[1], int64(7884148))
	// formula
	// orig_start = 123
	// orig_1year = 15768123 ( 123 + 1 year block 15768000 )

	// 50 block mined from L#20
	// current = 173
	// 15768123 - 173 = 15767950 // number of block left to next halving

	// 15767950 * 2 = 31535900 // number of timestamp left to next halving
	// 31535900 / 4 = 7883975 // based on 4s block, number of block left to next halving
	// current(173) + above left(7883975) = 7884148
}

func TestReachFirstHalving(t *testing.T) {
	// current := 173
	// nextHalving := 7884148
	// 7884148 - 173 = 7883975

	std.TestSkipHeights(7883973)
	std.TestSetRealm(emissionRealm)
	Mint(emissionUsers)
	shouldEQ(t, TotalMinted(), uint64(224999965269188))

	year := GetHalvingYearByHeight(std.GetHeight())
	shouldEQ(t, year, int64(1))
	shouldEQ(t, std.GetHeight(), int64(7884147))

	println("halvingYearMintAmount[1]: #1\t", halvingYearMintAmount[1])
}

func TestReachFirstHalvingOneMore(t *testing.T) {
	std.TestSkipHeights(1)
	std.TestSetRealm(emissionRealm)
	Mint(emissionUsers)
	shouldEQ(t, TotalMinted(), uint64(225000000000000))

	year := GetHalvingYearByHeight(std.GetHeight())
	shouldEQ(t, year, int64(1))
	shouldEQ(t, std.GetHeight(), int64(7884148))

	println("halvingYearMintAmount[1]: #2\t", halvingYearMintAmount[1])
}

func TestReachFirstHalvingOneMoreMore(t *testing.T) {
	std.TestSkipHeights(1)
	std.TestSetRealm(emissionRealm)
	Mint(emissionUsers)
	shouldEQ(t, TotalMinted(), uint64(225000014269406))

	year := GetHalvingYearByHeight(std.GetHeight())
	shouldEQ(t, year, int64(2))
	shouldEQ(t, std.GetHeight(), int64(7884149))

	amount := GetAmountByHeight(std.GetHeight())
	shouldEQ(t, amount, uint64(14269406))

	println("halvingYearMintAmount[2]:\t", halvingYearMintAmount[2])
}
