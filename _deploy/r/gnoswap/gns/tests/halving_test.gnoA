package gns

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/consts"
)

func TestPreCalculatedData(t *testing.T) {
	uassert.Equal(t, uint64(900_000_000_000_000), amountToEmission)

	sumAmount := uint64(0)
	for _, amountYearly := range halvingYearAmount {
		sumAmount += uint64(amountYearly)
	}
	uassert.Equal(t, amountToEmission, sumAmount)
}

func TestGetHalvingYearByHeight(t *testing.T) {
	height := std.GetHeight()

	t.Run("year 1", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+1), int64(1))
		uassert.Equal(t, GetHalvingYearByHeight(height+15768000), int64(1))
	})

	t.Run("year 2", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+15768000+1), int64(2))
		uassert.Equal(t, GetHalvingYearByHeight(height+31536000), int64(2))
	})

	t.Run("year 3", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+31536000+1), int64(3))
		uassert.Equal(t, GetHalvingYearByHeight(height+47304000), int64(3))
	})

	t.Run("year 4", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+47304000+1), int64(4))
		uassert.Equal(t, GetHalvingYearByHeight(height+63072000), int64(4))
	})

	t.Run("year 5", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+63072000+1), int64(5))
		uassert.Equal(t, GetHalvingYearByHeight(height+78840000), int64(5))
	})

	t.Run("year 6", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+78840000+1), int64(6))
		uassert.Equal(t, GetHalvingYearByHeight(height+94608000), int64(6))
	})

	t.Run("year 7", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+94608000+1), int64(7))
		uassert.Equal(t, GetHalvingYearByHeight(height+110376000), int64(7))
	})

	t.Run("year 8", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+110376000+1), int64(8))
		uassert.Equal(t, GetHalvingYearByHeight(height+126144000), int64(8))
	})

	t.Run("year 9", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+126144000+1), int64(9))
		uassert.Equal(t, GetHalvingYearByHeight(height+141912000), int64(9))
	})

	t.Run("year 10", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+141912000+1), int64(10))
		uassert.Equal(t, GetHalvingYearByHeight(height+157680000), int64(10))
	})

	t.Run("year 11", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+157680000+1), int64(11))
		uassert.Equal(t, GetHalvingYearByHeight(height+173448000), int64(11))
	})

	t.Run("year 12", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+173448000+1), int64(12))
		uassert.Equal(t, GetHalvingYearByHeight(height+189216000), int64(12))
	})

	t.Run("emission end", func(t *testing.T) {
		uassert.Equal(t, GetHalvingYearByHeight(height+189216000+1), int64(0))
	})
}

func TestGetAmountByHeight(t *testing.T) {
	height1Year := int64(15768000)

	t.Run("year 1", func(t *testing.T) {
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(14_269_406))
		std.TestSkipHeights(height1Year)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(14_269_406))
	})

	t.Run("year 2", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(14_269_406))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(14_269_406))
	})

	t.Run("year 3", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(7_134_703))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(7_134_703))
	})

	t.Run("year 4", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(7_134_703))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(7_134_703))
	})

	t.Run("year 5", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(3_567_351))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(3_567_351))
	})

	t.Run("year 6", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(3_567_351))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(3_567_351))
	})

	t.Run("year 7", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(1_783_675))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(1_783_675))
	})

	t.Run("year 8", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(1_783_675))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(1_783_675))
	})

	t.Run("year 9", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(891_837))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(891_837))
	})

	t.Run("year 10", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(891_837))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(891_837))
	})

	t.Run("year 11", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(891_837))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(891_837))
	})

	t.Run("year 12", func(t *testing.T) {
		std.TestSkipHeights(1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(891_837))
		std.TestSkipHeights(height1Year - 1)
		uassert.Equal(t, GetAmountByHeight(std.GetHeight()), uint64(891_837))
	})
}

func TestSetAvgBlockTimeInMsByAdmin(t *testing.T) {
	t.Run("panic if not admin", func(t *testing.T) {
		uassert.PanicsWithMessage(t,
			`[GNOSWAP-GNS-001] caller has no permission || gns.gno__SetAvgBlockTimeInMsByAdmin() || only admin(g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c) can call this function, called from g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm`,
			func() {
				SetAvgBlockTimeInMsByAdmin(1000)
			})
	})

	t.Run("success if admin", func(t *testing.T) {
		uassert.Equal(t, GetAvgBlockTimeInMs(), int64(2000))

		std.TestSetRealm(std.NewUserRealm(consts.ADMIN))
		SetAvgBlockTimeInMsByAdmin(1000)

		uassert.Equal(t, GetAvgBlockTimeInMs(), int64(1000))
	})
}

func TestSetAvgBlockTimeInMs(t *testing.T) {
	t.Run("panic if not governance", func(t *testing.T) {
		uassert.PanicsWithMessage(t,
			`[GNOSWAP-GNS-001] caller has no permission || gns.gno__SetAvgBlockTimeInMs() || only governance contract(g17s8w2ve7k85fwfnrk59lmlhthkjdted8whvqxd) can call this function, called from g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm`, func() {
				SetAvgBlockTimeInMs(1000)
			})
	})

	t.Run("success if governance", func(t *testing.T) {
		std.TestSetRealm(std.NewCodeRealm(consts.GOV_GOVERNANCE_PATH))
		SetAvgBlockTimeInMs(2000)

		uassert.Equal(t, GetAvgBlockTimeInMs(), int64(2000))
	})
}

func TestDataFor2000msBlockTime(t *testing.T) {
	std.TestSetRealm(std.NewUserRealm(consts.ADMIN))
	SetAvgBlockTimeInMsByAdmin(2000)
	ghi := GetHalvingInfo()
	uassert.Equal(t, `{"height":123,"timestamp":1234567890,"avgBlockTimeMs":2000,"halvings":[{"year":1,"block":15768123,"amount":14269406},{"year":2,"block":31536123,"amount":14269406},{"year":3,"block":47304123,"amount":7134703},{"year":4,"block":63072123,"amount":7134703},{"year":5,"block":78840123,"amount":3567351},{"year":6,"block":94608123,"amount":3567351},{"year":7,"block":110376123,"amount":1783675},{"year":8,"block":126144123,"amount":1783675},{"year":9,"block":141912123,"amount":891837},{"year":10,"block":157680123,"amount":891837},{"year":11,"block":173448123,"amount":891837},{"year":12,"block":189216123,"amount":891837}]}`, ghi)
}

func TestDataFor3000msBlockTime(t *testing.T) {
	std.TestSetRealm(std.NewUserRealm(consts.ADMIN))
	SetAvgBlockTimeInMsByAdmin(3000)
	ghi := GetHalvingInfo()
	uassert.Equal(t, `{"height":123,"timestamp":1234567890,"avgBlockTimeMs":3000,"halvings":[{"year":1,"block":10512123,"amount":21404109},{"year":2,"block":21024123,"amount":14269406},{"year":3,"block":31536123,"amount":7134703},{"year":4,"block":42048123,"amount":7134703},{"year":5,"block":52560123,"amount":3567351},{"year":6,"block":63072123,"amount":3567351},{"year":7,"block":73584123,"amount":1783675},{"year":8,"block":84096123,"amount":1783675},{"year":9,"block":94608123,"amount":891837},{"year":10,"block":105120123,"amount":891837},{"year":11,"block":115632123,"amount":891837},{"year":12,"block":126144123,"amount":891837}]}`, ghi)
}
