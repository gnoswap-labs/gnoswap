package main

import (
	"std"
	"testing"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"
	"gno.land/r/gnoswap/gns"
	"gno.land/r/demo/obl"
	"gno.land/r/demo/qux"
	"gno.land/r/demo/wugnot"

	pusers "gno.land/p/demo/users"

	"gno.land/r/gnoswap/common"
	"gno.land/r/gnoswap/consts"

	pl "gno.land/r/gnoswap/pool"
	pn "gno.land/r/gnoswap/position"
	rr "gno.land/r/gnoswap/router"
)

var (
	gsa std.Address = consts.GNOSWAP_ADMIN

	fooPath string = "gno.land/r/demo/foo"
	barPath string = "gno.land/r/demo/bar"
	bazPath string = "gno.land/r/demo/baz"
	quxPath string = "gno.land/r/demo/qux"

	oblPath string = "gno.land/r/demo/obl"

	fee100  uint32 = 100
	fee500  uint32 = 500
	fee3000 uint32 = 3000

	maxTimeout int64 = 9999999999

	maxApprove uint64 = 18446744073709551615

	// TESTING
	t *testing.T
)

// Realms to mock frames
var (
	gsaRealm = std.NewUserRealm(gsa)
	posRealm = std.NewCodeRealm(consts.POSITION_PATH)
	rouRealm = std.NewCodeRealm(consts.ROUTER_PATH)
	stkRealm = std.NewCodeRealm(consts.STAKER_PATH)
)

type FooToken struct{}

func (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return foo.Transfer
}
func (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return foo.TransferFrom
}
func (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return foo.BalanceOf
}
func (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return foo.Approve
}

type BarToken struct{}

func (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return bar.Transfer
}
func (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return bar.TransferFrom
}
func (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return bar.BalanceOf
}
func (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return bar.Approve
}

type BazToken struct{}

func (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return baz.Transfer
}
func (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return baz.TransferFrom
}
func (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return baz.BalanceOf
}
func (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return baz.Approve
}

type QuxToken struct{}

func (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return qux.Transfer
}
func (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return qux.TransferFrom
}
func (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return qux.BalanceOf
}
func (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return qux.Approve
}

type WugnotToken struct{}

func (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return wugnot.Transfer
}
func (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return wugnot.TransferFrom
}
func (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return wugnot.BalanceOf
}
func (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return wugnot.Approve
}

type OBLToken struct{}

func (OBLToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return obl.Transfer
}
func (OBLToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return obl.TransferFrom
}
func (OBLToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return obl.BalanceOf
}
func (OBLToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return obl.Approve
}

type GNSToken struct{}

func (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return gns.Transfer
}

func (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return gns.TransferFrom
}

func (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return gns.BalanceOf
}

func (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return gns.Approve
}

/* HELPER FUNCTIONS */
func a2u(addr std.Address) pusers.AddressOrName {
	return pusers.AddressOrName(addr)
}

func ugnotBalanceOf(addr std.Address) uint64 {
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)

	coins := testBanker.GetCoins(addr)
	if len(coins) == 0 {
		return 0
	}

	return uint64(coins.AmountOf("ugnot"))
}

func init() {
	// TOKEN REGISTER
	std.TestSetOrigCaller(consts.TOKEN_REGISTER)

	pl.RegisterGRC20Interface("gno.land/r/demo/foo", FooToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/bar", BarToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/baz", BazToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/qux", QuxToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/obl", OBLToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/wugnot", WugnotToken{})
	pl.RegisterGRC20Interface("gno.land/r/gnoswap/gns", GNSToken{})

	rr.RegisterGRC20Interface("gno.land/r/demo/foo", FooToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/bar", BarToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/baz", BazToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/qux", QuxToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/obl", OBLToken{})
	rr.RegisterGRC20Interface("gno.land/r/demo/wugnot", WugnotToken{})
	rr.RegisterGRC20Interface("gno.land/r/gnoswap/gns", GNSToken{})
}

/* START TEST */
func main() {
	std.TestSetOrigCaller(gsa)
	std.TestSetRealm(gsaRealm)

	createPool()
	mintBarBaz()
	mintBazQux()
	mintQuxGnot()
	drySwapBarGnotExactIn()
	drySwapBarGnotExactOut()
	drySwapGnotBarExactIn()
	drySwapGnotBarExactOut()
}

func createPool() {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)
	std.TestSkipHeights(1)

	// 3 HOPS, 1 BAR â‰ˆ 19.683 GNOT
	pl.CreatePool(barPath, bazPath, fee500, common.TickMathGetSqrtRatioAtTick(10_000).ToString())
	pl.CreatePool(bazPath, quxPath, fee500, common.TickMathGetSqrtRatioAtTick(10_000).ToString())
	pl.CreatePool(quxPath, consts.WRAPPED_WUGNOT, fee500, common.TickMathGetSqrtRatioAtTick(10_000).ToString())
	// tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
}

func mintBarBaz() {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(stkRealm)
	_, _, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", maxTimeout, gsa.String())
	if amount0 != "36790" {
		"router_z4_mintBarBaz() || amount0 should be 36790"
	}
	if amount1 != "100000" {
		"router_z4_mintBarBaz() || amount1 should be 100000"
	}
}

func mintBazQux() {
	std.TestSetRealm(gsaRealm)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(stkRealm)
	_, _, amount0, amount1 := pn.Mint(bazPath, quxPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", maxTimeout, gsa.String())
	if amount0 != "36790" {
		"router_z4_mintBazQux() || amount0 should be 36790"
	}
	if amount1 != "100000" {
		"router_z4_mintBazQux() || amount1 should be 100000"
	}
}

func mintQuxGnot() {
	std.TestSetRealm(gsaRealm)

	// send
	std.TestIssueCoins(gsa, std.Coins{{"ugnot", 1000009}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 1000009}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)

	// Deposit(wrap)
	std.TestSetRealm(gsaRealm)
	wugnot.Deposit()

	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(stkRealm)
	_, _, amount0, amount1 := pn.Mint(quxPath, consts.WRAPPED_WUGNOT, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", maxTimeout, gsa.String())
	if amount0 != "36790" {
		"router_z4_mintQuxGnot() || amount0 should be 36790"
	}
	if amount1 != "100000" {
		"router_z4_mintQuxGnot() || amount1 should be 100000"
	}
}

func drySwapBarGnotExactIn() {
	std.TestSetRealm(gsaRealm)

	dryResult := rr.DrySwapRoute(
		barPath,               // inputToken
		consts.WRAPPED_WUGNOT, // outputToken
		"1000",                // amountSpecified
		"EXACT_IN",            // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
	)
	if dryResult != "19740" {
		panic("router_z4_drySwapBarGnotExactIn() || dryResult should be 19740")
	}
}

func drySwapBarGnotExactOut() {
	std.TestSetRealm(gsaRealm)

	dryResult := rr.DrySwapRoute(
		barPath,               // inputToken
		consts.WRAPPED_WUGNOT, // outputToken
		"20000",               // amountSpecified
		"EXACT_OUT",           // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
	)
	if dryResult != "1014" {
		panic("router_z4_drySwapBarGnotExactOut() || dryResult should be 1014")
	}
}

func drySwapGnotBarExactIn() {
	std.TestSetRealm(gsaRealm)

	dryResult := rr.DrySwapRoute(
		consts.WRAPPED_WUGNOT, // intputToken
		barPath,               // outputToken
		"5000",                // amountSpecified
		"EXACT_IN",            // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)
	if dryResult != "247" {
		panic("router_z4_drySwapGnotBarExactIn() || dryResult should be 247")
	}
}

func drySwapGnotBarExactOut() {
	std.TestSetRealm(gsaRealm)

	dryResult := rr.DrySwapRoute(
		consts.WRAPPED_WUGNOT, // intputToken
		barPath,               // outputToken
		"100",                 // amountSpecified
		"EXACT_OUT",           // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)
	if dryResult != "2027" {
		panic("router_z4_drySwapGnotBarExactOut() || dryResult should be 2027")
	}
}

// Output:
//
