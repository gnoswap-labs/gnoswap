package router

import (
	"encoding/gjson"
	"std"
	"testing"

	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"

	"gno.land/r/demo/gns"
)

func TestInitManual(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	pl.InitManual()
}

func TestCreatePool(t *testing.T) {
	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	pl.CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875

	jsonOutput := pl.ApiGetPools()
	jsonStr := gjson.Parse(jsonOutput)
	shouldEQ(t, len(jsonStr.Get("response").Array()), 1)
}

func TestPositionMint(t *testing.T) {
	// bar_baz_500 by test1
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	// Mint
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(12000), int32(15000), "100000", "100000", "0", "0", max_timeout, test1.String())
	shouldEQ(t, tokenId, uint64(1))
	// shouldEQ(t, liquidity, "1308151")
	shouldEQ(t, amount0, "100000") // ONLY BAR
	shouldEQ(t, amount1, "0")      // NO BAZ
}

func TestDrySwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500", // strRouteArr
		"100", // quoteArr
	)

	shouldEQ(t, dryResult, "-1")
}

func TestSwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	shouldPanic(
		t,
		func() {
			SwapRoute(
				barPath,    // inputToken
				bazPath,    // outputToken
				"1000",     // amountSpecified
				"EXACT_IN", // swapType
				"gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
				"100",  // quoteArr
				"2710", // tokenAmountLimit ( too few recieved (expected 2710, got 300))
			)
		})
}
