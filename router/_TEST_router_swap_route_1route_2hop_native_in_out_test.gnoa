package router

import (
	"encoding/gjson"
	"std"
	"testing"

	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/qux"
	"gno.land/r/demo/wugnot"
)

func TestInitManual(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	pl.InitManual()
}

func TestCreatePool(t *testing.T) {
	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE*3)

	pl.CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006")               // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	pl.CreatePool(bazPath, quxPath, fee500, "130621891405341611593710811006")               // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	pl.CreatePool(quxPath, consts.WRAPPED_WUGNOT, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	// 1 bar â‰ˆ 19.683 gnot

	jsonOutput := pl.ApiGetPools()
	jsonStr := gjson.Parse(jsonOutput)
	shouldEQ(t, len(jsonStr.Get("response").Array()), 3)
}

func TestPositionMintBarBaz(t *testing.T) {
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "36790") // bar
	shouldEQ(t, amount1, "99999") // baz
}

func TestPositionMintBazQux(t *testing.T) {
	std.TestSetPrevAddr(test1)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(bazPath, quxPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout)
	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, amount0, "36790")
	shouldEQ(t, amount1, "99999")

}

func TestPositionMintQuxGnot(t *testing.T) {
	std.TestSetPrevAddr(test1)

	// send
	std.TestIssueCoins(test1, std.Coins{{"ugnot", 1000009}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 1000009}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 1000009)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(quxPath, consts.WRAPPED_WUGNOT, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout)
	shouldEQ(t, tokenId, uint64(3))
	shouldEQ(t, amount0, "36790")
	shouldEQ(t, amount1, "99999")
}

func TestDrySwapRouteBarGnotExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		barPath,               // inputToken
		consts.WRAPPED_WUGNOT, // outputToken
		"1000",                // amountSpecified
		"EXACT_IN",            // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "19740")
}

func TestDrySwapRouteBarGnotExactOut(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		barPath,               // inputToken
		consts.WRAPPED_WUGNOT, // outputToken
		"20000",               // amountSpecified
		"EXACT_OUT",           // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "1012")
}

func TestDrySwapRouteGnotBarExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		consts.WRAPPED_WUGNOT, // intputToken
		barPath,               // outputToken
		"5000",                // amountSpecified
		"EXACT_IN",            // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "247")
}

func TestDrySwapRouteGnotBarExactOut(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		consts.WRAPPED_WUGNOT, // intputToken
		barPath,               // outputToken
		"100",                 // amountSpecified
		"EXACT_OUT",           // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "2003")
}
