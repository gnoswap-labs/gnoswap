package router

import (
	"encoding/gjson"
	"std"
	"testing"

	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/wugnot"
)

func TestInitManual(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	pl.InitManual()
}

func TestCreatePool(t *testing.T) {
	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE*2)

	pl.CreatePool(consts.GNS_PATH, consts.WRAPPED_WUGNOT, fee100, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	pl.CreatePool(consts.WRAPPED_WUGNOT, barPath, fee100, "130621891405341611593710811006")         // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	// 1 gns â‰ˆ 7.29 bar

	jsonOutput := pl.ApiGetPools()
	jsonStr := gjson.Parse(jsonOutput)
	shouldEQ(t, len(jsonStr.Get("response").Array()), 2)
}

func TestPositionMintGnsGnot(t *testing.T) {
	std.TestSetOrigCaller(test1)

	// send
	std.TestIssueCoins(test1, std.Coins{{"ugnot", 999999}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 999999}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 999999)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	gns.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(consts.GNS_PATH, consts.WRAPPED_WUGNOT, fee100, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, test1.String())
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "36790")
	shouldEQ(t, amount1, "99999")
}

func TestPositionMintGnotBar(t *testing.T) {
	std.TestSetOrigCaller(test1)

	// send
	std.TestIssueCoins(test1, std.Coins{{"ugnot", 999999}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 999999}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 999999)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(consts.WRAPPED_WUGNOT, barPath, fee100, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, test1.String())
	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, amount0, "100000") // 100000
	shouldEQ(t, amount1, "36789")  // 36789
}

func TestDrySwapRouteGnsBarExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		consts.GNS_PATH, // inputToken
		barPath,         // outputToken
		"1000",          // amountSpecified
		"EXACT_IN",      // swapType
		"gno.land/r/demo/gns:gno.land/r/demo/wugnot:100*POOL*gno.land/r/demo/wugnot:gno.land/r/demo/bar:100", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "7339")
}

func TestSwapRouteGnsBarExactIn(t *testing.T) {
	std.TestSetPrevAddr(test1)

	gns.Approve(a2u(consts.POOL_ADDR), 1000)   // swap input amount
	bar.Approve(a2u(consts.ROUTER_ADDR), 7328) // 0.15% fee

	swapResult := SwapRoute(
		consts.GNS_PATH, // inputToken
		barPath,         // outputToken
		"1000",          // amountSpecified
		"EXACT_IN",      // swapType
		"gno.land/r/demo/gns:gno.land/r/demo/wugnot:100*POOL*gno.land/r/demo/wugnot:gno.land/r/demo/bar:100", // strRouteArr
		"100", // quoteArr
		"0",   // tokenAmountLimit
	)
	shouldEQ(t, swapResult, "7328")
}
