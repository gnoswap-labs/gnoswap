package router

import (
	"std"
	"testing"

	"gno.land/p/demo/json"
	"gno.land/p/demo/testutils"

	"gno.land/r/demo/gnoswap/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/qux"
	"gno.land/r/demo/wugnot"
)

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*3)

	pl.CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/baz:500}]}

	pl.CreatePool(bazPath, quxPath, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500}]}

	pl.CreatePool(quxPath, consts.GNOT, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/qux:gno.land/r/demo/wugnot:500}]}

	// 1 bar â‰ˆ 19.683 gnot

	jsonStr := pl.ApiGetPools()
	root, err := json.Unmarshal([]byte(jsonStr))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 3)
}

func TestPositionMintBarBaz(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, gsa.String())
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/baz:500} {p_tickLower 9000} {p_tickUpper 11000} {tokenId 1} {liquidity 1243732} {amount0 36790} {amount1 100000}]}

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "36790")  // bar
	shouldEQ(t, amount1, "100000") // baz
}

func TestPositionMintBazQux(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	tokenId, liquidity, amount0, amount1 := pn.Mint(bazPath, quxPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, gsa.String())
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500} {p_tickLower 9000} {p_tickUpper 11000} {tokenId 2} {liquidity 1243732} {amount0 36790} {amount1 100000}]}

	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, amount0, "36790")
	shouldEQ(t, amount1, "100000")

}

func TestPositionMintQuxGnot(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	// send
	std.TestIssueCoins(consts.POSITION_ADDR, std.Coins{{"ugnot", 1000009}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 1000009}}, nil)

	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.POSITION_ADDR), consts.UINT64_MAX) // wrap unwrap

	tokenId, liquidity, amount0, amount1 := pn.Mint(quxPath, consts.GNOT, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, gsa.String())
	// ---       event: {GNOSWAP gno.land/r/demo/position Mint [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/qux:gno.land/r/demo/wugnot:500} {p_tickLower 9000} {p_tickUpper 11000} {tokenId 3} {liquidity 1243732} {amount0 36790} {amount1 100000}]}

	shouldEQ(t, tokenId, uint64(3))
	shouldEQ(t, amount0, "36790")
	shouldEQ(t, amount1, "100000")
}

// DRY BUY NATIVE
func TestDrySwapRouteBarGnotExactIn(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	dryResult := DrySwapRoute(
		barPath,     // inputToken
		consts.GNOT, // outputToken
		"1000",      // amountSpecified
		"EXACT_IN",  // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "19740")
}

// BUY NATIVE
// bar > GNOT
func TestSwapRouteBarGnotExactIn(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	wugnot.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX) // for output
	wugnot.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX) // for unwrap

	oldWugnot := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, oldWugnot, 0)

	oldUgnot := ugnotBalanceOf(gsa)
	shouldEQ(t, oldUgnot, 900009)

	// CHECK FEE COLLECTOR
	feeColUgnot := ugnotBalanceOf(consts.COMMUNITY_POOL_ADDR)
	feeColWugnot := wugnotBalanceOf(consts.COMMUNITY_POOL_ADDR)
	shouldEQ(t, feeColUgnot, 0)
	shouldEQ(t, feeColWugnot, 0)

	std.TestSetOrigCaller(gsa)
	amountIn, amountOut := SwapRoute(
		barPath,     // inputToken
		consts.GNOT, // outputToken
		"1000",      // amountSpecified
		"EXACT_IN",  // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
		"0",   // tokenAmountLimit
	)
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/baz:500} {p_zeroForOne true} {p_amountSpecified 1000} {p_sqrtPriceLimitX96 4295128740} {p_payer g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {p_recipient g1pjtpgjpsn4hjfv2n4mpz8cczdn32jkpsqwxuav} {amount0 1000} {amount1 -2711} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 1}]}
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500} {p_zeroForOne true} {p_amountSpecified 2711} {p_sqrtPriceLimitX96 4295128740} {p_payer g1pjtpgjpsn4hjfv2n4mpz8cczdn32jkpsqwxuav} {p_recipient g1pjtpgjpsn4hjfv2n4mpz8cczdn32jkpsqwxuav} {amount0 2711} {amount1 -7337} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 2}]}
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/qux:gno.land/r/demo/wugnot:500} {p_zeroForOne true} {p_amountSpecified 7337} {p_sqrtPriceLimitX96 4295128740} {p_payer g1pjtpgjpsn4hjfv2n4mpz8cczdn32jkpsqwxuav} {p_recipient g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {amount0 7337} {amount1 -19740} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 4}]}
	// ---       event: {GNOSWAP gno.land/r/demo/router SwapRoute [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_input gno.land/r/demo/bar} {p_output gnot} {p_swapType EXACT_IN} {p_amountSpecified 1000} {p_route gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500} {p_quote 100} {amountIn 1000} {amountOut -19711}]}
	shouldEQ(t, amountIn, "1000")
	shouldEQ(t, amountOut, "-19711")

	newWugnot := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, newWugnot, 0)

	newUgnot := ugnotBalanceOf(gsa)
	shouldEQ(t, newUgnot, 919720) // 900009 + 19711

	feeColUgnot = ugnotBalanceOf(consts.COMMUNITY_POOL_ADDR)
	feeColWugnot = wugnotBalanceOf(consts.COMMUNITY_POOL_ADDR)
	shouldEQ(t, feeColUgnot, 29) // UNWRAP RESULT
	shouldEQ(t, feeColWugnot, 0)
}

// DRY SELL NATIVE
func TestDrySwapRouteGnotBarExactIn(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	dryResult := DrySwapRoute(
		consts.GNOT, // intputToken
		barPath,     // outputToken
		"5000",      // amountSpecified
		"EXACT_IN",  // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "254")
}

// SELL NATIVE
// GNOT > bar
func TestSwapRouteGnotBarExactIn(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	wugnot.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // for input
	bar.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)  // for output

	oldWugnot := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, oldWugnot, 0)

	oldUgnot := ugnotBalanceOf(gsa)
	shouldEQ(t, oldUgnot, 919720)

	// send
	std.TestSetOrigSend(std.Coins{{"ugnot", 5000}}, nil)

	feeColUgnot := ugnotBalanceOf(consts.COMMUNITY_POOL_ADDR)
	feeColWugnot := wugnotBalanceOf(consts.COMMUNITY_POOL_ADDR)
	shouldEQ(t, feeColUgnot, 29)
	shouldEQ(t, feeColWugnot, 0)

	amountIn, amountOut := SwapRoute(
		consts.GNOT, // intputToken
		barPath,     // outputToken
		"5000",      // amountSpecified
		"EXACT_IN",  // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
		"0",
	)
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/qux:gno.land/r/demo/wugnot:500} {p_zeroForOne false} {p_amountSpecified 5000} {p_sqrtPriceLimitX96 1461446703485210103287273052203988822378723970341} {p_payer g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {p_recipient g1pjtpgjpsn4hjfv2n4mpz8cczdn32jkpsqwxuav} {amount0 -1869} {amount1 5000} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 3}]}
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/baz:gno.land/r/demo/qux:500} {p_zeroForOne false} {p_amountSpecified 1869} {p_sqrtPriceLimitX96 1461446703485210103287273052203988822378723970341} {p_payer g1pjtpgjpsn4hjfv2n4mpz8cczdn32jkpsqwxuav} {p_recipient g1pjtpgjpsn4hjfv2n4mpz8cczdn32jkpsqwxuav} {amount0 -691} {amount1 1869} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 1}]}
	// ---       event: {GNOSWAP gno.land/r/demo/pool Swap [{m_callType INDIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/baz:500} {p_zeroForOne false} {p_amountSpecified 691} {p_sqrtPriceLimitX96 1461446703485210103287273052203988822378723970341} {p_payer g1pjtpgjpsn4hjfv2n4mpz8cczdn32jkpsqwxuav} {p_recipient g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {amount0 -254} {amount1 691} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 1}]}
	// ---       event: {GNOSWAP gno.land/r/demo/router SwapRoute [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_input gnot} {p_output gno.land/r/demo/bar} {p_swapType EXACT_IN} {p_amountSpecified 5000} {p_route gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500} {p_quote 100} {amountIn 5000} {amountOut -254}]}
	shouldEQ(t, amountIn, "5000")
	shouldEQ(t, amountOut, "-254")

	newWugnot := wugnot.BalanceOf(a2u(gsa))
	shouldEQ(t, newWugnot, 0)

	newUgnot := ugnotBalanceOf(gsa)
	shouldEQ(t, newUgnot, 919720)

	feeColUgnot = ugnotBalanceOf(consts.COMMUNITY_POOL_ADDR)
	feeColWugnot = wugnotBalanceOf(consts.COMMUNITY_POOL_ADDR)
	shouldEQ(t, feeColUgnot, 29)
	shouldEQ(t, feeColWugnot, 0)
}

// Test Getter/Setter for SwapFee
func TestGetSwapFee(t *testing.T) {
	fee := GetSwapFee()
	shouldEQ(t, fee, uint64(15))
}

func TestSetSwapFeeNoPermission(t *testing.T) {
	dummy := testutils.TestAddress("dummy")
	std.TestSetOrigCaller(dummy)

	shouldPanicWithMsg(
		t,
		func() {
			SetSwapFee(2)
		},
		"must be called by admin",
	)
}

func TestSetSwapFeeOutOfRange(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	shouldPanicWithMsg(
		t,
		func() {
			SetSwapFee(101)
		},
		"[STAKER] reward_fee.gno__SetSwapFee() || fee(101) must be in range 0 ~ 100",
	)
}

func TestSetSwapFee(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	shouldEQ(t, GetSwapFee(), uint64(15))
	SetSwapFee(51)
	shouldEQ(t, GetSwapFee(), uint64(51))
}
