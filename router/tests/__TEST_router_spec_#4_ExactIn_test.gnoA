package router

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"
)

//=================================Test for SwapRouter exactInput 0 ->1 -> 2 in multi pool=================================

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*2)

	pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950336")

	pl.CreatePool(bazPath, fooPath, 3000, "79228162514264337593543950336")

	// jsonOutput := pl.ApiGetPools()
	// jsonStr := gjson.Parse(jsonOutput)
	// shouldEQ(t, len(jsonStr.Get("response").Array()), 2)
}

func TestPositionMint(t *testing.T) {
	// bar_baz_3000 by admin
	std.TestSetRealm(adminRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	// Mint
	pn.Mint(barPath, bazPath, uint32(3000), int32(-887220), int32(887220), "1000000", "1000000", "0", "0", max_timeout, admin, admin)

	pn.Mint(bazPath, fooPath, uint32(3000), int32(-887220), int32(887220), "1000000", "1000000", "0", "0", max_timeout, admin, admin)
}

func TestSwapRouteBarfooExactIn(t *testing.T) {
	std.TestSetRealm(adminRealm)

	bar.Approve(a2u(consts.ROUTER_ADDR), 1000000)
	foo.Approve(a2u(consts.ROUTER_ADDR), 1000000)

	token0Before := bar.BalanceOf(a2u(consts.ADMIN))
	token2Before := foo.BalanceOf(a2u(consts.ADMIN))

	amountIn, amountOut := SwapRoute(
		barPath,    // inputToken
		fooPath,    // outputToken
		"5",        // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/foo:3000", // strRouteArr
		"100", // quoteArr
		"1",   // tokenAmountLimit
	)

	token0After := bar.BalanceOf(a2u(consts.ADMIN))
	token2After := foo.BalanceOf(a2u(consts.ADMIN))

	shouldEQ(t, amountIn, "5")
	shouldEQ(t, amountOut, "-1")

	shouldEQ(t, token0After, token0Before-5)
	shouldEQ(t, token2After, token2Before+1)
}
