package router

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/gnoswap/v1/consts"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"

	"gno.land/r/gnoswap/v1/gns"
)

var (
	admin std.Address = consts.ADMIN

	fooPath string = "gno.land/r/onbloc/foo"
	barPath string = "gno.land/r/onbloc/bar"
	bazPath string = "gno.land/r/onbloc/baz"
	quxPath string = "gno.land/r/onbloc/qux"

	oblPath string = "gno.land/r/onbloc/obl"
	fee100  uint32 = 100
	fee500  uint32 = 500
	fee3000 uint32 = 3000

	maxApprove uint64 = 18446744073709551615
)

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, bazPath, fee500, common.TickMathGetSqrtRatioAtTick(1).ToString())
}

func TestPositionMint(t *testing.T) {
	// bar_baz_500 by admin
	std.TestSetRealm(adminRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 100000)
	baz.Approve(a2u(consts.POOL_ADDR), 100000)

	// Mint
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(-6000), int32(6000), "100000", "100000", "0", "0", max_timeout, admin, admin)

	uassert.Equal(t, tokenId, uint64(1))
	uassert.Equal(t, amount0, "99962")
	uassert.Equal(t, amount1, "100000")

	pool := pl.GetPool(barPath, bazPath, fee500)
	poolLiq := pool.PoolGetLiquidity()
	uassert.Equal(t, poolLiq.ToString(), "385771")

	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500"
	poolTick := pl.PoolGetSlot0Tick(poolPath)
	uassert.Equal(t, poolTick, int32(1))
}

func TestSwapRouteBarBazExactIn(t *testing.T) {
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500"

	std.TestSetRealm(adminRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX) // ITS FOR 0.15% fee

	// spend all baz in pool
	amountIn, amountOut := SwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"140000",   // amountSpecified
		"EXACT_IN", // swapType
		poolPath,   // strRouteArr
		"100",      // quoteArr
		"0",        // tokenAmountLimit
	)

	uassert.Equal(t, amountIn, "135049")
	uassert.Equal(t, amountOut, "-99848")

	pool := pl.GetPool(barPath, bazPath, fee500)
	poolLiq := pool.PoolGetLiquidity()
	uassert.Equal(t, poolLiq.ToString(), "0")

	poolTick := pl.PoolGetSlot0Tick(poolPath)
	uassert.Equal(t, poolTick, int32(-887270))
}
