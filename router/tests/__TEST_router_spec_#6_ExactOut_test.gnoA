package router

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
)

//=================================Test for SwapRouter exactOut 1 -> 0 in single pool=================================

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*2)

	pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950336")
}

func TestPositionMint(t *testing.T) {
	// bar_baz_3000 by gsa
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	// Mint
	pn.Mint(barPath, bazPath, uint32(3000), int32(-887220), int32(887220), "1000000", "1000000", "0", "0", max_timeout, gsa.String())
}

func TestSwapRouteBazBarExactOut(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.ROUTER_ADDR), 1000000)
	baz.Approve(a2u(consts.ROUTER_ADDR), 1000000)

	token0Before := bar.BalanceOf(a2u(consts.GNOSWAP_ADMIN))
	token1Before := baz.BalanceOf(a2u(consts.GNOSWAP_ADMIN))

	amountIn, amountOut := SwapRoute(
		bazPath,     // inputToken
		barPath,     // outputToken
		"1",         // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:3000", // strRouteArr
		"100", // quoteArr
		"3",   // tokenAmountLimit
	)

	token0After := bar.BalanceOf(a2u(consts.GNOSWAP_ADMIN))
	token1After := baz.BalanceOf(a2u(consts.GNOSWAP_ADMIN))

	shouldEQ(t, amountIn, "3")
	shouldEQ(t, amountOut, "-1")

	shouldEQ(t, token0After, token0Before+1)
	shouldEQ(t, token1After, token1Before-3)
}
