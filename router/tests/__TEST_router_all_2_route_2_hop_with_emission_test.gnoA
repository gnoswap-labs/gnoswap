package router

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/qux"
)

func TestCreatePool(t *testing.T) {
	shouldEQ(t, gns.TotalSupply(), uint64(100000000000000))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(0))

	std.TestSetRealm(gsaRealm)
	std.TestSkipHeights(100)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee()*2)

	pl.CreatePool(barPath, bazPath, uint32(500), "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	pl.CreatePool(bazPath, quxPath, uint32(500), "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001426940600))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(1070205450))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(285388120))
}

func TestPositionMint(t *testing.T) {
	// bar_baz_500 by gsa
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	qux.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	// Mint
	pn.Mint(barPath, bazPath, uint32(500), int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, gsa.String())
	pn.Mint(bazPath, quxPath, uint32(500), int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, gsa.String())
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001441210006))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(1080907504))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(288242001))
}

func TestDrySwapRouteBarQuxExactIn(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	dryResult := DrySwapRoute(
		barPath,    // inputToken
		quxPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500,gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500", // strRouteArr
		"50,50", // quoteArr
	)

	shouldEQ(t, dryResult, "7346")
}

func TestSwapRouteBarQuxExactIn(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), 10000)
	qux.Approve(a2u(consts.ROUTER_ADDR), 10000)

	amountIn, amountOut := SwapRoute(
		barPath,    // inputToken
		quxPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500,gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500", // strRouteArr
		"50,50", // quoteArr
		"1",     // tokenAmountLimit
	)
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001455479412))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(291095882))

	shouldEQ(t, amountIn, "1000")
	shouldEQ(t, amountOut, "-7318")
}

func TestDrySwapRouteBarQuxExactOut(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	dryResult := DrySwapRoute(
		barPath,     // inputToken
		quxPath,     // outputToken
		"1000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500,gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500", // strRouteArr
		"50,50", // quoteArr
	)

	shouldEQ(t, dryResult, "140")
}

func TestSwapRouteBarQuxExactOut(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	amountIn, amountOut := SwapRoute(
		barPath,     // inputToken
		quxPath,     // outputToken
		"1000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500,gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/qux:500", // strRouteArr
		"50,50", // quoteArr
		"99999", // tokenAmountLimit
	)
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001469748818))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(293949763))

	shouldEQ(t, amountIn, "140")
	shouldEQ(t, amountOut, "-1001")
}

func TestDrySwapRouteQuxBarExactIn(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	dryResult := DrySwapRoute(
		quxPath,    // inputToken
		barPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500,gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"30,70", // quoteArr
	)

	shouldEQ(t, dryResult, "135")
}

func TestSwapRouteQuxBarExactIn(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	amountIn, amountOut := SwapRoute(
		quxPath,    // inputToken
		barPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500,gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"30,70", // quoteArr
		"1",     // tokenAmountLimit
	)
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001484018224))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(296803644))

	shouldEQ(t, amountIn, "1000")
	shouldEQ(t, amountOut, "-135")
}

func TestDrySwapRouteQuxBarExactOut(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	dryResult := DrySwapRoute(
		quxPath,     // inputToken
		barPath,     // outputToken
		"1000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500,gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"30,70", // quoteArr
	)

	shouldEQ(t, dryResult, "7351")
}

func TestSwapRouteQuxBarExactOut(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	qux.Approve(a2u(consts.POOL_ADDR), 10000)
	bar.Approve(a2u(consts.ROUTER_ADDR), 10000)

	amountIn, amountOut := SwapRoute(
		quxPath,     // inputToken
		barPath,     // outputToken
		"1000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500,gno.land/r/onbloc/qux:gno.land/r/onbloc/baz:500*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"30,70", // quoteArr
		"99999", // tokenAmountLimit
	)
	std.TestSkipHeights(1)

	shouldEQ(t, gns.TotalSupply(), uint64(100001498287630))
	shouldEQ(t, gnsBalance(consts.EMISSION_ADDR), uint64(1))
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), uint64(0))
	shouldEQ(t, gnsBalance(consts.DEV_OPS), uint64(299657525))

	shouldEQ(t, amountIn, "7365")
	shouldEQ(t, amountOut, "-999")
}

func gnsBalance(addr std.Address) uint64 {
	return gns.BalanceOf(a2u(addr))
}
