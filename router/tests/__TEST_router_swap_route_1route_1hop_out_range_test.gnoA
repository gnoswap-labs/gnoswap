package router

import (
	"std"
	"testing"

	"gno.land/p/demo/json"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/gnoswap/v2/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
)

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, bazPath, fee500, common.TickMathGetSqrtRatioAtTick(10000).ToString())

	jsonStr := pl.ApiGetPools()
	root, err := json.Unmarshal([]byte(jsonStr))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 1)
}

func TestPositionMint(t *testing.T) {
	// bar_baz_500 by gsa
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	// Mint
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(8000), int32(12000), "100000", "100000", "0", "0", max_timeout, gsa.String())

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, liquidity, "637408")
	shouldEQ(t, amount0, "36790")
	shouldEQ(t, amount1, "100000")

	// check pool liquidity
	shouldEQ(t, pl.PoolGetLiquidity("gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500"), "637408")
}

func TestDrySwapRouteBazBarExactIn(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	dryResult := DrySwapRoute(
		bazPath,    // inputToken
		barPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
		"100", // quoteArr
	)

	shouldEQ(t, dryResult, "367")
}

func TestSwapRouteBazBarExactIn(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	shouldPanicWithMsg(
		t,
		func() {
			SwapRoute(
				bazPath,    // inputToken
				barPath,    // outputToken
				"1000",     // amountSpecified
				"EXACT_IN", // swapType
				"gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:500", // strRouteArr
				"100",  // quoteArr
				"2710", // tokenAmountLimit ( too few recieved (expected 2710, got 300))
			)

		},
		"[ROUTER] router.gno__finalizeSwap() || Too few received for user (expected minimum: 2710, actual: 367, swapType: EXACT_IN)",
	)
}
