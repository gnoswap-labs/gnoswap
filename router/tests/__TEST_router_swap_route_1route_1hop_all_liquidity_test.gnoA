package router

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/common"
	"gno.land/r/gnoswap/consts"

	pl "gno.land/r/gnoswap/pool"
	pn "gno.land/r/gnoswap/position"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"

	"gno.land/r/gnoswap/gns"
)

func TestCreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, bazPath, fee500, common.TickMathGetSqrtRatioAtTick(1).ToString())
}

func TestPositionMint(t *testing.T) {
	// bar_baz_500 by gsa
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 100000)
	baz.Approve(a2u(consts.POOL_ADDR), 100000)

	// Mint
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(-6000), int32(6000), "100000", "100000", "0", "0", max_timeout, gsa.String())

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "99962")
	shouldEQ(t, amount1, "100000")

	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500"
	poolLiq := pl.PoolGetLiquidity(poolPath)
	shouldEQ(t, poolLiq, "385771")

	poolTick := pl.PoolGetSlot0Tick(poolPath)
	shouldEQ(t, poolTick, int32(1))
}

func TestSwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX) // ITS FOR 0.15% fee

	// spend all baz in pool
	amountIn, amountOut := SwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"140000",   // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500", // strRouteArr
		"100", // quoteArr
		"0",   // tokenAmountLimit
	)

	shouldEQ(t, amountIn, "135049")
	shouldEQ(t, amountOut, "-99848")

	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:500"
	poolLiq := pl.PoolGetLiquidity(poolPath)
	shouldEQ(t, poolLiq, "0")

	poolTick := pl.PoolGetSlot0Tick(poolPath)
	shouldEQ(t, poolTick, int32(-887270))
}
