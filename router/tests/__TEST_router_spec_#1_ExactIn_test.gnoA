package router

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/consts"

	pl "gno.land/r/gnoswap/v2/pool"
	pn "gno.land/r/gnoswap/v2/position"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"

	"gno.land/r/gnoswap/v2/gns"
)

const (
	FEE_LOW    uint32 = 500
	FEE_MEDIUM uint32 = 3000
	FEE_HIGH   uint32 = 10000
)

var (
	gsa std.Address = consts.GNOSWAP_ADMIN

	fooPath string = "gno.land/r/onbloc/foo"
	barPath string = "gno.land/r/onbloc/bar"
	bazPath string = "gno.land/r/onbloc/baz"
	quxPath string = "gno.land/r/onbloc/qux"

	token1Path string

	oblPath string = "gno.land/r/onbloc/obl"
	fee100  uint32 = 100
	fee500  uint32 = 500
	fee3000 uint32 = 3000

	maxApprove uint64 = 18446744073709551615

	user1Addr std.Address = "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec"
)

//=================================Test for SwapRouter exactInput 0 to 1 in single pool=================================

func TestcreatePool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), pl.GetPoolCreationFee())
	pl.CreatePool(barPath, bazPath, FEE_MEDIUM, "79228162514264337593543950336")

	bar.Transfer(a2u(user1Addr), 10000)
}

func TestPositionMint(t *testing.T) {
	// bar_baz_3000 by gsa
	std.TestSetRealm(gsaRealm)
	bar.Approve(a2u(consts.POOL_ADDR), 100000000)
	baz.Approve(a2u(consts.POOL_ADDR), 100000000)

	// Mint
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, FEE_MEDIUM, int32(-887220), int32(887220), "100000000", "100000000", "0", "0", max_timeout, gsa.String())

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "100000000")
	shouldEQ(t, amount1, "100000000")

	pool := pl.GetPool(barPath, bazPath, FEE_MEDIUM)
	poolLiq := pool.PoolGetLiquidity()
	shouldEQ(t, poolLiq.ToString(), "100000000")

	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000"
	poolTick := pl.PoolGetSlot0Tick(poolPath)
	// shouldEQ(t, poolTick, int32(0)) // got -1, expected 0
}

func TestExactInputSinglePool(t *testing.T) {
	// 0 -> 1
	pool := pl.GetPool(barPath, bazPath, FEE_MEDIUM)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000"

	user1Realm := std.NewUserRealm(user1Addr)
	std.TestSetOrigCaller(user1Addr)
	std.TestSetRealm(user1Realm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

	poolToken0Before := bar.BalanceOf(a2u(consts.POOL_ADDR))
	poolToken1Before := baz.BalanceOf(a2u(consts.POOL_ADDR))

	user1Token0Before := bar.BalanceOf(a2u(user1Addr))
	user1Token1Before := baz.BalanceOf(a2u(user1Addr))

	// set router protocol fee to 0%
	swapFee = uint64(0)

	amountIn, amountOut := SwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"3",        // amountSpecified
		"EXACT_IN", // swapType
		poolPath,   // strRouteArr
		"100",      // quoteArr
		"1",        // tokenAmountLimit
	)

	shouldEQ(t, amountIn, "3")
	shouldEQ(t, amountOut, "-1")

	poolToken0After := bar.BalanceOf(a2u(consts.POOL_ADDR))
	poolToken1After := baz.BalanceOf(a2u(consts.POOL_ADDR))

	user1Token0After := bar.BalanceOf(a2u(user1Addr))
	user1Token1After := baz.BalanceOf(a2u(user1Addr))

	shouldEQ(t, user1Token0After, user1Token0Before-3)
	shouldEQ(t, user1Token1After, user1Token1Before+1)
	shouldEQ(t, poolToken0After, poolToken0Before+3)
	shouldEQ(t, poolToken1After, poolToken1Before-1)
}
