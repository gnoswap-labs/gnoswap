package gnoswap

import (
	"math"
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/r/demo/users"

	bar "gno.land/r/bar"
	foo "gno.land/r/foo"
)

var (
	gsa  = testutils.TestAddress("gsa")  // Gnoswap Admin
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	tr01 = testutils.TestAddress("tr01") // Trader 01
)

func init() {
	std.TestSetOrigCaller(lp01)
	foo.FaucetL()
	bar.FaucetL()

	std.TestSetOrigCaller(tr01)
	foo.FaucetL()
	bar.FaucetL()

	// debug - print addr
	// println(gsa, "// gsa")
	// println(lp01, "// lp01")
	// println(tr01, "// tr01")
	// println(GetOrigPkgAddr(), "// pool")
}

var (
	// Common
	pToken0 = "foo"
	pToken1 = "bar"

	pFee1           bigint = 500
	test_tickLower1 bigint = 9000
	test_tickUpper1 bigint = 11000

	pFee2           bigint = 3000
	test_tickLower2 bigint = 9600
	test_tickUpper2 bigint = 12000

	test_liquidityExpect bigint = 1000
)

// foo & bar & 500
func TestFirstPool(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	Init()
	CreatePool(pToken0, pToken1, pFee1, 130621891405341611593710811006)

	shouldPanic(t, func() { CreatePool(pToken0, pToken1, pFee1, 130621891405341611593710811006) })

	// Approve
	std.TestSetOrigCaller(lp01)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	foo.Approve(users.AddressOrName(lp01), 50000000)
	bar.Approve(users.AddressOrName(lp01), 50000000)

	std.TestSetOrigCaller(tr01)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	foo.Approve(users.AddressOrName(tr01), 50000000)
	bar.Approve(users.AddressOrName(tr01), 50000000)

	// Test Only Swap
	pool := GetPool(pToken0, pToken1, pFee1)
	test_liquidity := pool.GetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	std.TestSetOrigCaller(lp01)
	Mint(pToken0, pToken1, pFee1, lp01, test_tickLower1, test_tickUpper1, test_liquidityExpect*10000)

	// Swap several times
	std.TestSetOrigCaller(tr01)
	test_price := bigint(MIN_SQRT_RATIO + 1) // maximum price

	{
		println("Swap #1")
		println("> direction: token0 -> token1")
		println("> amount: 10000")

		poolOldToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userOldToken0Bal := BalanceOf(pool.token0, tr01)
		userOldToken1Bal := BalanceOf(pool.token1, tr01)

		amount0, amount1 := Swap(pToken0, pToken1, pFee1, tr01, true, bigint(10000), test_price)

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userNewToken0Bal := BalanceOf(pool.token0, tr01)
		userNewToken1Bal := BalanceOf(pool.token1, tr01)

		shouldEQ(t, userOldToken0Bal-amount0, userNewToken0Bal)
		shouldEQ(t, userOldToken1Bal-amount1, userNewToken1Bal)
		shouldEQ(t, poolOldToken0Bal+amount0, poolNewToken0Bal)
		shouldEQ(t, poolOldToken1Bal+amount1, poolNewToken1Bal)

		println("Pool")
		println("> token0:", poolOldToken0Bal, "->", poolNewToken0Bal, "( diff:", poolNewToken0Bal-poolOldToken0Bal, ")")
		println("> token1:", poolOldToken1Bal, "->", poolNewToken1Bal, "( diff:", poolNewToken1Bal-poolOldToken1Bal, ")")

		println("Trader tr01")
		println("> token0:", userOldToken0Bal, "->", userNewToken0Bal, "( diff:", userNewToken0Bal-userOldToken0Bal, ")")
		println("> token1:", userOldToken1Bal, "->", userNewToken1Bal, "( diff:", userNewToken1Bal-userOldToken1Bal, ")")
		println()
	}

	{
		println("Swap #2")
		println("> direction: token0 -> token1")
		println("> amount: 5000")

		poolOldToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userOldToken0Bal := BalanceOf(pool.token0, tr01)
		userOldToken1Bal := BalanceOf(pool.token1, tr01)

		amount0, amount1 := Swap(pToken0, pToken1, pFee1, tr01, true, 5000, test_price) // give enough amount to take fees away

		poolNewToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userNewToken0Bal := BalanceOf(pool.token0, tr01)
		userNewToken1Bal := BalanceOf(pool.token1, tr01)

		shouldEQ(t, userOldToken0Bal-amount0, userNewToken0Bal)
		shouldEQ(t, userOldToken1Bal-amount1, userNewToken1Bal)
		shouldEQ(t, poolOldToken0Bal+amount0, poolNewToken0Bal)
		shouldEQ(t, poolOldToken1Bal+amount1, poolNewToken1Bal)

		println("Pool")
		println("> token0:", poolOldToken0Bal, "->", poolNewToken0Bal, "( diff:", poolNewToken0Bal-poolOldToken0Bal, ")")
		println("> token1:", poolOldToken1Bal, "->", poolNewToken1Bal, "( diff:", poolNewToken1Bal-poolOldToken1Bal, ")")

		println("Trader tr01")
		println("> token0:", userOldToken0Bal, "->", userNewToken0Bal, "( diff:", userNewToken0Bal-userOldToken0Bal, ")")
		println("> token1:", userOldToken1Bal, "->", userNewToken1Bal, "( diff:", userNewToken1Bal-userOldToken1Bal, ")")
		println()
	}

	{
		println("Swap #3")
		println("> direction: token0 -> token1")
		println("> amount: 1000")

		poolOldToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userOldToken0Bal := BalanceOf(pool.token0, tr01)
		userOldToken1Bal := BalanceOf(pool.token1, tr01)

		amount0, amount1 := Swap(pToken0, pToken1, pFee1, tr01, true, 1000, test_price) // give enough amount to take fees away

		poolNewToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userNewToken0Bal := BalanceOf(pool.token0, tr01)
		userNewToken1Bal := BalanceOf(pool.token1, tr01)

		shouldEQ(t, userOldToken0Bal-amount0, userNewToken0Bal)
		shouldEQ(t, userOldToken1Bal-amount1, userNewToken1Bal)
		shouldEQ(t, poolOldToken0Bal+amount0, poolNewToken0Bal)
		shouldEQ(t, poolOldToken1Bal+amount1, poolNewToken1Bal)

		println("Pool")
		println("> token0:", poolOldToken0Bal, "->", poolNewToken0Bal, "( diff:", poolNewToken0Bal-poolOldToken0Bal, ")")
		println("> token1:", poolOldToken1Bal, "->", poolNewToken1Bal, "( diff:", poolNewToken1Bal-poolOldToken1Bal, ")")

		println("Trader tr01")
		println("> token0:", userOldToken0Bal, "->", userNewToken0Bal, "( diff:", userNewToken0Bal-userOldToken0Bal, ")")
		println("> token1:", userOldToken1Bal, "->", userNewToken1Bal, "( diff:", userNewToken1Bal-userOldToken1Bal, ")")
		println()
	}

	// Swap toek1n -> token0
	{
		println("Swap #4")
		println("> direction: token1 -> token0")
		println("> amount: 16000")

		poolOldToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userOldToken0Bal := BalanceOf(pool.token0, tr01)
		userOldToken1Bal := BalanceOf(pool.token1, tr01)

		amount0, amount1 := Swap(pToken0, pToken1, pFee1, tr01, false, 16000, (MAX_SQRT_RATIO - 1)) // give enough amount to take fees away

		poolNewToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userNewToken0Bal := BalanceOf(pool.token0, tr01)
		userNewToken1Bal := BalanceOf(pool.token1, tr01)

		shouldEQ(t, userOldToken0Bal-amount0, userNewToken0Bal)
		shouldEQ(t, userOldToken1Bal-amount1, userNewToken1Bal)
		shouldEQ(t, poolOldToken0Bal+amount0, poolNewToken0Bal)
		shouldEQ(t, poolOldToken1Bal+amount1, poolNewToken1Bal)

		println("Pool")
		println("> token0:", poolOldToken0Bal, "->", poolNewToken0Bal, "( diff:", poolNewToken0Bal-poolOldToken0Bal, ")")
		println("> token1:", poolOldToken1Bal, "->", poolNewToken1Bal, "( diff:", poolNewToken1Bal-poolOldToken1Bal, ")")

		println("Trader tr01")
		println("> token0:", userOldToken0Bal, "->", userNewToken0Bal, "( diff:", userNewToken0Bal-userOldToken0Bal, ")")
		println("> token1:", userOldToken1Bal, "->", userNewToken1Bal, "( diff:", userNewToken1Bal-userOldToken1Bal, ")")
		println()
	}

	// Swap with Protocol
	std.TestSetOrigCaller(gsa)

	SetFeeProtocol(6, 8)
	test_slot0 := pool.GetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(134))

	// Make ProtocolFee via Swap by tr01 ( Mint by lp01 )
	std.TestSetOrigCaller(lp01)
	{
		println("Swap #5 - with protocol fee enabled")
		println("> direction: token0 -> token1")
		println("> amount: 2000000")

		gsaOldToken0Bal := BalanceOf(pool.token0, gsa)
		gsaOldToken1Bal := BalanceOf(pool.token1, gsa)

		std.TestSetOrigCaller(tr01)
		Swap(pToken0, pToken1, pFee1, tr01, true, 100000, MIN_SQRT_RATIO+1) // swap token0 -> token1 => fee only in token0
		Swap(pToken0, pToken1, pFee1, tr01, true, 100000, MIN_SQRT_RATIO+1) // more protocol fee

		// Gnoswap Admin will collect protocol fee
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(pToken0, pToken1, pFee1, gsa, 100000, 100000)

		gsaNewToken0Bal := BalanceOf(pool.token0, gsa)
		gsaNewToken1Bal := BalanceOf(pool.token1, gsa)

		println("Gnoswap Admin")
		println("> token0:", gsaOldToken0Bal, "->", gsaNewToken0Bal, "( diff:", gsaNewToken0Bal-gsaOldToken0Bal, ")")
		println("> token1:", gsaOldToken1Bal, "->", gsaNewToken1Bal, "( diff:", gsaNewToken1Bal-gsaOldToken1Bal, ")")
		println()
	}

	{
		println("Swap #6 - with protocol fee enabled")
		println("> direction: token1 -> token0")
		println("> amount: 2000000")

		gsaOldToken0Bal := BalanceOf(pool.token0, gsa)
		gsaOldToken1Bal := BalanceOf(pool.token1, gsa)

		std.TestSetOrigCaller(tr01)
		Swap(pToken0, pToken1, pFee1, tr01, false, 100000, MAX_SQRT_RATIO-1) // swap token0 -> token1 => fee only in token0
		Swap(pToken0, pToken1, pFee1, tr01, false, 100000, MAX_SQRT_RATIO-1) // more protocol fee

		// Gnoswap Admin will collect protocol fee
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(pToken0, pToken1, pFee1, gsa, 100000, 100000)

		gsaNewToken0Bal := BalanceOf(pool.token0, gsa)
		gsaNewToken1Bal := BalanceOf(pool.token1, gsa)

		println("Gnoswap Admin")
		println("> token0:", gsaOldToken0Bal, "->", gsaNewToken0Bal, "( diff:", gsaNewToken0Bal-gsaOldToken0Bal, ")")
		println("> token1:", gsaOldToken1Bal, "->", gsaNewToken1Bal, "( diff:", gsaNewToken1Bal-gsaOldToken1Bal, ")")
		println()
	}
}

// foo & bar & 3000
func TestSecondPool(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	// Init()
	CreatePool(pToken0, pToken1, pFee2, 130621891405341611593710811006)

	shouldPanic(t, func() { CreatePool(pToken0, pToken1, pFee2, 130621891405341611593710811006) })

	// Approve
	std.TestSetOrigCaller(lp01)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	foo.Approve(users.AddressOrName(lp01), 50000000)
	bar.Approve(users.AddressOrName(lp01), 50000000)

	std.TestSetOrigCaller(tr01)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	foo.Approve(users.AddressOrName(tr01), 50000000)
	bar.Approve(users.AddressOrName(tr01), 50000000)

	// Test Only Swap
	pool := GetPool(pToken0, pToken1, pFee2)
	test_liquidity := pool.GetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	std.TestSetOrigCaller(lp01)
	m1, m2 := Mint(pToken0, pToken1, pFee2, lp01, test_tickLower2, test_tickUpper2, test_liquidityExpect*1000)

	// Swap several times
	std.TestSetOrigCaller(tr01)
	test_price := bigint(MIN_SQRT_RATIO + 1) // maximum price

	{
		println("Swap #1")
		println("> direction: token0 -> token1")
		println("> amount: 50000")

		poolOldToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userOldToken0Bal := BalanceOf(pool.token0, tr01)
		userOldToken1Bal := BalanceOf(pool.token1, tr01)

		amount0, amount1 := Swap(pToken0, pToken1, pFee2, tr01, true, 50000, test_price)

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userNewToken0Bal := BalanceOf(pool.token0, tr01)
		userNewToken1Bal := BalanceOf(pool.token1, tr01)

		shouldEQ(t, userOldToken0Bal-amount0, userNewToken0Bal)
		shouldEQ(t, userOldToken1Bal-amount1, userNewToken1Bal)
		shouldEQ(t, poolOldToken0Bal+amount0, poolNewToken0Bal)
		shouldEQ(t, poolOldToken1Bal+amount1, poolNewToken1Bal)

		println("Pool")
		println("> token0:", poolOldToken0Bal, "->", poolNewToken0Bal, "( diff:", poolNewToken0Bal-poolOldToken0Bal, ")")
		println("> token1:", poolOldToken1Bal, "->", poolNewToken1Bal, "( diff:", poolNewToken1Bal-poolOldToken1Bal, ")")

		println("Trader tr01")
		println("> token0:", userOldToken0Bal, "->", userNewToken0Bal, "( diff:", userNewToken0Bal-userOldToken0Bal, ")")
		println("> token1:", userOldToken1Bal, "->", userNewToken1Bal, "( diff:", userNewToken1Bal-userOldToken1Bal, ")")
		println()
	}

	{
		println("Swap #2")
		println("> direction: token0 -> token1")
		println("> amount: 5000")

		poolOldToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userOldToken0Bal := BalanceOf(pool.token0, tr01)
		userOldToken1Bal := BalanceOf(pool.token1, tr01)

		amount0, amount1 := Swap(pToken0, pToken1, pFee2, tr01, true, 5000, test_price) // give enough amount to take fees away

		poolNewToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userNewToken0Bal := BalanceOf(pool.token0, tr01)
		userNewToken1Bal := BalanceOf(pool.token1, tr01)

		shouldEQ(t, userOldToken0Bal-amount0, userNewToken0Bal)
		shouldEQ(t, userOldToken1Bal-amount1, userNewToken1Bal)
		shouldEQ(t, poolOldToken0Bal+amount0, poolNewToken0Bal)
		shouldEQ(t, poolOldToken1Bal+amount1, poolNewToken1Bal)

		println("Pool")
		println("> token0:", poolOldToken0Bal, "->", poolNewToken0Bal, "( diff:", poolNewToken0Bal-poolOldToken0Bal, ")")
		println("> token1:", poolOldToken1Bal, "->", poolNewToken1Bal, "( diff:", poolNewToken1Bal-poolOldToken1Bal, ")")

		println("Trader tr01")
		println("> token0:", userOldToken0Bal, "->", userNewToken0Bal, "( diff:", userNewToken0Bal-userOldToken0Bal, ")")
		println("> token1:", userOldToken1Bal, "->", userNewToken1Bal, "( diff:", userNewToken1Bal-userOldToken1Bal, ")")
		println()
	}

	{
		println("Swap #3")
		println("> direction: token0 -> token1")
		println("> amount: 1000")

		poolOldToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userOldToken0Bal := BalanceOf(pool.token0, tr01)
		userOldToken1Bal := BalanceOf(pool.token1, tr01)

		amount0, amount1 := Swap(pToken0, pToken1, pFee2, tr01, true, 1000, test_price) // give enough amount to take fees away

		poolNewToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userNewToken0Bal := BalanceOf(pool.token0, tr01)
		userNewToken1Bal := BalanceOf(pool.token1, tr01)

		shouldEQ(t, userOldToken0Bal-amount0, userNewToken0Bal)
		shouldEQ(t, userOldToken1Bal-amount1, userNewToken1Bal)
		shouldEQ(t, poolOldToken0Bal+amount0, poolNewToken0Bal)
		shouldEQ(t, poolOldToken1Bal+amount1, poolNewToken1Bal)

		println("Pool")
		println("> token0:", poolOldToken0Bal, "->", poolNewToken0Bal, "( diff:", poolNewToken0Bal-poolOldToken0Bal, ")")
		println("> token1:", poolOldToken1Bal, "->", poolNewToken1Bal, "( diff:", poolNewToken1Bal-poolOldToken1Bal, ")")

		println("Trader tr01")
		println("> token0:", userOldToken0Bal, "->", userNewToken0Bal, "( diff:", userNewToken0Bal-userOldToken0Bal, ")")
		println("> token1:", userOldToken1Bal, "->", userNewToken1Bal, "( diff:", userNewToken1Bal-userOldToken1Bal, ")")
		println()
	}

	// Swap toek1n -> token0
	{
		println("Swap #4")
		println("> direction: token1 -> token0")
		println("> amount: 16000")

		poolOldToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userOldToken0Bal := BalanceOf(pool.token0, tr01)
		userOldToken1Bal := BalanceOf(pool.token1, tr01)

		amount0, amount1 := Swap(pToken0, pToken1, pFee2, tr01, false, 16000, (MAX_SQRT_RATIO - 1)) // give enough amount to take fees away

		poolNewToken0Bal := BalanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := BalanceOf(pool.token1, GetOrigPkgAddr())

		userNewToken0Bal := BalanceOf(pool.token0, tr01)
		userNewToken1Bal := BalanceOf(pool.token1, tr01)

		shouldEQ(t, userOldToken0Bal-amount0, userNewToken0Bal)
		shouldEQ(t, userOldToken1Bal-amount1, userNewToken1Bal)
		shouldEQ(t, poolOldToken0Bal+amount0, poolNewToken0Bal)
		shouldEQ(t, poolOldToken1Bal+amount1, poolNewToken1Bal)

		println("Pool")
		println("> token0:", poolOldToken0Bal, "->", poolNewToken0Bal, "( diff:", poolNewToken0Bal-poolOldToken0Bal, ")")
		println("> token1:", poolOldToken1Bal, "->", poolNewToken1Bal, "( diff:", poolNewToken1Bal-poolOldToken1Bal, ")")

		println("Trader tr01")
		println("> token0:", userOldToken0Bal, "->", userNewToken0Bal, "( diff:", userNewToken0Bal-userOldToken0Bal, ")")
		println("> token1:", userOldToken1Bal, "->", userNewToken1Bal, "( diff:", userNewToken1Bal-userOldToken1Bal, ")")
		println()
	}

	// Swap with Protocol
	std.TestSetOrigCaller(gsa)

	SetFeeProtocol(6, 8)
	test_slot0 := pool.GetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(134))

	// Make ProtocolFee via Swap by tr01 ( Mint by lp01 )
	std.TestSetOrigCaller(lp01)
	{
		println("Swap #5 - with protocol fee enabled")
		println("> direction: token0 -> token1")
		println("> amount: 2000000")

		gsaOldToken0Bal := BalanceOf(pool.token0, gsa)
		gsaOldToken1Bal := BalanceOf(pool.token1, gsa)

		std.TestSetOrigCaller(tr01)
		Swap(pToken0, pToken1, pFee2, tr01, true, 100000, MIN_SQRT_RATIO+1) // swap token0 -> token1 => fee only in token0
		Swap(pToken0, pToken1, pFee2, tr01, true, 100000, MIN_SQRT_RATIO+1) // more protocol fee

		// Gnoswap Admin will collect protocol fee
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(pToken0, pToken1, pFee2, gsa, 100000, 100000)

		gsaNewToken0Bal := BalanceOf(pool.token0, gsa)
		gsaNewToken1Bal := BalanceOf(pool.token1, gsa)

		println("Gnoswap Admin")
		println("> token0:", gsaOldToken0Bal, "->", gsaNewToken0Bal, "( diff:", gsaNewToken0Bal-gsaOldToken0Bal, ")")
		println("> token1:", gsaOldToken1Bal, "->", gsaNewToken1Bal, "( diff:", gsaNewToken1Bal-gsaOldToken1Bal, ")")
		println()
	}

	{
		println("Swap #6 - with protocol fee enabled")
		println("> direction: token1 -> token0")
		println("> amount: 2000000")

		gsaOldToken0Bal := BalanceOf(pool.token0, gsa)
		gsaOldToken1Bal := BalanceOf(pool.token1, gsa)

		std.TestSetOrigCaller(tr01)
		Swap(pToken0, pToken1, pFee2, tr01, false, 100000, MAX_SQRT_RATIO-1) // swap token0 -> token1 => fee only in token0
		Swap(pToken0, pToken1, pFee2, tr01, false, 100000, MAX_SQRT_RATIO-1) // more protocol fee

		// Gnoswap Admin will collect protocol fee
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(pToken0, pToken1, pFee2, gsa, 100000, 100000)

		gsaNewToken0Bal := BalanceOf(pool.token0, gsa)
		gsaNewToken1Bal := BalanceOf(pool.token1, gsa)

		println("Gnoswap Admin")
		println("> token0:", gsaOldToken0Bal, "->", gsaNewToken0Bal, "( diff:", gsaNewToken0Bal-gsaOldToken0Bal, ")")
		println("> token1:", gsaOldToken1Bal, "->", gsaNewToken1Bal, "( diff:", gsaNewToken1Bal-gsaOldToken1Bal, ")")
		println()
	}
}

/* GETTER_API TEST */
// func TestGetPoolInfo(t *testing.T) {
// 	tapi := ApiGetPoolInfo(pToken0, pToken1, pFee)
// 	println(tapi)
// }

// func TestGetTokenInfo(t *testing.T) {
// 	tapi0 := ApiGetTokenInfo(pToken0, pToken1, pFee, 0)
// 	println(tapi0)

// 	tapi1 := ApiGetTokenInfo(pToken0, pToken1, pFee, 1)
// 	println(tapi1)
// }

// func TestGetUserInfo(t *testing.T) {
// 	uapi := ApiGetUserInfo(pToken0, pToken1, pFee, "g1d3crqv2lta047h6lta047h6lta047h6lnjw069") // lp01
// 	println(uapi)
// }

/* HELPER */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldNEQ(t *testing.T, got, expected interface{}) {
	if got == expected {
		t.Errorf("got %v, didn't expected %v", got, expected)
	}
}

func shouldPanic(t *testing.T, f func()) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("expected panic")
		}
	}()
	f()
}
