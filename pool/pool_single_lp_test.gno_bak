package gnoswap

import (
	"std"
	"math"
	
	"testing"
	"gno.land/p/demo/testutils"
	"gno.land/r/demo/users"

	"gno.land/r/foo"
	"gno.land/r/bar"
)

var (
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	sp01 = testutils.TestAddress("sp01") // Swap Executor 01
<<<<<<< HEAD:pool/pool_test.gno
	po01 = testutils.TestAddress("po01") // Pool Owner 01
	admin = testutils.TestAddress("admin") // Admin

	rv01 = testutils.TestAddress("rv01") // Receiver 01
	rv02 = testutils.TestAddress("rv02") // Receiver 02
	rv03 = testutils.TestAddress("rv03") // Receiver 03

	token0 = "foo"
	token1 = "bar"
=======
	gso = testutils.TestAddress("gso") // GnoSwap Owner
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak
)


func init() {
	std.TestSetOrigCaller(lp01)
	foo.Faucet()
	foo.Faucet()
	foo.Faucet()
	foo.Faucet()
	foo.Faucet()
	bar.Faucet()
	bar.Faucet()
	bar.Faucet()
	bar.Faucet()
	bar.Faucet()

	std.TestSetOrigCaller(sp01)
	foo.Faucet()
	foo.Faucet()
	foo.Faucet()
	foo.Faucet()
	foo.Faucet()
	bar.Faucet()
	bar.Faucet()
	bar.Faucet()
	bar.Faucet()
	bar.Faucet()
}


var (
	// Common
	test_tickLower bigint = 9000
	test_tickUpper bigint = 11000
	test_liquidityExpect bigint = 1000

	test_tickLower2 bigint = 50000
	test_tickUpper2 bigint = 100000
)

<<<<<<< HEAD:pool/pool_test.gno
func MakeTestPool() *Pool {
=======
func TestInit(t *testing.T) {
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak
	var (
		// 500		= 0.05% // USv3 default
		// 3000		= 0.3% // USv3 default
		// 10000	= 1% // USv3 default
		test_fee bigint = 3000

		test_tickSpacing bigint = 10
		test_sqrtPrice bigint = 130621891405341611593710811006 // tick = 10000
	)
<<<<<<< HEAD:pool/pool_test.gno

	return NewPool("foo", "bar", test_fee, test_tickSpacing, test_sqrtPrice, test_tick)
}


func testInit(t *testing.T) *Pool {
	pool := MakeTestPool()	
=======
	Init(
		test_fee, 
		test_tickSpacing, 
		test_sqrtPrice, 
	)
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak

	std.TestSetOrigCaller(lp01)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)

	std.TestSetOrigCaller(sp01)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)

	return pool
}


<<<<<<< HEAD:pool/pool_test.gno

func testMint(t *testing.T, pool *Pool) {
=======
// func TestBeforeBalance(t* testing.T) {
// 	println("=============================== Before All Swap")
// 	PrintUserBalance("lp01", lp01) // Liquidity Provider
// 	println()

// 	PrintUserBalance("sp01", sp01) // Swap Exector
// 	println()

// 	PrintUserBalance("gso", gso)	 // GnoSwap Owner
// 	println()

// 	PrintUserBalance("pool", GetOrigPkgAddr())
// 	println()
// }


func TestMint(t *testing.T) {
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak
	std.TestSetOrigCaller(lp01)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)

	test_liquidity := pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect)

	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	m1, m2 := pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	m11, m12 := pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)

	shouldNEQ(t, m1, bigint(0))
	shouldNEQ(t, m2, bigint(0))
	shouldEQ(t, m1, m11)
	shouldEQ(t, m2, m12)

	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

	// tickLower > currentTick X
	pool.Mint(lp01, test_tickLower2, test_tickUpper2, test_liquidityExpect)

	// tickUpper < current tick
	pool.Mint(lp01, -test_tickUpper2, -test_tickLower2, test_liquidityExpect)

	// tickUpper < current_tick
	pool.Mint(lp01, -test_tickUpper, -test_tickLower, test_liquidityExpect)

	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

<<<<<<< HEAD:pool/pool_test.gno
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*20)
}



func testBurn(t *testing.T, pool *Pool) {
	b1, b2 := pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect)
	b11, b12 := pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect)
=======
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect)
	test_liquidity = GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect * 20)
}


func TestBurn(t *testing.T) {
	b1, b2 := Burn(test_tickLower, test_tickUpper, test_liquidityExpect)
	b11, b12 := Burn(test_tickLower, test_tickUpper, test_liquidityExpect)
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak
	shouldEQ(t, b1, b11)
	shouldEQ(t, b2, b12)

	test_liquidity := pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*18)

	pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect*8)
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

	pool.Burn(test_tickLower, test_tickUpper, 1)
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, bigint(9999))

	pool.Burn(test_tickLower, test_tickUpper, bigint(999))
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect * 9)

	pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect * 9)
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	// can't burn when liq is 0
	// (Burn(test_tickLower, test_tickUpper, test_liquidityExpect))
	shouldPanic(t, func() { pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect) })
}


<<<<<<< HEAD:pool/pool_test.gno

func testCollect(t *testing.T, pool *Pool) {
=======
func TestCollect(t *testing.T) {
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak
	// withdraw all token
	pool.Collect(lp01, test_tickLower, test_tickUpper, 50000000, 50000000)

	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	c1, c2 := pool.Collect(lp01, test_tickLower, test_tickUpper, 50000000, 50000000)

	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	c3, c4 := pool.Collect(lp01, test_tickLower, test_tickUpper, 50000000, 50000000)

	shouldEQ(t, c1, c3)
	shouldEQ(t, c2, c4)

	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	c5, c6 := pool.Collect(lp01, test_tickLower, test_tickUpper, 100, 100)
	shouldEQ(t, c5, bigint(100))
	shouldEQ(t, c6, bigint(100))
	
	c7, c8 := pool.Collect(lp01, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldEQ(t, c7, c3 - bigint(100))
	shouldEQ(t, c8, c4 - bigint(100))


	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	// Burn(test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	// no burn => no collect
	c9, c10 := pool.Collect(lp01, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldEQ(t, c9, bigint(0))
	shouldEQ(t, c10, bigint(0))

	// burn => some collect
	pool.Burn(test_tickLower, test_tickUpper, test_liquidityExpect * 15)
	c11, c12 := pool.Collect(lp01, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldNEQ(t, c11, bigint(0))
	shouldNEQ(t, c12, bigint(0))
}



func testSwap(t *testing.T, pool *Pool) {
	// 	Swap token0 -> token1
<<<<<<< HEAD:pool/pool_test.gno
	var test_sqrtPriceExpect bigint = 8 // shuold be same as test_sqrtPrice
	test_slot0 := pool.GetSlot0()

	std.TestSetOrigCaller(lp01)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect * 15)

	std.TestSetOrigCaller(sp01)
	test_price := pool.GetSqrtPrice() - 1
	s1, s2 := pool.Swap(sp01, true, 100000, test_price) // give enough amount to take fees away
	// println("s1:", s1)
	// println("s2:", s2)
	shouldGTE(t, 0, s1 * s2) // token1 will be minus, so 0 shoule always GTE

	var test_minPrice, test_maxPrice bigint
	test_minPrice = (test_price * test_price)
	test_maxPrice = (test_sqrtPriceExpect * test_sqrtPriceExpect)

	test_swapPrice1 := big.Abs(s2) / big.Abs(s1)
	shouldGTE(t, test_swapPrice1, test_minPrice)
	shouldGTE(t, test_maxPrice, test_swapPrice1)

	test_newPrice1 := pool.GetSqrtPrice() - 1
	shouldGTE(t, test_price, test_newPrice1)

	s3, s4 := pool.Swap(sp01, true, 100000, test_newPrice1)
	// println("s3:", s3)
	// println("s4:", s4)
	test_swapPrice2 := big.Abs(s4) / big.Abs(s3)

	test_minPrice = (test_newPrice1) * (test_newPrice1)
	shouldGTE(t, test_swapPrice2, test_minPrice)
	shouldGTE(t, test_maxPrice, test_swapPrice2)

	test_newPrice2 := pool.GetSqrtPrice()
	shouldGTE(t, test_price, test_newPrice2)

	// Swap token1 -> token0
	std.TestSetOrigCaller(sp01)
	ss1, ss2 := pool.Swap(sp01, false, 100000, test_newPrice2 + 1)
	// println("ss1:", ss1)
	// println("ss2:", ss2)
	shouldGTE(t, 0, ss1 * ss2) // token0 will be minus, so 0 shoule always GTE
=======
	var test_sqrtPriceExpect bigint = GetSqrtPriceX96() // shuold be same as test_sqrtPrice
	test_slot0 := GetSlot0()

	Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect * 1000)

	std.TestSetOrigCaller(sp01)
	// test_price := GetSqrtPriceX96() - 1
	test_price := bigint(MIN_SQRT_RATIO + 1)


	{
		// println("SWAP 10000, FROM token0, TO token1")
		// println("====Before Balance====")
		// PrintUserBalance("sp01", sp01)
		// PrintUserBalance("pool", GetOrigPkgAddr())
		// println()
		userToken0Bal := BalanceOf(token0, sp01)
		userToken1Bal := BalanceOf(token1, sp01)
		poolToken0Bal := BalanceOf(token0, GetOrigPkgAddr())
		poolToken1Bal := BalanceOf(token1, GetOrigPkgAddr())

		amount0, amount1 := Swap(sp01, true, 10000, test_price) // give enough amount to take fees away
		
		shouldEQ(t, userToken0Bal - amount0, BalanceOf(token0, sp01))
		shouldEQ(t, userToken1Bal - amount1, BalanceOf(token1, sp01))
		shouldEQ(t, poolToken0Bal + amount0, BalanceOf(token0, GetOrigPkgAddr()))
		shouldEQ(t, poolToken1Bal + amount1, BalanceOf(token1, GetOrigPkgAddr()))

		// println("====After Balance====")
		// PrintUserBalance("sp01", sp01)
		// PrintUserBalance("pool", GetOrigPkgAddr())
		// println()
		// println()
	}

	{
		// println("SWAP 5000, FROM token0, TO token1")
		// println("====Before Balance====")
		// PrintUserBalance("sp01", sp01)
		// PrintUserBalance("pool", GetOrigPkgAddr())
		// println()
		userToken0Bal := BalanceOf(token0, sp01)
		userToken1Bal := BalanceOf(token1, sp01)
		poolToken0Bal := BalanceOf(token0, GetOrigPkgAddr())
		poolToken1Bal := BalanceOf(token1, GetOrigPkgAddr())

		amount0, amount1 := Swap(sp01, true, 5000, test_price) // give enough amount to take fees away
		
		shouldEQ(t, userToken0Bal - amount0, BalanceOf(token0, sp01))
		shouldEQ(t, userToken1Bal - amount1, BalanceOf(token1, sp01))
		shouldEQ(t, poolToken0Bal + amount0, BalanceOf(token0, GetOrigPkgAddr()))
		shouldEQ(t, poolToken1Bal + amount1, BalanceOf(token1, GetOrigPkgAddr()))

		// println("====After Balance====")
		// PrintUserBalance("sp01", sp01)
		// PrintUserBalance("pool", GetOrigPkgAddr())
		// println()
		// println()
	}

	{
		// println("SWAP 1000, FROM token0, TO token1")
		// println("====Before Balance====")
		// PrintUserBalance("sp01", sp01)
		// PrintUserBalance("pool", GetOrigPkgAddr())
		// println()
		userToken0Bal := BalanceOf(token0, sp01)
		userToken1Bal := BalanceOf(token1, sp01)
		poolToken0Bal := BalanceOf(token0, GetOrigPkgAddr())
		poolToken1Bal := BalanceOf(token1, GetOrigPkgAddr())

		amount0, amount1 := Swap(sp01, true, 1000, test_price) // give enough amount to take fees away
		
		shouldEQ(t, userToken0Bal - amount0, BalanceOf(token0, sp01))
		shouldEQ(t, userToken1Bal - amount1, BalanceOf(token1, sp01))
		shouldEQ(t, poolToken0Bal + amount0, BalanceOf(token0, GetOrigPkgAddr()))
		shouldEQ(t, poolToken1Bal + amount1, BalanceOf(token1, GetOrigPkgAddr()))

		// println("====After Balance====")
		// PrintUserBalance("sp01", sp01)
		// PrintUserBalance("pool", GetOrigPkgAddr())
		// println()
		// println()
	}
	

	// Swap token1 -> token0
	{
		// println("SWAP 10000, FROM token1, TO token0")
		// println("====Before Balance====")
		// PrintUserBalance("sp01", sp01)
		// PrintUserBalance("pool", GetOrigPkgAddr())
		// println()
		userToken0Bal := BalanceOf(token0, sp01)
		userToken1Bal := BalanceOf(token1, sp01)
		poolToken0Bal := BalanceOf(token0, GetOrigPkgAddr())
		poolToken1Bal := BalanceOf(token1, GetOrigPkgAddr())

		amount0, amount1 := Swap(sp01, false, 16000, bigint(MAX_SQRT_RATIO - 1)) // give enough amount to take fees away
		
		shouldEQ(t, userToken0Bal - amount0, BalanceOf(token0, sp01))
		shouldEQ(t, userToken1Bal - amount1, BalanceOf(token1, sp01))
		shouldEQ(t, poolToken0Bal + amount0, BalanceOf(token0, GetOrigPkgAddr()))
		shouldEQ(t, poolToken1Bal + amount1, BalanceOf(token1, GetOrigPkgAddr()))

		// println("====After Balance====")
		// PrintUserBalance("sp01", sp01)
		// PrintUserBalance("pool", GetOrigPkgAddr())
		// println()
		// println()
	}
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak
}

func testSetFeeProtocol(t *testing.T, pool *Pool) {
	test_slot0 := pool.GetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(0))

	pool.SetFeeProtocol(0, 0)
	test_slot0 = pool.GetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(0))

	pool.SetFeeProtocol(0, 4)
	test_slot0 = pool.GetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(64))

	pool.SetFeeProtocol(4, 0)
	test_slot0 = pool.GetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(4))

	pool.SetFeeProtocol(6, 8)
	test_slot0 = pool.GetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(134))

	// out of pre-defined range
	shouldPanic(t, func() { SetFeeProtocol(2, 2) })
}



<<<<<<< HEAD:pool/pool_test.gno
func testCollectFeeProtocol(t *testing.T, pool *Pool) {
	pool.SetFeeProtocol(6, 8)
	test_slot0 := pool.GetSlot0()	
=======
func TestCollectProtocol(t *testing.T) {
	SetFeeProtocol(6, 8)
	test_slot0 := GetSlot0()	
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak
	shouldEQ(t, test_slot0.feeProtocol, bigint(134))

	std.TestSetOrigCaller(lp01)
	pool.Mint(lp01, test_tickLower, test_tickUpper, test_liquidityExpect * 150)

<<<<<<< HEAD:pool/pool_test.gno
	std.TestSetOrigCaller(sp01)
	pool.Swap(sp01, true, 100000, pool.GetSqrtPrice() - 1) // swap token0 -> token1 => fee only in token0
	pool.Swap(sp01, true, 100000, pool.GetSqrtPrice() - 1) // more protocol fees
	test_fee := pool.GetProtocolFees()
=======
	{
		// println("SWAP 1000000, FROM token0, TO token1")
		// println("SWAP 1000000, FROM token0, TO token1")
		// println("====Before Balance====")
		// PrintUserBalance("gso", gso)
		// println()
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak

		recvToken0Bal := BalanceOf(token0, gso)
		recvToken1Bal := BalanceOf(token1, gso)

<<<<<<< HEAD:pool/pool_test.gno
	std.TestSetOrigCaller(sp01)
	pool.CollectFeeProtocol(rv01, 10000, 10000)
=======
		std.TestSetOrigCaller(sp01)
		Swap(sp01, true, 100000, bigint(MIN_SQRT_RATIO + 1)) // swap token0 -> token1 => fee only in token0
		Swap(sp01, true, 100000, bigint(MIN_SQRT_RATIO + 1)) // more protocol fees
>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak

		amount0, amount1 := CollectProtocol(gso, 100000, 100000)
		// println("====After Balance====")
		// PrintUserBalance("gso", gso)

		shouldEQ(t, recvToken0Bal + amount0, BalanceOf(token0, gso))
		shouldEQ(t, recvToken1Bal + amount1, BalanceOf(token1, gso))
	}

	{
		// println("SWAP 1000000, FROM token1, TO token0")
		// println("====Before Balance====")
		// PrintUserBalance("gso", gso)
		// println()

		recvToken0Bal := BalanceOf(token0, gso)
		recvToken1Bal := BalanceOf(token1, gso)
		

		std.TestSetOrigCaller(sp01)
		Swap(sp01, false, 100000, bigint(MAX_SQRT_RATIO - 1)) // swap token0 -> token1 => fee only in token0

<<<<<<< HEAD:pool/pool_test.gno
	// std.TestSetOrigCaller(sp01)
	pool.Swap(rv02, false, 20, pool.GetSqrtPrice() + 9999) // swap token1 -> token0 // fee will only have token1
	pool.Swap(rv02, false, 20, pool.GetSqrtPrice() + 9999) // more protocol fees
	test_newFee := pool.GetProtocolFees()
	newBeforeToken0 := BalanceOf(token0, rv01)
	newBeforeToken1 := BalanceOf(token1, rv01)

	std.TestSetOrigCaller(sp01)
	pool.CollectFeeProtocol(rv01, 10000, 10000)
=======
		amount0, amount1 := CollectProtocol(gso, 100000, 100000)
		// println("====After Balance====")
		// PrintUserBalance("gso", gso)

		shouldEQ(t, recvToken0Bal + amount0, BalanceOf(token0, gso))
		shouldEQ(t, recvToken1Bal + amount1, BalanceOf(token1, gso))
	}
}

>>>>>>> fbbe93dd6cd2f0a27023f1cc594358bf0f236485:pool/pool_single_lp_test.gno_bak

// func TestAfterBalance(t* testing.T) {
// 	println("=============================== After All Swap")
// 	PrintUserBalance("lp01", lp01) // Liquidity Provider
// 	println()

// 	PrintUserBalance("sp01", sp01) // Swap Exector
// 	println()

// 	PrintUserBalance("gso", gso)	 // GnoSwap Owner
// 	println()

// 	PrintUserBalance("pool", GetOrigPkgAddr())
// 	println()
// }