package pool

import (
	"std"
	"strconv"
	"testing"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/foo"
	"gno.land/r/gnoswap/gns"

	"gno.land/r/gnoswap/consts"

	"gno.land/p/demo/json"

	u256 "gno.land/p/gnoswap/uint256"
)

var (
	test_tickLower          = int32(9000)
	test_tickUpper          = int32(11000)
	test_liquidityExpectStr = "1000"
	test_liquidityExpect256 = u256.NewUint(1000)

	test_tickLower2 = int32(50000)
	test_tickUpper2 = int32(100000)
)

// 1. reate Pool using Factory Contract by Gnoswap Admin
func TestInitCreatePool(t *testing.T) {
	// call gns faucet to get creation fee
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)
	CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // x2.7
	// ---       event: {GNOSWAP gno.land/r/gnoswap/pool CreatePool [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}
}

// 2. Mint by gsa
func TestMint(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := Mint(
		fooPath,
		barPath,
		fee500,
		consts.POSITION_ADDR.String(),
		test_tickLower,
		test_tickUpper,
		test_liquidityExpectStr,
	)
	shouldEQ(t, amount0, "30")
	shouldEQ(t, amount1, "81")

	pool := GetPool(barPath, fooPath, fee500)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity.Dec(), test_liquidityExpectStr)

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)

	m81, m82 := Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	m101, m102 := Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)

	shouldNEQ(t, m81, "0")
	shouldNEQ(t, m82, "0")
	shouldEQ(t, m81, m101)
	shouldEQ(t, m82, m102)

	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, true, test_liquidity.Eq(new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(10))))

	// tickLower > currentTick == don't add to current liquidity
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower2, test_tickUpper2, test_liquidityExpectStr)

	// tickUpper < current tick == don't add to current liquidity
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), -test_tickUpper2, -test_tickLower2, test_liquidityExpectStr)

	// tickUpper < tickLower == don't add to current liquidity
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), -test_tickUpper, -test_tickLower, test_liquidityExpectStr)

	// test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, true, test_liquidity.Eq(new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(10))))

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, test_liquidityExpectStr)

	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, true, test_liquidity.Eq(new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(20))))

}

// 3. Burn by gsa
func TestBurn(t *testing.T) {
	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)

	b11, b12 := Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpectStr)
	b21, b22 := Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpectStr)
	shouldEQ(t, b11, b21)
	shouldEQ(t, b12, b22)

	pool := GetPool(barPath, fooPath, fee500)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, true, test_liquidity.Eq(new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(18))))

	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(8)).ToString())
	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, true, test_liquidity.Eq(new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(10))))

	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, "1")
	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity.ToString(), "9999")

	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, "999")
	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, true, test_liquidity.Eq(new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(9))))

	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(9)).ToString())
	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity.ToString(), "0")
}

// 4. Collect
func TestCollect(t *testing.T) {
	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)

	// withdraw all token before test `Collect`
	Collect(barPath, fooPath, fee500, gsa.String(), test_tickLower, test_tickUpper, "50000000", "50000000")

	// pool should have zero liquidity
	pool := GetPool(barPath, fooPath, fee500)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity.ToString(), "0")

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(15)).ToString())
	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(15)).ToString())
	c11, c12 := Collect(barPath, fooPath, fee500, gsa.String(), test_tickLower, test_tickUpper, "50000000", "50000000")

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(15)).ToString())
	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(15)).ToString())
	c21, c22 := Collect(barPath, fooPath, fee500, gsa.String(), test_tickLower, test_tickUpper, "50000000", "50000000")

	shouldEQ(t, c11, c21) // 443
	shouldEQ(t, c12, c22) // 1206

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(15)).ToString())
	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(15)).ToString())
	c31, c32 := Collect(barPath, fooPath, fee500, gsa.String(), test_tickLower, test_tickUpper, "100", "100")
	shouldEQ(t, c31, "100")
	shouldEQ(t, c32, "100")

	c41, c42 := Collect(barPath, fooPath, fee500, gsa.String(), test_tickLower, test_tickUpper, "50000000", "50000000")
	shouldEQ(t, c41, "343")  // 343 = c21 - 100
	shouldEQ(t, c42, "1106") // 1106 = c22 - 100

	// Mint > No Burn => nothing to collect
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(15)).ToString())
	// Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpectStr*15)
	c51, c52 := Collect(barPath, fooPath, fee500, gsa.String(), test_tickLower, test_tickUpper, "50000000", "50000000")
	shouldEQ(t, c51, "0")
	shouldEQ(t, c52, "0")

	// Burn Now => something to collect
	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(15)).ToString())
	c61, c62 := Collect(barPath, fooPath, fee500, gsa.String(), test_tickLower, test_tickUpper, "50000000", "50000000")
	shouldNEQ(t, c61, "0")
	shouldNEQ(t, c62, "0")
}

// 5. Swap by gsa
func TestSwap(t *testing.T) {
	pool := GetPool(barPath, fooPath, fee500)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity.ToString(), "0")

	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), test_tickLower, test_tickUpper, new(u256.Uint).Mul(test_liquidityExpect256, u256.NewUint(20000)).ToString())

	// Swap several times
	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	test_price := consts.MIN_PRICE
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		amount0, amount1 := Swap(
			fooPath,                      // token0Path
			barPath,                      // token1Path
			fee500,                       // fee
			gsa.String(),                 // recipient
			true,                         // zeroForOne
			"10000",                      // _amountSpecified
			test_price,                   // _sqrtPriceLimitX96
			std.GetOrigCaller().String(), // payer
		)
		// ---       event: {gno.land/r/gnoswap/pool Swap GNOSWAP [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_zeroForOne true} {p_amountSpecified 10000} {p_sqrtPriceLimitX96 4295128740} {p_payer g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {p_recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 10000} {amount1 -27145} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 5}]}

		shouldNEQ(t, amount0, "0")
		shouldNEQ(t, amount1, "0")
		intAmount0, _ := strconv.Atoi(amount0)
		intAmount1, _ := strconv.Atoi(amount1)

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(intAmount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-intAmount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(intAmount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-intAmount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		amount0, amount1 := Swap(barPath, fooPath, fee500, gsa.String(), true, "5000", test_price, std.GetOrigCaller().String()) // give enough amount to take fees away
		// ---       event: {gno.land/r/gnoswap/pool Swap GNOSWAP [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_zeroForOne true} {p_amountSpecified 5000} {p_sqrtPriceLimitX96 4295128740} {p_payer g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {p_recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 5000} {amount1 -13554} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 3}]}

		intAmount0, _ := strconv.Atoi(amount0)
		intAmount1, _ := strconv.Atoi(amount1)

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(intAmount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-intAmount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(intAmount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-intAmount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		amount0, amount1 := Swap(barPath, fooPath, fee500, gsa.String(), true, "1000", test_price, std.GetOrigCaller().String()) // give enough amount to take fees away
		// ---       event: {gno.land/r/gnoswap/pool Swap GNOSWAP [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_zeroForOne true} {p_amountSpecified 1000} {p_sqrtPriceLimitX96 4295128740} {p_payer g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {p_recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 1000} {amount1 -2708} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 1}]}

		intAmount0, _ := strconv.Atoi(amount0)
		intAmount1, _ := strconv.Atoi(amount1)

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(intAmount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-intAmount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(intAmount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-intAmount1))
	}

	// Swap token1 -> token0
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		amount0, amount1 := Swap(barPath, fooPath, fee500, gsa.String(), false, "16000", consts.MAX_PRICE, std.GetOrigCaller().String()) // give enough amount to take fees away
		// ---       event: {gno.land/r/gnoswap/pool Swap GNOSWAP [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_zeroForOne false} {p_amountSpecified 16000} {p_sqrtPriceLimitX96 1461446703485210103287273052203988822378723970341} {p_payer g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {p_recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 -5896} {amount1 16000} {protocol_fee0 0} {protocol_fee1 0} {swap_fee 8}]}

		intAmount0, _ := strconv.Atoi(amount0)
		intAmount1, _ := strconv.Atoi(amount1)

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(intAmount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-intAmount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(intAmount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-intAmount1))
	}
}

// 6. SetFeeProtocol by Gnoswap Admin
func TestSetFeeProtocol(t *testing.T) {
	// non admin call
	std.TestSetOrigCaller(gsa)
	shouldPanic(t, func() { SetFeeProtocol(2, 2) })

	// admin call
	std.TestSetOrigCaller(gsa)
	SetFeeProtocol(6, 8)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/pool SetFeeProtocol [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_feeProtocol0 6} {p_feeProtocol1 8} {newFee 134}]}

	for _, pool := range pools {
		shouldEQ(t, pool.PoolGetSlot0().feeProtocol, 134)
	}
}

// 7. CollectProtocol by Gnoswap Admin
func TestCollectProtocol(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	SetFeeProtocol(6, 8)
	// ---       event: {GNOSWAP gno.land/r/gnoswap/pool SetFeeProtocol [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_feeProtocol0 6} {p_feeProtocol1 8} {newFee 134}]}

	pool := GetPool(barPath, fooPath, fee500)
	test_slot0 := pool.PoolGetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, 134)

	// Make ProtocolFee via Swap by gsa ( Mint by gsa )
	std.TestSetOrigCaller(gsa)
	{

		std.TestSetRealm(rouRealm)
		std.TestSetOrigCaller(gsa)
		Swap(barPath, fooPath, fee500, gsa.String(), true, "200000", consts.MIN_PRICE, std.GetOrigCaller().String()) // swap token0 -> token1 => fee only in token0
		// ---       event: {gno.land/r/gnoswap/pool Swap GNOSWAP [{m_callType INDIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm gno.land/r/gnoswap/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_zeroForOne true} {p_amountSpecified 200000} {p_sqrtPriceLimitX96 4295128740} {p_payer g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {p_recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 200000} {amount1 -533667} {protocol_fee0 16} {protocol_fee1 0} {swap_fee 84}]}

		gsaOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		std.TestSetRealm(gsaRealm)
		amount0, amount1 := CollectProtocol(barPath, fooPath, fee500, gsa.String(), "100000", "100000")
		// ---       event: {GNOSWAP gno.land/r/gnoswap/pool CollectProtocol [{m_callType DIRECT} {m_origCaller g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_recipient g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c} {amount0 15} {amount1 0}]}

		gsaNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		_token0Diff := gsaNewToken0Bal - gsaOldToken0Bal
		_token1Diff := gsaNewToken1Bal - gsaOldToken1Bal

		token0DiffStr := strconv.Itoa(int(_token0Diff))
		token1DiffStr := strconv.Itoa(int(_token1Diff))

		shouldEQ(t, token0DiffStr, amount0)
		shouldEQ(t, token1DiffStr, amount1)
	}
}

// GETTER_API TEST
func TestApiGetPools(t *testing.T) {
	gpls := ApiGetPools()

	root, err := json.Unmarshal([]byte(gpls))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 1)
}
