package pool

import (
	"testing"

	"gno.land/p/demo/uassert"

	i256 "gno.land/p/gnoswap/int256"
	u256 "gno.land/p/gnoswap/uint256"
)

var (
	got      *u256.Uint
	x        *u256.Uint
	y        *i256.Int
	expected *u256.Uint
	rst      bool
)

func TestAddDelta_1(t *testing.T) {
	// 1+0
	x = u256.NewUint(1)
	y = i256.NewInt(0)
	got = LiquidityMathAddDelta(x, y)
	expected = u256.NewUint(1)

	rst = got.Eq(expected)
	if !rst {
		t.Errorf("Test Liquidity Math #1: 1 + 0 is failed")
	}
}

func TestAddDelta_2(t *testing.T) {
	// 1+-1
	x = u256.NewUint(1)
	y = i256.NewInt(-1)
	got = LiquidityMathAddDelta(x, y)
	expected = u256.NewUint(0)
	rst = got.Eq(expected)

	rst = got.Eq(expected)
	if !rst {
		t.Errorf("Test Liquidity Math #2: 1 + -1 is failed")
	}
}

func TestAddDelta_3(t *testing.T) {
	// 1+1
	x = u256.NewUint(1)
	y = i256.NewInt(1)
	got = LiquidityMathAddDelta(x, y)
	expected = u256.NewUint(2)
	rst = got.Eq(expected)
	if !rst {
		t.Errorf("Test Liquidity Math #3: 1 + 1 is failed")
	}
}

func TestAddDelta_4(t *testing.T) {
	// 2**128-15 + 15
	x = u256.MustFromDecimal("340282366920938463463374607431768211441") // 340282366920938463463374607431768211441 = 2**128-15
	if x.ToString() != "340282366920938463463374607431768211441" {
		t.Errorf("u256 is failed !")
	}

	y = i256.NewInt(15)
	got = LiquidityMathAddDelta(x, y)
	expected = u256.MustFromDecimal("340282366920938463463374607431768211456") // 2**128
	rst = got.Eq(expected)

	rst = got.Eq(expected)
	if !rst {
		t.Errorf("Test Liquidity Math #4: 2**128-15 + 15 is failed")
	}
}

func TestAddDelta_5(t *testing.T) {
	// 0+-1 underflow
	x = u256.NewUint(0)
	y = i256.NewInt(-1)
	uassert.PanicsWithMessage(
		t,
		`[GNOSWAP-POOL-009] invalid liquidity calculated || liquidity_math.gno__liquidityMathAddDelta() || LS(z must be < x) (x: 0, y: -1, z:115792089237316195423570985008687907853269984665640564039457584007913129639935)`,
		func() {
			LiquidityMathAddDelta(x, y)
		},
	)
}

func TestAddDelta_6(t *testing.T) {
	// 3+-4 underflow
	x = u256.NewUint(3)
	y = i256.NewInt(-4)
	uassert.PanicsWithMessage(
		t,
		`[GNOSWAP-POOL-009] invalid liquidity calculated || liquidity_math.gno__liquidityMathAddDelta() || LS(z must be < x) (x: 3, y: -4, z:115792089237316195423570985008687907853269984665640564039457584007913129639935)`,
		func() {
			LiquidityMathAddDelta(x, y)
		},
	)
}

func LiquidityMathAddDelta(x *u256.Uint, y *i256.Int) *u256.Uint {
	return liquidityMathAddDelta(x, y)
}
