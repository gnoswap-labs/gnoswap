package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/ufmt"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/r/gnoswap/v2/common"
	"gno.land/r/gnoswap/v2/consts"

	"gno.land/r/gnoswap/v2/gns"
)

var (
	test_liquidityExpectStr = "10000000000"
)

func TestLimitOrderThru_Positive_1(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)
	CreatePool(barPath, fooPath, fee100, common.TickMathGetSqrtRatioAtTick(0).ToString())

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	thisPool := GetPool(barPath, fooPath, fee100)

	t.Run("limit selling 0 for 1 at tick 0 thru 1", func(t *testing.T) {
		// MINT
		std.TestSetRealm(posRealm)
		mint0, mint1 := Mint(
			barPath,
			fooPath,
			fee100,
			consts.POSITION_ADDR,
			0,
			120,
			test_liquidityExpectStr,
			gsa,
		)
		// println("mint0", mint0) // 59817378
		// println("mint1", mint1) // 0
		// println()

		// SWAP 1 -> 0
		std.TestSetRealm(rouRealm)
		swap0, swap1 := Swap(
			barPath,
			fooPath,
			fee100,
			gsa,
			false,
			"60183363",
			consts.MAX_PRICE,
			gsa,
		)
		// println("swap0", swap0) // -59817378
		// println("swap1", swap1) // 60183363
		// println()

		// BURN
		std.TestSetRealm(posRealm)
		burn0, burn1 := Burn(
			barPath,
			fooPath,
			fee100,
			0,
			120,
			test_liquidityExpectStr,
		)
		// println("burn0", burn0) // 0
		// println("burn1", burn1) // 60177342
		// println()

		// COLLECT
		std.TestSetRealm(posRealm)
		collect0, collect1 := Collect(
			barPath,
			fooPath,
			fee100,
			gsa,
			0,
			120,
			consts.MAX_UINT128,
			consts.MAX_UINT128,
		)
		// println("collect0", collect0) // 0
		// println("collect1", collect1) // 60177342
		// println()

		slotTick := thisPool.slot0.tick
		if slotTick < 120 {
			panic(ufmt.Sprintf("tick(%d) should be >= 120", slotTick))
		}
	})
}

func TestLimitOrderThru_Negative_1(t *testing.T) {
	std.TestSetRealm(gsaRealm)
	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)
	CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(0).ToString())

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	thisPool := GetPool(barPath, fooPath, fee500)

	t.Run("limit selling 0 for 1 at tick 0 thru 1", func(t *testing.T) {
		// MINT
		std.TestSetRealm(posRealm)
		mint0, mint1 := Mint(
			barPath,
			fooPath,
			fee500,
			consts.POSITION_ADDR,
			-120,
			0,
			test_liquidityExpectStr,
			gsa,
		)
		// println("mint0", mint0) // 0
		// println("mint1", mint1) // 59817378
		// println()

		// SWAP 0 -> 1
		std.TestSetRealm(rouRealm)
		swap0, swap1 := Swap(
			barPath,
			fooPath,
			fee500,
			gsa,
			true,
			"60283363",
			consts.MIN_PRICE,
			gsa,
		)
		// println("swap0", swap0) // 60207447
		// println("swap1", swap1) // -59817377
		// println()

		// BURN
		std.TestSetRealm(posRealm)
		burn0, burn1 := Burn(
			barPath,
			fooPath,
			fee500,
			-120,
			0,
			test_liquidityExpectStr,
		)
		// println("burn0", burn0) // 60177342
		// println("burn1", burn1) // 0
		// println()

		// COLLECT
		std.TestSetRealm(posRealm)
		collect0, collect1 := Collect(
			barPath,
			fooPath,
			fee500,
			gsa,
			-120,
			0,
			consts.MAX_UINT128,
			consts.MAX_UINT128,
		)
		// println("collect0", collect0) // 60207445
		// println("collect1", collect1) // 0
		// println()

		slotTick := thisPool.slot0.tick
		if slotTick >= -120 {
			panic(ufmt.Sprintf("tick(%d) should be < -120", slotTick))
		}
	})
}
