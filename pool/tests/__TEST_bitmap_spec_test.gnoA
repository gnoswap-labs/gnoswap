package pool

import (
	"gno.land/p/demo/json"

	"std"
	"testing"
	"math"
	"time"
	"strconv"

	"gno.land/p/demo/testutils"

	"gno.land/r/gnoswap/v2/consts"
)

var (
	tickSpacing = int32(1)
	minTick = (consts.MIN_TICK / tickSpacing) * tickSpacing
	maxTick = (consts.MAX_TICK / tickSpacing) * tickSpacing
)

func BeforeEachTest(t *testing.T) {
	InitializeTickBitmaps_Helper()
}

func TestTickInit_1(t *testing.T) {
	BeforeEachTest(t)
	t.Run("is flipped by #flipTick", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(1), tickSpacing)
		nextTick_res, bool_res := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1), tickSpacing, true)
		shouldEQ(t, nextTick_res, int32(1))
		shouldEQ(t, bool_res, true)
	})
}

func TestTickInit_2(t *testing.T) {
	BeforeEachTest(t)
	t.Run("is flipped back by #flipTick", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(1), tickSpacing)
		TickBitmapFlipTick_Helper(int32(1), tickSpacing)
		nextTick_res, bool_res := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1), tickSpacing, true)
		shouldEQ(t, bool_res, false)
	})
}

func TestTickInit_3(t *testing.T) {
	BeforeEachTest(t)
	t.Run("is not changed by another flip to a different tick", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(2), tickSpacing)
		nextTick_res, bool_res := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1), tickSpacing, true)
		shouldEQ(t, bool_res, false)
	})
}

func TestTickInit_4(t *testing.T) {
	BeforeEachTest(t)
	t.Run("is not changed by another flip to a different tick on another word", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(1) + int32(256), tickSpacing)
		nextTick_res_1, bool_res_1 := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(257), tickSpacing, true)
		nextTick_res_2, bool_res_2 := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1), tickSpacing, true)
		shouldEQ(t, bool_res_2, false)
	})
}

func TestTickFlip_1(t *testing.T) {
	BeforeEachTest(t)
	t.Run("flips only the specified tick", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(-230), tickSpacing)
		nextTick_res_1, bool_res_1 := IsInitialized_Helper(int32(-230), tickSpacing)
		shouldEQ(t, bool_res_1, true)
		nextTick_res_2, bool_res_2 := IsInitialized_Helper(int32(-231), tickSpacing)
		shouldEQ(t, bool_res_2, false)
		nextTick_res_3, bool_res_3 := IsInitialized_Helper(int32(-229), tickSpacing)
		shouldEQ(t, bool_res_3, false)
		nextTick_res_4, bool_res_4 := IsInitialized_Helper(int32(-230 + 256), tickSpacing)
		shouldEQ(t, bool_res_4, false)
		nextTick_res_5, bool_res_5 := IsInitialized_Helper(int32(-230 - 256), tickSpacing)
		shouldEQ(t, bool_res_5, false)

		TickBitmapFlipTick_Helper(int32(-230), tickSpacing)
		nextTick_res_6, bool_res_6 := IsInitialized_Helper(int32(-230), tickSpacing)
		shouldEQ(t, bool_res_6, false)
		nextTick_res_7, bool_res_7 := IsInitialized_Helper(int32(-231), tickSpacing)
		shouldEQ(t, bool_res_7, false)
		nextTick_res_8, bool_res_8 := IsInitialized_Helper(int32(-229), tickSpacing)
		shouldEQ(t, bool_res_8, false)
		nextTick_res_9, bool_res_9 := IsInitialized_Helper(int32(-230 + 256), tickSpacing)
		shouldEQ(t, bool_res_9, false)
		nextTick_res_10, bool_res_10 := IsInitialized_Helper(int32(-230 - 256), tickSpacing)
		shouldEQ(t, bool_res_10, false)
	})
}

func TestTickFlip_2(t *testing.T) {
	BeforeEachTest(t)
	t.Run("reverts only itself", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(-230), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-259), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-229), tickSpacing)
		TickBitmapFlipTick_Helper(int32(500), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-259), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-229), tickSpacing)
		TickBitmapFlipTick_Helper(int32(-259), tickSpacing)
		nextTick_res_1, bool_res_1 := IsInitialized_Helper(int32(-259), tickSpacing)
		shouldEQ(t, bool_res_1, true)
		nextTick_res_2, bool_res_2 := IsInitialized_Helper(int32(-229), tickSpacing)
		shouldEQ(t, bool_res_2, false)
		
	})
}

func TestTicknextInitializedTickWithinOneWord_1(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns tick to right if at initialized tick", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(78), tickSpacing, false)
		shouldEQ(t, next, int32(84))
		shouldEQ(t, initialized, true)
	})
}

func TestTicknextInitializedTickWithinOneWord_2(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns tick to right if at initialized tick", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(-55), tickSpacing, false)
		shouldEQ(t, next, int32(-4))
		shouldEQ(t, initialized, true)
	})
}

func TestTicknextInitializedTickWithinOneWord_3(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns the tick directly to the right", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(77), tickSpacing, false)
		shouldEQ(t, next, int32(78))
		shouldEQ(t, initialized, true)
	})
}

func TestTicknextInitializedTickWithinOneWord_4(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns the tick directly to the right", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(-56), tickSpacing, false)
		shouldEQ(t, next, int32(-55))
		shouldEQ(t, initialized, true)
	})
}

func TestTicknextInitializedTickWithinOneWord_5(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("skips half word", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(255), tickSpacing, false)
		shouldEQ(t, next, int32(511))
		shouldEQ(t, initialized, false)
	})
}

func TestTicknextInitializedTickWithinOneWord_6(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("skips half word", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(383), tickSpacing, false)
		shouldEQ(t, next, int32(511))
		shouldEQ(t, initialized, false)
	})
}

func TestTickLteEqTrue_1(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns same tick if initialized", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(78), tickSpacing, true)
		shouldEQ(t, next, int32(78))
		shouldEQ(t, initialized, true)
	})
}

func TestTickLteEqTrue_2(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("returns tick directly to the left of input tick if not initialized", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(79), tickSpacing, true)
		shouldEQ(t, next, int32(78))
		shouldEQ(t, initialized, true)
	})
}

func TestTickLteEqTrue_3(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("will not exceed the word boundary", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(258), tickSpacing, true)
		shouldEQ(t, next, int32(256))
		shouldEQ(t, initialized, false)
	})
}

func TestTickLteEqTrue_4(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("at the word boundary", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(256), tickSpacing, true)
		shouldEQ(t, next, int32(256))
		shouldEQ(t, initialized, false)
	})
}

func TestTickLteEqTrue_5(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("word boundary less 1 (next initialized tick in next word", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(-257), tickSpacing, true)
		shouldEQ(t, next, int32(-512))
		shouldEQ(t, initialized, false)
	})
}

func TestTickLteEqTrue_6(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("entire empty word", func(t *testing.T) {
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(1023), tickSpacing, true)
		shouldEQ(t, next, int32(768))
		shouldEQ(t, initialized, false)
	})
}

func TestTickLteEqTrue_7(t *testing.T) {
	BeforeEachTest(t)
	TickBitmapFlipTick_Helper(int32(-200), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-55), tickSpacing)
	TickBitmapFlipTick_Helper(int32(-4), tickSpacing)
	TickBitmapFlipTick_Helper(int32(70), tickSpacing)
	TickBitmapFlipTick_Helper(int32(78), tickSpacing)
	TickBitmapFlipTick_Helper(int32(84), tickSpacing)
	TickBitmapFlipTick_Helper(int32(139), tickSpacing)
	TickBitmapFlipTick_Helper(int32(240), tickSpacing)
	TickBitmapFlipTick_Helper(int32(535), tickSpacing)
	t.Run("boundary is initialized", func(t *testing.T) {
		TickBitmapFlipTick_Helper(int32(329), tickSpacing)
		next, initialized := TickBitmapNextInitializedTickWithInOneWord_Helper(int32(456), tickSpacing, true)
		shouldEQ(t, next, int32(329))
		shouldEQ(t, initialized, true)
	})
}
