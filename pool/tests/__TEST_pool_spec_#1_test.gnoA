package pool

import (
	"std"
	"testing"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"

	"gno.land/r/gnoswap/v2/consts"

	u256 "gno.land/p/gnoswap/uint256"
	"gno.land/r/gnoswap/v2/gns"
	pl "gno.land/r/gnoswap/v2/pool"
)

var (
	test_tickLower                      = int32(9000)
	test_tickUpper                      = int32(11000)
	test_liquidityExpectStr             = "100000000"
	user1Addr               std.Address = "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec"
	minTick                             = int32(-887220)
	maxTick                             = int32(887220)
)

func init() {
	std.TestSkipHeights(100)
}

func AfterTest(t *testing.T) {
	poolRealm := std.NewUserRealm(consts.POOL_ADDR)
	std.TestSetRealm(poolRealm)
	barBal := bar.BalanceOf(a2u(consts.POOL_ADDR))
	fooBal := foo.BalanceOf(a2u(consts.POOL_ADDR))
	bar.Transfer(a2u(admin), barBal)
	foo.Transfer(a2u(admin), fooBal)
	delete(pools, "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000")
}

func TestCreateFooBarPool_Should_be_failed_if_price_is_too_low(t *testing.T) {
	// fails if starting price is too low
	shouldEQ(t, uint64(gns.TotalSupply()), uint64(100000000000000))
	shouldEQ(t, uint64(gnsBalance(consts.EMISSION_ADDR)), uint64(0))
	shouldEQ(t, uint64(gnsBalance(consts.STAKER_ADDR)), uint64(0))
	shouldEQ(t, uint64(gnsBalance(consts.DEV_OPS)), uint64(0))

	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	shouldPanic(
		t,
		func() {
			CreatePool(fooPath, barPath, 3000, "1")
		},
	)
	AfterTest(t)
}

func TestCreateFooBarPool_Should_be_failed_if_price_is_too_high(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	shouldPanic(
		t,
		func() {
			CreatePool(fooPath, barPath, 3000, "1461446703485210103287273052203988822378723970342")
		},
	)
}

func TestCreateFooBarPool_can_be_init_at_MIN_SQRT_RATIO(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)
	pl.CreatePool(barPath, fooPath, 3000, "4295128739") // MIN_SQRT_RATIO
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"
	poolTick := pl.PoolGetSlot0Tick(poolPath)
	shouldEQ(t, int32(poolTick), int32(-887272))
	AfterTest(t)
}

func TestCreateFooBarPool_can_be_init_at_MAX_SQRT_RATIO_Sub1(t *testing.T) {
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)
	pl.CreatePool(barPath, fooPath, 3000, "1461446703485210103287273052203988822378723970341") // MAX_SQRT_RATIO-1
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"
	poolTick := pl.PoolGetSlot0Tick(poolPath)
	shouldEQ(t, uint64(poolTick), uint64(887271))
	AfterTest(t)
}

func TestCreateFooBarPool_set_initial_variables(t *testing.T) {
	std.TestSetRealm(adminRealm)
	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	pl.CreatePool(barPath, fooPath, 3000, "56022770974786139918731938227") // encodePriceSqrt(1, 2)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"
	poolTick := pl.PoolGetSlot0Tick(poolPath)
	shouldEQ(t, int32(poolTick), int32(-6932))

	poolPrice := PoolGetSlot0Price(barPath, fooPath, uint32(3000))

	shouldEQ(t, poolPrice, "56022770974786139918731938227")
	AfterTest(t)
}

func PoolGetSlot0Price(fooPath, token1Path string, fee uint32) string {
	pool := GetPool(fooPath, token1Path, fee)
	return pool.slot0.sqrtPriceX96.ToString()
}

func TestMint_fail_if_tickLower_greater_than_tickUpper(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	pl.CreatePool(barPath, fooPath, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(barPath, fooPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick, maxTick, "3161", admin)

	// =====================fails if tickLower greater than tickUpper==========================
	shouldPanic(
		t,
		func() {
			pl.Mint(barPath, fooPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", 1, 0, "1", admin)
		},
	)
	AfterTest(t)
}

func TestMint_fail_if_tickLower_less_than_min_tick(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	pl.CreatePool(barPath, fooPath, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(barPath, fooPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick, maxTick, "3161", admin)

	// =====================fails if tickLower less than min tick==========================
	shouldPanic(
		t,
		func() {
			pl.Mint(barPath, fooPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", -887273, 0, "1", admin)
		},
	)
	AfterTest(t)
}

func TestMint_fail_if_tickUpper_greater_than_max_tick(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	pl.CreatePool(barPath, fooPath, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(barPath, fooPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick, maxTick, "3161", admin)

	// =====================fails if tickUpper greater than max tick==========================
	shouldPanic(
		t,
		func() {
			pl.Mint(barPath, fooPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", 0, 887273, "1", admin)
		},
	)
	AfterTest(t)
}

func TestMint_fail_if_amount_exceeds_the_max(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	pl.CreatePool(barPath, fooPath, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(barPath, fooPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick, maxTick, "3161", admin)

	// =====================fails if amount exceeds the max ==========================
	pool := GetPool(barPath, fooPath, 3000)
	maxLiquidityPerTick := u256.Zero().Add(u256.Zero(), pool.maxLiquidityPerTick)
	maxLiquidityPerTick.Add(maxLiquidityPerTick, u256.One())
	tickSpacing := pool.tickSpacing
	shouldPanic(
		t,
		func() {
			pl.Mint(barPath, fooPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick+tickSpacing, maxTick-tickSpacing, maxLiquidityPerTick.ToString(), admin)
		},
	)
	AfterTest(t)
}

func TestMint_fail_if_total_amount_at_tick_exceeds_the_max(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	pl.CreatePool(barPath, fooPath, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(fooPath, barPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick, maxTick, "3161", admin)

	// =====================fails if total amount at tick exceeds the max========================
	pool := GetPool(fooPath, barPath, 3000)
	tickSpacing := pool.tickSpacing

	pool = GetPool(fooPath, barPath, 3000)
	maxLiquidityPerTick := u256.Zero().Add(u256.Zero(), pool.maxLiquidityPerTick)
	maxLiquidityPerTick.Sub(maxLiquidityPerTick, u256.NewUint(1000))
	maxLiquidityPerTick.Add(maxLiquidityPerTick, u256.One())
	tickSpacing = pool.tickSpacing

	shouldPanic(
		t,
		func() {
			pl.Mint(fooPath, barPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick+tickSpacing, maxTick-tickSpacing, maxLiquidityPerTick.ToString(), admin)
		},
	)

	shouldPanic(
		t,
		func() {
			pl.Mint(fooPath, barPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick+tickSpacing*2, maxTick-tickSpacing, maxLiquidityPerTick.ToString(), admin)
		},
	)

	shouldPanic(
		t,
		func() {
			pl.Mint(fooPath, barPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick+tickSpacing, maxTick-tickSpacing*2, maxLiquidityPerTick.ToString(), admin)
		},
	)
	AfterTest(t)
}

func TestMint_fail_if_amount_is_0(t *testing.T) {
	// ================================ Pool Setup ================================================
	std.TestSetRealm(adminRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)

	fooPath := "gno.land/r/onbloc/foo"

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	pl.CreatePool(barPath, fooPath, 3000, "25054144837504793118641380156") // encodePriceSqrt(1, 10)
	poolPath := "gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000"

	std.TestSetRealm(posRealm)
	pl.Mint(fooPath, barPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick, maxTick, "3161", admin)

	// =====================fails if total amount at tick exceeds the max========================

	pool := GetPool(fooPath, barPath, 3000)
	tickSpacing := pool.tickSpacing
	shouldPanic(
		t,
		func() {
			pl.Mint(fooPath, barPath, 3000, "g1ecely4gjy0yl6s9kt409ll330q9hk2lj9ls3ec", minTick+tickSpacing, maxTick-tickSpacing, "0", admin)
		},
	)
}

func gnsBalance(addr std.Address) uint64 {
	return gns.BalanceOf(a2u(addr))
}
