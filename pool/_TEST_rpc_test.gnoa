package pool

import (
	"std"
	"testing"

	"encoding/gjson"

	"gno.land/p/demo/testutils"

	_ "gno.land/r/grc20_wrapper"
)

var (
	gsa  = testutils.TestAddress("gsa")  // Gnoswap Admin
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	tr01 = testutils.TestAddress("tr01") // Trader 01
	pc01 = testutils.TestAddress("pc01") // Pool Creator 01

	poolAddr = std.DerivePkgAddr("gno.land/r/pool")
	posAddr  = std.DerivePkgAddr("gno.land/r/position")
)

var (
	// Common
	fooPath = "gno.land/r/foo" // token1
	barPath = "gno.land/r/bar" // token2
	bazPath = "gno.land/r/baz" // token3

	pFee = uint16(500)

	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11000)
	test_liquidityExpect = bigint(100_000_000)

	test_tickLower2 = int32(50000)
	test_tickUpper2 = int32(100000)
)

// 1. Init Pool
func TestInit(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	InitManual()
}

// 2. Create Foo:Bar Pool
func TestCreateFooBarPool(t *testing.T) {
	std.TestSetOrigCaller(pc01)
	CreatePool(fooPath, barPath, pFee, 130621891405341611593710811006)
	shouldEQ(t, len(pools), 1)
}

// 3. Create Bar:Baz Pool
func TestCreateBarBazPool(t *testing.T) {
	std.TestSetOrigCaller(pc01)
	CreatePool(barPath, bazPath, pFee, 130621891405341611593710811006)
	shouldEQ(t, len(pools), 2)
}

// 4. Mint Foo:Bar Liquidity by lp01
func TestMintFooBarLiquidity(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)

	Mint(
		fooPath,
		barPath,
		pFee,
		posAddr,
		-test_tickUpper,
		-test_tickLower,
		test_liquidityExpect,
	)
}

// 5. Mint Bar:Baz Liquidity by lp01
func TestMintBarBazLiquidity(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)

	Mint(
		barPath,
		bazPath,
		pFee,
		posAddr,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpect,
	)
}

// API TESTS
func TestApiGetPools(t *testing.T) {
	jsonStr := ApiGetPools()
	jsonArr := gjson.Parse(jsonStr).Get("response.data").Array()
	shouldEQ(t, len(jsonArr), 2)
}

func TestApiGetPool(t *testing.T) {
	jsonStr := ApiGetPool("gno.land/r/bar:gno.land/r/baz:500")
	jsonOutput := gjson.Parse(jsonStr).Get("response.data")
	shouldEQ(t, jsonOutput.Get("pool_path").String(), "gno.land/r/bar:gno.land/r/baz:500")
}

// RPC TESTS
func TestRpcGetPools(t *testing.T) {
	RpcGetPools()
}

/* HELPER */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldNEQ(t *testing.T, got, expected interface{}) {
	if got == expected {
		t.Errorf("got %v, didn't expected %v", got, expected)
	}
}
