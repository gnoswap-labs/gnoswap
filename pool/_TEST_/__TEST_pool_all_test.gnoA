package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/json"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"

	"gno.land/r/demo/gnoswap/consts"

	"gno.land/r/demo/gns"
)

var (
	test_tickLower          = int32(9000)
	test_tickUpper          = int32(11000)
	test_liquidityExpectStr = "100000000"
)

// 1. Create Foo:Bar Pool
func TestCreateFooBarPool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)
	std.TestSkipHeights(1)

	CreatePool(fooPath, barPath, fee500, "130621891405341611593710811006") // tick 10000
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}	shouldEQ(t, len(pools), 1)
	std.TestSkipHeights(1)
}

// 2. Create Bar:Baz Pool
func TestCreateBarBazPool(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), poolCreationFee)
	std.TestSkipHeights(1)

	CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006") // tick 10000
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/baz:500}]}	shouldEQ(t, len(pools), 2)
	std.TestSkipHeights(1)
}

// 3. Mint Foo:Bar Liquidity by gsa
func TestMintFooBarLiquidity(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(4)

	std.TestSetRealm(posRealm)
	amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		consts.POSITION_ADDR.String(),
		-11000, // -11000
		-9000,  // -9000
		test_liquidityExpectStr,
	)
	shouldEQ(t, amount0, "8040316")
	shouldEQ(t, amount1, "2958015")
	std.TestSkipHeights(1)
}

// 4. Mint Bar:Baz Liquidity by gsa
func TestMintBarBazLiquidity(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	std.TestSkipHeights(2)

	std.TestSetRealm(posRealm)
	amount0, amount1 := Mint(
		barPath,
		bazPath,
		fee500,
		consts.POSITION_ADDR.String(),
		test_tickLower,
		test_tickUpper,
		test_liquidityExpectStr,
	)
	shouldEQ(t, amount0, "2958015")
	shouldEQ(t, amount1, "8040316")
	std.TestSkipHeights(1)
}

// GETTER_API TEST
func TestApiGetPools(t *testing.T) {
	gpls := ApiGetPools()

	root, err := json.Unmarshal([]byte(gpls))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	shouldEQ(t, response.Size(), 2)
}
