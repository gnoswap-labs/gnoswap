package main

import (
	"std"
	"testing"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/obl"
	"gno.land/r/demo/qux"
	"gno.land/r/demo/wugnot"

	"gno.land/p/demo/json"
	pusers "gno.land/p/demo/users"

	"gno.land/r/demo/gnoswap/consts"

	pl "gno.land/r/demo/pool"
)

var (
	gsa std.Address = consts.GNOSWAP_ADMIN

	fooPath string = "gno.land/r/demo/foo"
	barPath string = "gno.land/r/demo/bar"
	bazPath string = "gno.land/r/demo/baz"
	quxPath string = "gno.land/r/demo/qux"

	oblPath string = "gno.land/r/demo/obl"

	fee100  uint32 = 100
	fee500  uint32 = 500
	fee3000 uint32 = 3000

	maxApprove uint64 = 18446744073709551615

	// TESTING
	t *testing.T
)

var (
	gsaRealm = std.NewUserRealm(gsa)
	posRealm = std.NewCodeRealm(consts.POSITION_PATH)
	rouRealm = std.NewCodeRealm(consts.ROUTER_PATH)
)

type FooToken struct{}

func (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return foo.Transfer
}
func (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return foo.TransferFrom
}
func (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return foo.BalanceOf
}
func (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return foo.Approve
}

type BarToken struct{}

func (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return bar.Transfer
}
func (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return bar.TransferFrom
}
func (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return bar.BalanceOf
}
func (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return bar.Approve
}

type BazToken struct{}

func (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return baz.Transfer
}
func (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return baz.TransferFrom
}
func (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return baz.BalanceOf
}
func (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return baz.Approve
}

type QuxToken struct{}

func (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return qux.Transfer
}
func (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return qux.TransferFrom
}
func (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return qux.BalanceOf
}
func (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return qux.Approve
}

type WugnotToken struct{}

func (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return wugnot.Transfer
}
func (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return wugnot.TransferFrom
}
func (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return wugnot.BalanceOf
}
func (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return wugnot.Approve
}

type OBLToken struct{}

func (OBLToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return obl.Transfer
}
func (OBLToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return obl.TransferFrom
}
func (OBLToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return obl.BalanceOf
}
func (OBLToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return obl.Approve
}

type GNSToken struct{}

func (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {
	return gns.Transfer
}

func (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {
	return gns.TransferFrom
}

func (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {
	return gns.BalanceOf
}

func (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {
	return gns.Approve
}

/* HELPER FUNCTIONS */
func a2u(addr std.Address) pusers.AddressOrName {
	return pusers.AddressOrName(addr)
}

func ugnotBalanceOf(addr std.Address) uint64 {
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)

	coins := testBanker.GetCoins(addr)
	if len(coins) == 0 {
		return 0
	}

	return uint64(coins.AmountOf("ugnot"))
}

func init() {
	std.TestSetRealm(gsaRealm)

	// TOKEN REGISTER
	std.TestSetRealm(gsaRealm)
	std.TestSetOrigCaller(gsa)

	pl.RegisterGRC20Interface("gno.land/r/demo/foo", FooToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/bar", BarToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/baz", BazToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/qux", QuxToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/obl", OBLToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/wugnot", WugnotToken{})
	pl.RegisterGRC20Interface("gno.land/r/demo/gns", GNSToken{})
}

/* START TEST */
func main() {
	createBarFooPool()
	mint()
	burn()
	collect()
	swap()
	setFeeProtocol()
	collectProtocol()
	apiGetPools()
}

func createBarFooPool() {
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	std.TestSkipHeights(1)

	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick 10000
	if len(pl.PoolGetPoolList()) != 1 {
		panic("expected 1 pool")
	}
	std.TestSkipHeights(1)
}
func mint() {
	std.TestSetRealm(gsaRealm)

	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Mint(
		fooPath,
		barPath,
		fee500,
		consts.POSITION_ADDR.String(),
		9000,
		11000,
		"1000",
	)
	if amount0 != "30" {
		panic(amount0)
	}
	if amount1 != "81" {
		panic(amount1)
	}

	pool := pl.GetPool(barPath, fooPath, fee500)
	testLiquidity := pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "1000" {
		panic("expected 1000")
	}

	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")

	m81, m82 := pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	m101, m102 := pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")

	if m81 == "0" || m82 == "0" {
		panic("mint foo bar 2")
	}

	if m81 != m101 || m82 != m102 {
		panic("mint foo bar 3")
	}

	testLiquidity = pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "10000" {
		panic("expected 10000")
	}

	// tickLower > currentTick == don't add to current liquidity
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 50000, 100000, "1000")

	// tickUpper < current tick == don't add to current liquidity
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), -100000, -50000, "1000")

	// tickUpper < tickLower == don't add to current liquidity
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), -11000, -9000, "1000")

	testLiquidity = pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "10000" {
		panic("expected 10000")
	}

	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "1000")

	testLiquidity = pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "20000" {
		panic("expected 20000")
	}
}
func burn() {
	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)

	b11, b12 := pl.Burn(barPath, fooPath, fee500, 9000, 11000, "1000")
	b21, b22 := pl.Burn(barPath, fooPath, fee500, 9000, 11000, "1000")
	if b11 != b21 || b12 != b22 {
		panic("burn foo bar 1")
	}

	pool := pl.GetPool(barPath, fooPath, fee500)
	testLiquidity := pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "18000" {
		panic("expected 18000")
	}

	pl.Burn(barPath, fooPath, fee500, 9000, 11000, "8000")
	testLiquidity = pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "10000" {
		panic("expected 10000")
	}

	pl.Burn(barPath, fooPath, fee500, 9000, 11000, "1")
	testLiquidity = pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "9999" {
		panic("expected 9999")
	}

	pl.Burn(barPath, fooPath, fee500, 9000, 11000, "999")
	testLiquidity = pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "9000" {
		panic("expected 9000")
	}

	pl.Burn(barPath, fooPath, fee500, 9000, 11000, "9000")
	testLiquidity = pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "0" {
		panic("expected 0")
	}
}
func collect() {
	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)

	// withdraw all token before test `Collect`
	pl.Collect(barPath, fooPath, fee500, gsa.String(), 9000, 11000, "50000000", "50000000")

	pool := pl.GetPool(barPath, fooPath, fee500)
	testLiquidity := pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "0" {
		panic("expected 0")
	}

	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "15000")
	pl.Burn(barPath, fooPath, fee500, 9000, 11000, "15000")
	c11, c12 := pl.Collect(barPath, fooPath, fee500, gsa.String(), 9000, 11000, "50000000", "50000000")

	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "15000")
	pl.Burn(barPath, fooPath, fee500, 9000, 11000, "15000")
	c21, c22 := pl.Collect(barPath, fooPath, fee500, gsa.String(), 9000, 11000, "50000000", "50000000")

	if c11 != c21 || c12 != c22 {
		panic("collect foo bar 1")
	}

	if c11 != "443" || c12 != "1206" {
		panic("collect foo bar 2")
	}

	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "15000")
	pl.Burn(barPath, fooPath, fee500, 9000, 11000, "15000")
	c31, c32 := pl.Collect(barPath, fooPath, fee500, gsa.String(), 9000, 11000, "100", "100")
	if c31 != "100" || c32 != "100" {
		panic("collect foo bar 3")
	}

	c41, c42 := pl.Collect(barPath, fooPath, fee500, gsa.String(), 9000, 11000, "50000000", "50000000")
	if c41 != "343" || c42 != "1106" {
		panic("collect foo bar 4")
	}

	// Just Mint > No Burn => nothing to collect
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "15000")
	// Burn(barPath, fooPath, fee500, 9000, 11000, "15000")
	c51, c52 := pl.Collect(barPath, fooPath, fee500, gsa.String(), 9000, 11000, "50000000", "50000000")
	if c51 != "0" || c52 != "0" {
		panic("collect foo bar 5")
	}

	// Burn Now => something to collect
	pl.Burn(barPath, fooPath, fee500, 9000, 11000, "15000")
	c61, c62 := pl.Collect(barPath, fooPath, fee500, gsa.String(), 9000, 11000, "50000000", "50000000")
	if c61 == "0" || c62 == "0" {
		panic("collect foo bar 6")
	}
}
func swap() {
	pool := pl.GetPool(barPath, fooPath, fee500)
	testLiquidity := pool.PoolGetLiquidity()
	if testLiquidity.ToString() != "0" {
		panic("expected 0")
	}

	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)
	pl.Mint(barPath, fooPath, fee500, consts.POSITION_ADDR.String(), 9000, 11000, "2000000")

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	{
		amount0, amount1 := pl.Swap(
			fooPath,                      // token0Path
			barPath,                      // token1Path
			fee500,                       // fee
			gsa.String(),                 // recipient
			true,                         // zeroForOne
			"10000",                      // _amountSpecified
			consts.MIN_PRICE,             // _sqrtPriceLimitX96
			std.GetOrigCaller().String(), // payer
		)
		if amount0 == "0" || amount1 == "0" {
			panic("swap foo bar 1")
		}
	}

	{
		amount0, amount1 := pl.Swap(barPath, fooPath, fee500, gsa.String(), true, "5000", consts.MIN_PRICE, std.GetOrigCaller().String()) // give enough amount to take fees away
		if amount0 != "5000" || amount1 != "-13307" {
			panic("swap foo bar 2")
		}
	}

	{
		amount0, amount1 := pl.Swap(barPath, fooPath, fee500, gsa.String(), true, "1000", consts.MIN_PRICE, std.GetOrigCaller().String()) // give enough amount to take fees away
		if amount0 != "1000" || amount1 != "-2647" {
			panic("swap foo bar 3")
		}
	}

	// Token0 -> Token1
	{
		amount0, amount1 := pl.Swap(barPath, fooPath, fee500, gsa.String(), false, "16000", consts.MAX_PRICE, std.GetOrigCaller().String()) // give enough amount to take fees away
		if amount0 != "-6010" || amount1 != "16000" {
			panic("swap foo bar 4")
		}
	}

}
func setFeeProtocol() {
	std.TestSetOrigCaller(gsa)
	pl.SetFeeProtocol(6, 8)

	/* unable to get fee protocol
	pool := pl.GetPool(barPath, fooPath, fee500)
	if pool.PoolGetSlot0().feeProtocol != 134 {
		panic("set fee protocol")
	}
	*/
}
func collectProtocol() {
	std.TestSetOrigCaller(gsa)
	pl.SetFeeProtocol(6, 8)

	std.TestSetRealm(rouRealm)
	std.TestSetOrigCaller(gsa)
	pl.Swap(
		barPath,
		fooPath,
		fee500,
		gsa.String(),
		true,
		"200000",
		consts.MIN_PRICE,
		std.GetOrigCaller().String(),
	)

	std.TestSetRealm(gsaRealm)
	protocolFee0, protocolFee1 := pl.CollectProtocol(barPath, fooPath, fee500, gsa.String(), "100000", "100000")
	if protocolFee0 != "8" {
		panic(protocolFee0)
	}
	if protocolFee1 != "0" {
		panic(protocolFee1)
	}
}

func apiGetPools() {
	gpls := pl.ApiGetPools()

	root, err := json.Unmarshal([]byte(gpls))
	if err != nil {
		panic(err)
	}

	response, err := root.GetKey("response")
	if err != nil {
		panic(err)
	}

	if response.Size() != 1 {
		panic("expected 1")
	}
}

// Output:
//
