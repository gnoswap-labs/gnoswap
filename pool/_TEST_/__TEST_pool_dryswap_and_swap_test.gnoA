package pool

import (
	"std"
	"testing"

	"gno.land/r/demo/gnoswap/consts"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/foo"

	"gno.land/r/demo/gns"
)

var (
	sqrtPrice = "130621891405341611593710811006"

	tickLower       = int32(9000)
	tickUpper       = int32(11000)
	liquidityExpect = "100000000000"

	currentTick = int32(10000)
)

func TestCreatePool(t *testing.T) {
	// call gns faucet to get creation fee
	std.TestSetRealm(gsaRealm)

	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	CreatePool(fooPath, barPath, fee500, sqrtPrice)
	// ---       event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_callType DIRECT} {m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}
	shouldEQ(t, len(pools), 1)
}

func TestDrySwap_ZeroForOneTrue_AmountSpecified_Positive_16000(t *testing.T) {
	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)

	// no mint == no liquidity => swap will fail
	_, _, ok := DrySwap(fooPath, barPath, fee500, true, "16000", consts.MIN_PRICE)
	shouldEQ(t, ok, false)

	// not enough mint == swap will fail
	std.TestSetRealm(gsaRealm)

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)
	Mint(fooPath, barPath, fee500, consts.POSITION_ADDR.String(), -tickUpper, -tickLower, "10")
	_, _, ok = DrySwap(fooPath, barPath, fee500, true, "16000", consts.MIN_PRICE)
	shouldEQ(t, ok, false)

	std.TestSetRealm(gsaRealm)

	std.TestSetRealm(posRealm)
	std.TestSetOrigCaller(gsa)
	Mint(fooPath, barPath, fee500, consts.POSITION_ADDR.String(), -tickUpper, -tickLower, liquidityExpect) // -11000  ~ -9000

	// zeroForOne true
	// amountSpecified 16000
	poolIn, poolOut, _ := DrySwap(
		fooPath,          // fooPath
		barPath,          // barPath
		fee500,           // fee500
		true,             // zeroForOne
		"16000",          // amountSpecified
		consts.MIN_PRICE, // sqrtPriceLimitX96
	)
	shouldEQ(t, poolIn, "16000")
	shouldEQ(t, poolOut, "-5883")
}

func TestDrySwap_ZeroForOneTrue_AmountSpecified_Negative_16000(t *testing.T) {
	// zeroForOne true
	// amountSpecified -16000

	poolIn, poolOut, _ := DrySwap(
		fooPath,          // fooPath
		barPath,          // barPath
		fee500,           // fee500
		true,             // zeroForOne
		"-16000",         // amountSpecified
		consts.MIN_PRICE, // sqrtPriceLimitX96
	)

	shouldEQ(t, poolIn, "43513")
	shouldEQ(t, poolOut, "-16000")
}

// func TestDrySwap_ZeroForOneFalse_AmountSpecified_Positive_16000(t *testing.T) {
// 	// zeroForOne false
// 	// amountSpecified 16000

// 	poolOut, poolIn, _ := DrySwap(
// 		fooPath,          // fooPath
// 		barPath,          // barPath
// 		fee500,           // fee500
// 		"_",              // recipient
// 		false,            // zeroForOne
// 		"16000",          // amountSpecified
// 		consts.MAX_PRICE, // sqrtPriceLimitX96
// 	)

// 	shouldEQ(t, poolOut, "-43468")
// 	shouldEQ(t, poolIn, "16000")
// }

// func TestDrySwap_ZeroForOneFalse_AmountSpecified_Negative_16000(t *testing.T) {
// 	// zeroForOne false
// 	// amountSpecified -16000
// 	poolOut, poolIn, _ := DrySwap(
// 		fooPath,          // fooPath
// 		barPath,          // barPath
// 		fee500,           // fee500
// 		"_",              // recipient
// 		false,            // zeroForOne
// 		"-16000",         // amountSpecified
// 		consts.MAX_PRICE, // sqrtPriceLimitX96
// 	)
// 	shouldEQ(t, poolOut, "-16000")
// 	shouldEQ(t, poolIn, "5888")
// }
