package pool

import (
	"testing"

	"gno.land/p/demo/uassert"
	u256 "gno.land/p/gnoswap/uint256"
	i256 "gno.land/p/gnoswap/int256"
	"gno.land/r/gnoswap/v1/consts"
	"gno.land/r/gnoswap/v1/common"
)


func TestModifyPosition(t *testing.T) {
	const (
		fee500              = uint32(500)
		test_liquidityDelta = int64(100000000)
	)

	tests := []struct {
		name        string
		sqrtPrice   string
		tickLower   int32
		tickUpper   int32
		expectedAmt0 string
		expectedAmt1 string
	}{
		{
			name: "current price is lower than range",
			sqrtPrice:   common.TickMathGetSqrtRatioAtTick(-12000).ToString(),
			tickLower:   -11000,
			tickUpper:   -9000,
			expectedAmt0: "16492846",
			expectedAmt1: "0",
		},
		{
			name: "current price is in range",
			sqrtPrice:   common.TickMathGetSqrtRatioAtTick(-10000).ToString(),
			tickLower:   -11000,
			tickUpper:   -9000,
			expectedAmt0: "8040316",
			expectedAmt1: "2958015",
		},
		{
			name: "current price is higher than range",
			sqrtPrice:   common.TickMathGetSqrtRatioAtTick(-8000).ToString(),
			tickLower:   -11000,
			tickUpper:   -9000,
			expectedAmt0: "0",
			expectedAmt1: "6067683",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			sqrtPrice := u256.MustFromDecimal(tt.sqrtPrice)
			pool := newPool(
				barPath,
				fooPath,
				fee500,
				feeAmountTickSpacing[fee500],
				sqrtPrice,
			)

			params := ModifyPositionParams{
				owner:          consts.POSITION_ADDR,
				tickLower:      tt.tickLower,
				tickUpper:      tt.tickUpper,
				liquidityDelta: new(i256.Int).SetInt64(test_liquidityDelta),
			}

			_, amount0, amount1 := pool.modifyPosition(params)

			uassert.Equal(t, amount0.ToString(), tt.expectedAmt0)
			uassert.Equal(t, amount1.ToString(), tt.expectedAmt1)
		})
	}
}

func TestModifyPositionEdgeCases(t *testing.T) {
	const fee500 = uint32(500)
	sqrtPrice := common.TickMathGetSqrtRatioAtTick(-10000).ToString()

	sp := u256.MustFromDecimal(sqrtPrice)

	t.Run("liquidityDelta is zero", func(t *testing.T) {
		pool := newPool(
			barPath,
			fooPath,
			fee500,
			feeAmountTickSpacing[fee500],
			sp,
		)

		params := ModifyPositionParams{
			owner:          consts.POSITION_ADDR,
			tickLower:      -11000,
			tickUpper:      -9000,
			liquidityDelta: i256.Zero(),
		}

		defer func() {
			if r := recover(); r == nil {
				t.Error("expected panic. not happened")
			} else {
				expectedError := "[GNOSWAP-POOL-010] zero liquidity"
				if err, ok := r.(string); !ok || err[:len(expectedError)] != expectedError {
					t.Errorf("expected error message. got: %v, want: %v", r, expectedError)
				}
			}
		}()
	
		pool.modifyPosition(params)
	})

	t.Run("liquidityDelta is negative", func(t *testing.T) {
		pool := newPool(
			barPath,
			fooPath,
			fee500,
			feeAmountTickSpacing[fee500],
			sp,
		)

		params := ModifyPositionParams{
			owner:          consts.POSITION_ADDR,
			tickLower:      -11000,
			tickUpper:      -9000,
			liquidityDelta: i256.MustFromDecimal("100000000"),
		}
		pool.modifyPosition(params)

		// remove liquidity
		params.liquidityDelta = i256.MustFromDecimal("-100000000")
		_, amount0, amount1 := pool.modifyPosition(params)

		// remove amount should be negative value of added amount
		uassert.Equal(t, amount0.ToString(), "-8040315")
		uassert.Equal(t, amount1.ToString(), "-2958014")
	})
}
