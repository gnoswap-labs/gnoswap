// SwapRoute & DrySwapRoute [ 2 position 1 route 1 hop ]
package swap_scenario

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"
	rr "gno.land/r/demo/router"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"

	"gno.land/r/demo/gns"
)

var (
	lp01 = testutils.TestAddress("lp01")
	tr01 = testutils.TestAddress("tr01")
)

func TestPoolInitByAdmin(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	pl.InitManual()

	std.TestSkipHeights(1)
}

func TestPoolCreatePools(t *testing.T) {
	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)

	// bar-baz
	pl.CreatePool(barPath, bazPath, 100, "354340008410679467268648495215") // tick 29960 ≈ 1:20

	std.TestSkipHeights(4)
}

func TestFaucetLP01(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 0)

	bar.Faucet(lp01)
	baz.Faucet(lp01)

	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 100000000)

	std.TestSkipHeights(5)
}

func TestPositionMintBarBazInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29950,       // tickLower
		29970,       // tickUpper
		"1000",      // amount0Desired
		"1000",      // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)
	shouldEQ(t, tokenId, 1)
	shouldEQ(t, liquidity, "447321")
	shouldEQ(t, amount0, "50")
	shouldEQ(t, amoutn1, "999")

	std.TestSkipHeights(3)
}

func TestPositionMintBarBazInRangeMore(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29950,       // tickLower
		29970,       // tickUpper
		"1000",      // amount0Desired
		"1000",      // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)
	shouldEQ(t, tokenId, 2)
	shouldEQ(t, liquidity, "447321")
	shouldEQ(t, amount0, "50")
	shouldEQ(t, amoutn1, "1000")

	std.TestSkipHeights(3)

	poolBar := bar.BalanceOf(a2u(consts.POOL_ADDR))
	poolBaz := baz.BalanceOf(a2u(consts.POOL_ADDR))

}

func TestFaucetTR01(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 0)

	bar.Faucet(tr01)
	baz.Faucet(tr01)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 100000000)

	std.TestSkipHeights(5)
}

func TestRouterDrySwapRouteBarBazExactOut(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	dryResult := rr.DrySwapRoute(
		barPath,     // inputToken
		bazPath,     // outputToken
		"1800",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"100", // quoteArr
	)
	println("EXACT_OUT_dryResult:", dryResult)
	std.TestSkipHeights(2)
}

func TestRouterSwapRouteBarBazExactOut(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(consts.POOL_ADDR), 100000)
	baz.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

	oldBar := bar.BalanceOf(a2u(tr01))
	oldBaz := baz.BalanceOf(a2u(tr01))

	swapResult := rr.SwapRoute(
		barPath,     // inputToken
		bazPath,     // outputToken
		"1800",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"100", // quoteArr
		"100", // tokenAmountLimit (maxSpent)
	)
	println("EXACT_OUT_swapResult:", swapResult)

	newBar := bar.BalanceOf(a2u(tr01))
	newBaz := baz.BalanceOf(a2u(tr01))

	println("R sentBar:", oldBar-newBar)
	println("recvBaz:", newBaz-oldBaz)

	std.TestSkipHeights(2)
}
