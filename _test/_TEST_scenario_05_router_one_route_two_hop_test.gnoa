// SwapRoute & DrySwapRoute [ 1 route 2 hop ]
package swap_scenario

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"
	rr "gno.land/r/demo/router"
	sr "gno.land/r/demo/staker"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/qux"

	"gno.land/r/demo/wugnot"

	"gno.land/r/demo/gns"
	"gno.land/r/demo/obl"

	"gno.land/r/demo/gnft"
)

var (
	lp01 = testutils.TestAddress("lp01")
	tr01 = testutils.TestAddress("tr01")
)

func TestPoolInitByAdmin(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	pl.InitManual()

	std.TestSkipHeights(1)
}

func TestPoolCreatePools(t *testing.T) {
	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE*3)

	// bar-baz
	pl.CreatePool(barPath, bazPath, 100, "354340008410679467268648495215") // tick 29960 ≈ 1:20

	// baz-foo
	pl.CreatePool(bazPath, fooPath, 100, "25050389945027294416741547334") // tick -23030 ≈ 1:0.1

	// foo-wugnot
	pl.CreatePool(fooPath, consts.WRAPPED_WUGNOT, 100, "17714911063927984461157312042") // tick -29960 ≈ 1:0.05

	std.TestSkipHeights(4)
}

func TestFaucetLP01(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, foo.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, qux.BalanceOf(a2u(lp01)), 0)

	bar.Faucet(lp01)
	baz.Faucet(lp01)
	foo.Faucet(lp01)
	qux.Faucet(lp01)

	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, foo.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, qux.BalanceOf(a2u(lp01)), 100000000)

	std.TestSkipHeights(5)
}

func TestPositionMintBarBazInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29950,       // tickLower
		29970,       // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, liquidity, "4473213900")
	shouldEQ(t, amount0, "499942")
	shouldEQ(t, amoutn1, "9999999")

	std.TestSkipHeights(3)
}

func TestPositionMintBarBazLowerRange(t *testing.T) {
	// lower range ≈ only token1
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29900,       // tickLower
		29910,       // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 2)
	shouldEQ(t, liquidity, "4484410364")
	shouldEQ(t, amount0, "0")
	shouldEQ(t, amoutn1, "9999999")

	std.TestSkipHeights(3)
}

func TestPositionMintBarBazUpperRange(t *testing.T) {
	// upper range ≈ only token0
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		30000,       // tickLower
		32000,       // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 3)
	shouldEQ(t, liquidity, "470937834")
	shouldEQ(t, amount0, "10000000")
	shouldEQ(t, amoutn1, "0")

	std.TestSkipHeights(3)
}

func TestPositionMintBazFooInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve baz, foo to pool
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)
	foo.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		bazPath,     // token0
		fooPath,     // token1
		100,         // fee
		-23050,      // tickLower
		-23010,      // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 4)
	shouldEQ(t, liquidity, "3163542978")
	shouldEQ(t, amount0, "10000000")
	shouldEQ(t, amoutn1, "999700")

	std.TestSkipHeights(3)
}

func TestPositionMintFooGnotInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// deposit wugnot first
	std.TestIssueCoins(lp01, std.Coins{{"ugnot", 10000000}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 10000000}}, nil)

	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 10000000)

	wugnot.Deposit()

	// approve foo, wugnot to pool
	foo.Approve(a2u(consts.POOL_ADDR), 10000000)
	wugnot.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		fooPath,               // token0
		consts.WRAPPED_WUGNOT, // token1
		100,                   // fee
		-30960,                // tickLower
		-28960,                // tickUpper
		"10000000",            // amount0Desired
		"10000000",            // amount1Desired
		"0",                   // amount0Min
		"0",                   // amount1Min
		max_timeout,           // deadline
	)

	shouldEQ(t, tokenId, 5)
	shouldEQ(t, liquidity, "45848241")
	shouldEQ(t, amount0, "10000000")
	shouldEQ(t, amoutn1, "499941")

	std.TestSkipHeights(4)
}

func TestStakerCreateExternalIncentive(t *testing.T) {
	/*
		// tier 1 for INTERNAL REWARD
		poolTiers["gno.land/r/demo/gns:gno.land/r/demo/wugnot:500"] = 1
		poolTiers["gno.land/r/demo/bar:gno.land/r/demo/baz:100"] = 1 // dev
	*/

	// get some obl to create external incentive
	std.TestSetOrigCaller(test1)

	// approve obl to staker
	obl.Approve(a2u(consts.STAKER_ADDR), 100000000)

	sr.CreateExternalIncentive(
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // targetPoolPath
		oblPath,            // rewardTokenPath
		"100000000",        // rewardAmount
		1234568045,         // startTimestamp
		1234568045+7776000, // endTimestamp ( 90 days )
	)

	std.TestSkipHeights(3)
}

func TestStakerStakeToken(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve lpTokenId to staker
	gnft.Approve(a2u(consts.STAKER_ADDR), tid(1))

	// stake tokenId 1
	sr.StakeToken(1)
	std.TestSkipHeights(3)
}

func TestStakerCollectReward(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, gns.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, obl.BalanceOf(a2u(lp01)), 0)

	sr.CollectReward(1)

	shouldEQ(t, gns.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, obl.BalanceOf(a2u(lp01)), 21)
}

func TestFaucetTR01(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 0)
	shouldEQ(t, foo.BalanceOf(a2u(tr01)), 0)
	shouldEQ(t, qux.BalanceOf(a2u(tr01)), 0)

	bar.Faucet(tr01)
	baz.Faucet(tr01)
	foo.Faucet(tr01)
	qux.Faucet(tr01)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, foo.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, qux.BalanceOf(a2u(tr01)), 100000000)

	std.TestSkipHeights(5)
}

func TestRouterDrySwapRouteBarFooExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	dryResult := rr.DrySwapRoute(
		barPath,    // inputToken
		fooPath,    // outputToken
		"100000",   // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "199863")
	std.TestSkipHeights(2)
}

func TestRouterSwapRouteBarFooExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(consts.POOL_ADDR), 100000)
	foo.Approve(a2u(consts.ROUTER_ADDR), 300) // 0.15% of 199863

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, foo.BalanceOf(a2u(tr01)), 100000000)

	swapResult := rr.SwapRoute(
		barPath,    // inputToken
		fooPath,    // outputToken
		"100000",   // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100", // strRouteArr
		"100", // quoteArr
		"1",   // tokenAmountLimit (minRecv)
	)
	shouldEQ(t, swapResult, "199564")

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99900000)
	shouldEQ(t, foo.BalanceOf(a2u(tr01)), 100199564)

	std.TestSkipHeights(2)
}

func TestRouterDrySwapRouteBarFooExactOutAfterSwap(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	dryResult := rr.DrySwapRoute(
		barPath,     // inputToken
		fooPath,     // outputToken
		"100000",    // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "50057")
	std.TestSkipHeights(2)
}

func TestRouterSwapRouteBarFooExactOutAfterSwap(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(consts.POOL_ADDR), 100000)
	foo.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99900000)
	shouldEQ(t, foo.BalanceOf(a2u(tr01)), 100199564)

	swapResult := rr.SwapRoute(
		barPath,     // inputToken
		fooPath,     // outputToken
		"100000",    // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100", // strRouteArr
		"100",   // quoteArr
		"50057", // maxSpent
	)
	shouldEQ(t, swapResult, "50057")

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99849943)
	shouldEQ(t, foo.BalanceOf(a2u(tr01)), 100299414)

	std.TestSkipHeights(2)
}
