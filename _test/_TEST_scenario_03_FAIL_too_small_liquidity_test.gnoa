// single lp, small amount liquidity
// XXX: SHOULD FAIL DUE TO TOO SMALL LIQUIDITY
package swap_scenario

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"
	rr "gno.land/r/demo/router"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"

	"gno.land/r/demo/gns"
)

var (
	lp01 = testutils.TestAddress("lp01")
	tr01 = testutils.TestAddress("tr01")
)

func TestPoolInitByAdmin(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	pl.InitManual()

	std.TestSkipHeights(1)
}

func TestPoolCreatePools(t *testing.T) {
	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE*2)

	// bar-baz
	pl.CreatePool(barPath, bazPath, 100, "354340008410679467268648495215") // tick 29960 ≈ 1:20

	// baz-foo
	pl.CreatePool(bazPath, fooPath, 100, "79228162514264337593543950337") // tick 0 ≈ 1:1

	std.TestSkipHeights(2)
}

func TestFaucetLP01(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, foo.BalanceOf(a2u(lp01)), 0)

	bar.Faucet(lp01)
	baz.Faucet(lp01)
	foo.Faucet(lp01)

	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, foo.BalanceOf(a2u(lp01)), 100000000)

	std.TestSkipHeights(5)
}

func TestPositionMintBarBazInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29950,       // tickLower
		29970,       // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, liquidity, "4473213900")
	shouldEQ(t, amount0, "499942")
	shouldEQ(t, amoutn1, "9999999")

	std.TestSkipHeights(3)
}

func TestPositionMintBazFooInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve baz, foo to pool
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)
	foo.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		bazPath,     // token0
		fooPath,     // token1
		100,         // fee
		-1000,       // tickLower
		1000,        // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 2)
	shouldEQ(t, liquidity, "205051662")
	shouldEQ(t, amount0, "10000000")
	shouldEQ(t, amoutn1, "9999999")

	std.TestSkipHeights(3)
}

func TestFaucetTR01(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 0)

	bar.Faucet(tr01)
	baz.Faucet(tr01)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 100000000)

	std.TestSkipHeights(2)
}

func TestRouterDrySwapBarBazExactIn(t *testing.T) {
	dryResult := rr.DrySwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"10",       // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100,gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"95,5", // quoteArr
	)
	shouldEQ(t, dryResult, "-1")
}

func TestRouterSwapBarBazExactIn(t *testing.T) {
	bar.Approve(a2u(consts.POOL_ADDR), 100000)

	shouldPanic(t, func() {
		rr.SwapRoute(
			barPath,    // inputToken
			bazPath,    // outputToken
			"10",       // amountSpecified
			"EXACT_IN", // swapType
			"gno.land/r/demo/bar:gno.land/r/demo/baz:100,gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
			"95,5", // quoteArr
			"1",    // tokenAmountLimit
		)
	})
}
