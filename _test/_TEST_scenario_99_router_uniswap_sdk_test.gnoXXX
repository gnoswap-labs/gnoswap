/*
UNISWAP TEST REF
  - https://github.com/Uniswap/v3-core/blob/main/test/shared/fixtures.ts
  - https://github.com/Uniswap/v3-core/blob/main/test/UniswapV3Router.spec.ts
  - https://github.com/Uniswap/router-sdk/blob/main/src/swapRouter.test.ts
*/
package swap_scenario

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"

	"gno.land/r/demo/gns"
)

var (
	lp01 = testutils.TestAddress("lp01")
	tr01 = testutils.TestAddress("tr01")

	// vars from Uniswap TEST
	feeAmount uint32 = 3000
	// https://github.com/Uniswap/v3-core/blob/d8b1c635c275d2a9450bd6a78f3fa2484fef73eb/test/UniswapV3Router.spec.ts#L24
	// https://github.com/Uniswap/v3-core/blob/d8b1c635c275d2a9450bd6a78f3fa2484fef73eb/test/shared/utilities.ts#L23

	tickSpacing = 60
	// https://github.com/Uniswap/v3-core/blob/d8b1c635c275d2a9450bd6a78f3fa2484fef73eb/test/UniswapV3Router.spec.ts#L25
	// https://github.com/Uniswap/v3-core/blob/d8b1c635c275d2a9450bd6a78f3fa2484fef73eb/test/shared/utilities.ts#L29

	minTick int32 = -887272
	maxTick int32 = 887272
	// https://github.com/Uniswap/v3-core/blob/d8b1c635c275d2a9450bd6a78f3fa2484fef73eb/test/shared/utilities.ts#L10-L11
)

func TestPoolInitByAdmin(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	pl.InitManual()

	std.TestSkipHeights(1)
}

func TestPoolCreatePools(t *testing.T) {
	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE*2)

	// bar-baz
	pl.CreatePool(barPath, bazPath, 100, "79228162514264337593543950337") // tick 0 ≈ 1:1

	// baz-foo
	// pl.CreatePool(bazPath, fooPath, 100, "79228162514264337593543950337") // tick 0 ≈ 1:1

	std.TestSkipHeights(4)
}

func TestFaucetLP01(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, foo.BalanceOf(a2u(lp01)), 0)

	bar.Faucet(lp01)
	baz.Faucet(lp01)
	foo.Faucet(lp01)

	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, foo.BalanceOf(a2u(lp01)), 100000000)
	std.TestSkipHeights(5)
}

// https://github.com/Uniswap/v3-core/blob/d8b1c635c275d2a9450bd6a78f3fa2484fef73eb/test/UniswapV3Router.spec.ts#L83C16-L83C16
func TestPositionMintBarBazInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		minTick,     // tickLower
		maxTick,     // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, liquidity, "10000000")
	shouldEQ(t, amount0, "9999999")
	shouldEQ(t, amoutn1, "9999999")

	std.TestSkipHeights(3)
}

// // https://github.com/Uniswap/v3-core/blob/d8b1c635c275d2a9450bd6a78f3fa2484fef73eb/test/UniswapV3Router.spec.ts#L84
// func TestPositionMintBazFooInRange(t *testing.T) {
// 	std.TestSetOrigCaller(lp01)

// 	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
// 	baz.Approve(a2u(consts.POOL_ADDR), 10000000)
// 	foo.Approve(a2u(consts.POOL_ADDR), 10000000)

// 	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
// 		bazPath,     // token0
// 		fooPath,     // token1
// 		100,         // fee
// 		minTick,     // tickLower
// 		maxTick,     // tickUpper
// 		"10000000",  // amount0Desired
// 		"10000000",  // amount1Desired
// 		"0",         // amount0Min
// 		"0",         // amount1Min
// 		max_timeout, // deadline
// 	)

// 	shouldEQ(t, tokenId, 2)
// 	shouldEQ(t, liquidity, "10000000")
// 	shouldEQ(t, amount0, "9999999")
// 	shouldEQ(t, amoutn1, "9999999")

// 	std.TestSkipHeights(3)
// }

// func TestFaucetTR01(t *testing.T) {
// 	std.TestSetOrigCaller(tr01)

// 	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 0)

// 	bar.Faucet(tr01)

// 	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 100000000)

// 	std.TestSkipHeights(5)
// }

// func TestRouterDrySwapRouteBarFooExactIn(t *testing.T) {
// 	std.TestSetOrigCaller(tr01)

// 	dryResult := rr.DrySwapRoute(
// 		barPath,    // inputToken
// 		fooPath,    // outputToken
// 		"100000",   // amountSpecified
// 		"EXACT_IN", // swapType
// 		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100", // strRouteArr
// 		"100", // quoteArr
// 	)
// 	shouldEQ(t, dryResult, "98019")
// 	std.TestSkipHeights(2)
// }

// func TestRouterSwapRouteBarFooExactIn(t *testing.T) {
// 	std.TestSetOrigCaller(tr01)

// 	// approve bar to pool
// 	bar.Approve(a2u(consts.POOL_ADDR), 100000)
// 	foo.Approve(a2u(consts.ROUTER_ADDR), 148) // 0.15% of 98019

// 	barOld := bar.BalanceOf(a2u(tr01))
// 	fooOld := foo.BalanceOf(a2u(tr01))
// 	shouldEQ(t, barOld, 100000000)
// 	shouldEQ(t, fooOld, 0)

// 	swapResult := rr.SwapRoute(
// 		barPath,    // inputToken
// 		fooPath,    // outputToken
// 		"100000",   // amountSpecified
// 		"EXACT_IN", // swapType
// 		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100", // strRouteArr
// 		"100", // quoteArr
// 		"1",   // tokenAmountLimit (minRecv)
// 	)
// 	shouldEQ(t, swapResult, "97872")

// 	barNew := bar.BalanceOf(a2u(tr01))
// 	fooNew := foo.BalanceOf(a2u(tr01))

// 	shouldEQ(t, barOld-barNew, 100000)
// 	shouldEQ(t, fooNew-fooOld, 97872)

// 	std.TestSkipHeights(2)
// }

// func TestRouterDrySwapRouteBarFooExactOutAfterSwap(t *testing.T) {
// 	std.TestSetOrigCaller(tr01)

// 	dryResult := rr.DrySwapRoute(
// 		barPath,     // inputToken
// 		fooPath,     // outputToken
// 		"100000",    // amountSpecified
// 		"EXACT_OUT", // swapType
// 		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100", // strRouteArr
// 		"100", // quoteArr
// 	)
// 	shouldEQ(t, dryResult, "106226")
// 	std.TestSkipHeights(2)
// }

// func TestRouterSwapRouteBarFooExactOutAfterSwap(t *testing.T) {
// 	std.TestSetOrigCaller(tr01)

// 	// approve bar to pool
// 	bar.Approve(a2u(consts.POOL_ADDR), 106226)
// 	foo.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

// 	barOld := bar.BalanceOf(a2u(tr01))
// 	fooOld := foo.BalanceOf(a2u(tr01))
// 	shouldEQ(t, barOld, 99900000)
// 	shouldEQ(t, fooOld, 97872)

// 	swapResult := rr.SwapRoute(
// 		barPath,     // inputToken
// 		fooPath,     // outputToken
// 		"100000",    // amountSpecified
// 		"EXACT_OUT", // swapType
// 		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100", // strRouteArr
// 		"100",    // quoteArr
// 		"123456", // tokenAmountLimit (maxSpent)
// 	)
// 	shouldEQ(t, swapResult, "106226")

// 	barNew := bar.BalanceOf(a2u(tr01))
// 	fooNew := foo.BalanceOf(a2u(tr01))

// 	shouldEQ(t, barOld-barNew, 106226)
// 	shouldEQ(t, fooNew-fooOld, 99849)

// 	std.TestSkipHeights(2)
// }
