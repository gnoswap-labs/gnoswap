// single lp, single swap, normal scenario
package swap_scenario

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	"gno.land/p/demo/common"
	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"
	rr "gno.land/r/demo/router"
	sr "gno.land/r/demo/staker"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"
	"gno.land/r/demo/obl"
	"gno.land/r/demo/qux"
	"gno.land/r/demo/wugnot"

	"gno.land/r/demo/gnft"
)

var (
	lp01 = testutils.TestAddress("lp01")
	tr01 = testutils.TestAddress("tr01")
)

func TestPoolInitByAdmin(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	pl.InitManual()

	std.TestSkipHeights(1)
}

func TestPoolCreatePools(t *testing.T) {
	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE*4)

	// bar-baz
	pl.CreatePool(barPath, bazPath, 100, common.TickMathGetSqrtRatioAtTick(29960).ToString()) // 1:20

	// baz-foo
	pl.CreatePool(bazPath, fooPath, 100, common.TickMathGetSqrtRatioAtTick(-23030).ToString()) // 1:0.1

	// foo-wugnot
	pl.CreatePool(fooPath, consts.WRAPPED_WUGNOT, 100, common.TickMathGetSqrtRatioAtTick(-29960).ToString()) // 1:0.05

	// gns-wugnot
	pl.CreatePool(consts.GNS_PATH, consts.WRAPPED_WUGNOT, 500, common.TickMathGetSqrtRatioAtTick(0).ToString()) // 1:1

	std.TestSkipHeights(5)
}

func TestFaucetLP01(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, foo.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, qux.BalanceOf(a2u(lp01)), 0)
	shouldEQ(t, gns.BalanceOf(a2u(lp01)), 0)

	foo.Faucet(lp01)
	bar.Faucet(lp01)
	baz.Faucet(lp01)
	qux.Faucet(lp01)
	gns.Faucet(lp01)

	shouldEQ(t, foo.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, bar.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, qux.BalanceOf(a2u(lp01)), 100000000)
	shouldEQ(t, gns.BalanceOf(a2u(lp01)), 100000000)

	std.TestSkipHeights(5)
}

func TestPositionMintBarBazInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29950,       // tickLower
		29970,       // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, liquidity, "4473213900")
	shouldEQ(t, amount0, "499941")
	shouldEQ(t, amoutn1, "9999999")

	std.TestSkipHeights(3)
}

func TestPositionMintBarBazLowerRange(t *testing.T) {
	// lower range ≈ only token1
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29900,       // tickLower
		29910,       // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 2)
	shouldEQ(t, liquidity, "4484410364")
	shouldEQ(t, amount0, "0")
	shouldEQ(t, amoutn1, "9999999")

	std.TestSkipHeights(3)
}

func TestPositionMintBarBazUpperRange(t *testing.T) {
	// upper range ≈ only token0
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(consts.POOL_ADDR), 10000000)
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		30000,       // tickLower
		32000,       // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 3)
	shouldEQ(t, liquidity, "470937834")
	shouldEQ(t, amount0, "9999999")
	shouldEQ(t, amoutn1, "0")

	std.TestSkipHeights(3)
}

func TestPositionMintBazFooInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve baz, foo to pool
	baz.Approve(a2u(consts.POOL_ADDR), 10000000)
	foo.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		bazPath,     // token0
		fooPath,     // token1
		100,         // fee
		-23050,      // tickLower
		-23010,      // tickUpper
		"10000000",  // amount0Desired
		"10000000",  // amount1Desired
		"0",         // amount0Min
		"0",         // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, 4)
	shouldEQ(t, liquidity, "3163542978")
	shouldEQ(t, amount0, "9999999")
	shouldEQ(t, amoutn1, "999700")

	std.TestSkipHeights(3)
}

func TestPositionMintFooGnotInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// deposit wugnot first
	std.TestIssueCoins(lp01, std.Coins{{"ugnot", 10000000}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 10000000}}, nil)

	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 10000000)

	wugnot.Deposit()

	// approve foo, wugnot to pool
	foo.Approve(a2u(consts.POOL_ADDR), 10000000)
	wugnot.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		fooPath,               // token0
		consts.WRAPPED_WUGNOT, // token1
		100,                   // fee
		-30960,                // tickLower
		-28960,                // tickUpper
		"10000000",            // amount0Desired
		"10000000",            // amount1Desired
		"0",                   // amount0Min
		"0",                   // amount1Min
		max_timeout,           // deadline
	)

	shouldEQ(t, tokenId, 5)
	shouldEQ(t, liquidity, "45848241")
	shouldEQ(t, amount0, "9999999")
	shouldEQ(t, amoutn1, "499941")

	std.TestSkipHeights(4)
}

func TestPositionMintGnsGnotInRange(t *testing.T) {
	// INTERNAL INCENTIVE POOL ( gns:gnot:500 staking )
	std.TestSetOrigCaller(lp01)

	// deposit wugnot first
	std.TestIssueCoins(lp01, std.Coins{{"ugnot", 10000000}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 10000000}}, nil)

	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 10000000)

	wugnot.Deposit()

	// approve gns, wugnot to pool
	gns.Approve(a2u(consts.POOL_ADDR), 10000000)
	wugnot.Approve(a2u(consts.POOL_ADDR), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pn.Mint(
		consts.GNS_PATH,       // token0
		consts.WRAPPED_WUGNOT, // token1
		500,                   // fee
		-1000,                 // tickLower
		1000,                  // tickUpper
		"10000000",            // amount0Desired
		"10000000",            // amount1Desired
		"0",                   // amount0Min
		"0",                   // amount1Min
		max_timeout,           // deadline
	)

	shouldEQ(t, tokenId, 6)
	shouldEQ(t, liquidity, "205051662")
	shouldEQ(t, amount0, "9999999")
	shouldEQ(t, amoutn1, "9999999")

	std.TestSkipHeights(4)
}

func TestStakerCreateExternalIncentive(t *testing.T) {
	// get some obl to create external incentive
	std.TestSetOrigCaller(test1)

	// approve obl to staker
	obl.Approve(a2u(consts.STAKER_ADDR), 100000000)

	sr.CreateExternalIncentive(
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // targetPoolPath
		oblPath,            // rewardTokenPath
		"100000000",        // rewardAmount
		1234568045,         // startTimestamp
		1234568045+7776000, // endTimestamp ( 90 days )
	)

	std.TestSkipHeights(3)
}

func TestStakerStakeTokenForInternalReward(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve lpTokenId to staker
	gnft.Approve(a2u(consts.STAKER_ADDR), tid(6))

	// stake tokenId 6
	sr.StakeToken(6)
	std.TestSkipHeights(2)
}

func TestStakerStakeTokenForExternalReward(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve lpTokenId to staker
	gnft.Approve(a2u(consts.STAKER_ADDR), tid(1))

	// stake tokenId 1
	sr.StakeToken(1)
	std.TestSkipHeights(2)
}

func TestApproveGNS(t *testing.T) {
	std.TestSetOrigCaller(consts.INTERNAL_REWARD_ACCOUNT)
	gns.Approve(a2u(consts.STAKER_ADDR), consts.UINT64_MAX) // internal reward distribution
	std.TestSkipHeights(1)
}

func TestStakerCollectInternalReward(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, gns.BalanceOf(a2u(lp01)), 90000001)
	shouldEQ(t, obl.BalanceOf(a2u(lp01)), 0)

	sr.CollectReward(6)

	shouldEQ(t, gns.BalanceOf(a2u(lp01)), 90163351)
	shouldEQ(t, obl.BalanceOf(a2u(lp01)), 0)

	std.TestSkipHeights(1)
}

func TestStakerCollectExternalReward(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, gns.BalanceOf(a2u(lp01)), 90163351)
	shouldEQ(t, obl.BalanceOf(a2u(lp01)), 0)

	sr.CollectReward(1)

	shouldEQ(t, gns.BalanceOf(a2u(lp01)), 90163351)
	shouldEQ(t, obl.BalanceOf(a2u(lp01)), 21)

	std.TestSkipHeights(1)
}

func TestFaucetTR01(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 0)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 0)
	shouldEQ(t, foo.BalanceOf(a2u(tr01)), 0)
	shouldEQ(t, qux.BalanceOf(a2u(tr01)), 0)

	bar.Faucet(tr01)
	baz.Faucet(tr01)
	foo.Faucet(tr01)
	qux.Faucet(tr01)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, foo.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, qux.BalanceOf(a2u(tr01)), 100000000)

	std.TestSkipHeights(5)
}

func TestRouterDrySwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	dryResult := rr.DrySwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"100000",   // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, "1999835")

	std.TestSkipHeights(1)
}

func TestRouterSwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(consts.POOL_ADDR), 100000)
	baz.Approve(a2u(consts.ROUTER_ADDR), 3000) // 0.15% of 1999835

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 100000000)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 100000000)

	swapResult := rr.SwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"100000",   // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"100", // quoteArr
		"1",   // tokenAmountLimit
	)
	shouldEQ(t, swapResult, "1996836")

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99900000)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 101996836)

	std.TestSkipHeights(2)
}

func TestRouterSwapRouteBarBazExactOut(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(consts.POOL_ADDR), 100000)
	baz.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99900000)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 101996836)

	swapResult := rr.SwapRoute(
		barPath,     // inputToken
		bazPath,     // outputToken
		"100000",    // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"100",    // quoteArr
		"100000", // tokenAmountLimit
	)
	shouldEQ(t, swapResult, "5000")

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99895000)
	shouldEQ(t, baz.BalanceOf(a2u(tr01)), 102096686)

	std.TestSkipHeights(2)
}

func TestRouterSwapRouteBarBazFooWgnotExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(consts.POOL_ADDR), 100000)
	wugnot.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99895000)
	shouldEQ(t, wugnot.BalanceOf(a2u(tr01)), 0)

	swapResult := rr.SwapRoute(
		barPath,               // inputToken
		consts.WRAPPED_WUGNOT, // outputToken
		"100000",              // amountSpecified
		"EXACT_IN",            // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100*POOL*gno.land/r/demo/foo:gno.land/r/demo/wugnot:100", // strRouteArr
		"100", // quoteArr
		"1",   // tokenAmountLimit
	)
	shouldEQ(t, swapResult, "9965")

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99795000)
	shouldEQ(t, wugnot.BalanceOf(a2u(tr01)), 9965)

	std.TestSkipHeights(2)
}

func TestRouterSwapRouteWgnotFooBazBarExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// deposit wugnot first
	std.TestIssueCoins(tr01, std.Coins{{"ugnot", 100000}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 100000}}, nil)

	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 100000)

	wugnot.Deposit()

	// approve wugnot to pool
	wugnot.Approve(a2u(consts.POOL_ADDR), 100000)
	bar.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

	shouldEQ(t, wugnot.BalanceOf(a2u(tr01)), 109965)
	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99795000)

	swapResult := rr.SwapRoute(
		consts.WRAPPED_WUGNOT, // inputToken
		barPath,               // outputToken
		"100000",              // amountSpecified
		"EXACT_OUT",           // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/foo:100*POOL*gno.land/r/demo/foo:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:100", // strRouteArr
		"100",    // quoteArr
		"300000", // tokenAmountLimit
	)
	shouldEQ(t, swapResult, "9958")

	shouldEQ(t, bar.BalanceOf(a2u(tr01)), 99894789)
	shouldEQ(t, wugnot.BalanceOf(a2u(tr01)), 100007)

	std.TestSkipHeights(3)
}

func TestPositionCollectFeeLpTokenId_1(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // to collect protocol fee

	tokenId, amount0, amount1, poolPath := pn.CollectFee(1)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "19")
	shouldEQ(t, amount1, "198")
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/baz:100")

	std.TestSkipHeights(1)
}

// tokenId 2, 3 is out of range

func TestPositionCollectFeeLpTokenId_4(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // to collect protocol fee

	tokenId, amount0, amount1, poolPath := pn.CollectFee(4)
	shouldEQ(t, tokenId, uint64(4))
	shouldEQ(t, amount0, "198")
	shouldEQ(t, amount1, "20")
	shouldEQ(t, poolPath, "gno.land/r/demo/baz:gno.land/r/demo/foo:100")

	std.TestSkipHeights(1)
}

func TestPositionCollectFeeLpTokenId_5(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	tokenId, amount0, amount1, poolPath := pn.CollectFee(5)
	shouldEQ(t, tokenId, uint64(5))
	shouldEQ(t, amount0, "19")
	shouldEQ(t, amount1, "0")
	shouldEQ(t, poolPath, "gno.land/r/demo/foo:gno.land/r/demo/wugnot:100")

	std.TestSkipHeights(1)
}

func TestPositionDecreaseLiquidityStakedPosition(t *testing.T) {
	std.TestSetOrigCaller(lp01)
	shouldPanic(t, func() {
		pn.DecreaseLiquidity(
			1,                  // tokenId
			consts.MAX_UINT256, // liquidity
			"0",                // amount0Min
			"0",                // amount1Min
			max_timeout,
		)
	})
	// can not decrase liquidity at staked position (unstake first)

	std.TestSkipHeights(1)
}

func TestStakerUnstake(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// it will return unstaked position's poolPath, amount0, amount1 ( not reward )
	poolPath, amount0, amount1 := sr.UnstakeToken(1)
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/baz:100")
	shouldEQ(t, amount0, "604982")
	shouldEQ(t, amount1, "7899135")

	std.TestSkipHeights(1)
}

func TestPositionDecreaseLiquidityUnstakedPosition(t *testing.T) {
	tokenId, liquidity, amount0, amount1, poolPath := pn.DecreaseLiquidity(
		1,
		consts.MAX_UINT256,
		"0",
		"0",
		max_timeout,
	)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, liquidity, "4473213900")
	shouldEQ(t, amount0, "604982")
	shouldEQ(t, amount1, "7899135")
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/baz:100")

	std.TestSkipHeights(1)
}

func TestStakerEndExternalIncentive(t *testing.T) {
	std.TestSetOrigCaller(test1)
	std.TestSkipHeights(1382371)

	shouldEQ(t, obl.BalanceOf(a2u(test1)), 499999900000000)

	shouldPanic(t,
		func() {
			sr.EndExternalIncentive(test1, "gno.land/r/demo/bar:gno.land/r/demo/baz:100", "gno.land/r/demo/obl")
		})
	std.TestSkipHeights(1234567)

	sr.EndExternalIncentive(test1, "gno.land/r/demo/bar:gno.land/r/demo/baz:100", "gno.land/r/demo/obl")

	shouldEQ(t, obl.BalanceOf(a2u(test1)), 499999999999979)
}
