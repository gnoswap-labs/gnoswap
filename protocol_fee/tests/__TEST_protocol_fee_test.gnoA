package protocol_fee

import (
	"std"
	"testing"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/qux"

	pusers "gno.land/p/demo/users"

	"gno.land/r/gnoswap/v2/consts"

	"gno.land/p/demo/testutils"
)

func TestDistributeProtocolFee(t *testing.T) {
	// admin > protocol_fee
	// send qux, bar for testing
	std.TestSetRealm(adminRealm)
	bar.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 1000)
	qux.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 1000)

	shouldEQ(t, bar.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(1000))
	shouldEQ(t, bar.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, bar.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))

	shouldEQ(t, qux.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(1000))
	shouldEQ(t, qux.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, qux.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(0))

	DistributeProtocolFee()

	shouldEQ(t, bar.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(0))
	shouldEQ(t, bar.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, bar.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(1000))

	shouldEQ(t, qux.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), uint64(0))
	shouldEQ(t, qux.BalanceOf(a2u(consts.DEV_OPS)), uint64(0))
	shouldEQ(t, qux.BalanceOf(a2u(consts.GOV_STAKER_ADDR)), uint64(1000))
}

func TestSetDevOpsPctByAdminNoPermission(t *testing.T) {
	dummy := testutils.TestAddress("dummy")
	dummyRealm := std.NewUserRealm(dummy)
	std.TestSetRealm(dummyRealm)

	shouldPanic(
		t,
		func() {
			SetDevOpsPctByAdmin(123)
		},
	)
}

func TestSetDevOpsPctByAdminInvalidFee(t *testing.T) {
	std.TestSetRealm(adminRealm)

	shouldPanic(
		t,
		func() {
			SetDevOpsPctByAdmin(100001)
		},
	)
}

func TestSetDevOpsPctByAdmin(t *testing.T) {
	std.TestSetRealm(adminRealm)

	shouldEQ(t, GetDevOpsPct(), uint64(0))

	SetDevOpsPctByAdmin(123)

	shouldEQ(t, GetDevOpsPct(), uint64(123))
}

func a2u(addr std.Address) pusers.AddressOrName {
	return pusers.AddressOrName(addr)
}
