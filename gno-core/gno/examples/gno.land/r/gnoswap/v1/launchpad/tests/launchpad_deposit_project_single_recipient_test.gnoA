package launchpad

import (
	"std"
	"strconv"
	"testing"
	"time"

	"gno.land/p/demo/json"
	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"
	"gno.land/p/demo/ufmt"
	"gno.land/p/gnoswap/consts"

	"gno.land/r/gnoswap/v1/access"
	"gno.land/r/gnoswap/v1/gns"
	gs "gno.land/r/gnoswap/v1/gov/staker"
	pf "gno.land/r/gnoswap/v1/protocol_fee"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"
	"gno.land/r/onbloc/qux"
)

func TestCreateProjectSingleRecipient(t *testing.T) {
	createOblLaunchpadProjectTest(t)
	mockProtocolFeeTest(t)
	depositGnsToOblProjectTier30Test(t)
	mockProtocolFeeTest2(t)
	collectProtocolFeeForOblProjectRecipient(t)
	depositAgainGnsToOblProjectTier30Test(t)
	mockProtocolFeeTest3(t)
	collectProtocolFeeForOblProjectRecipient2(t)
}

func createOblLaunchpadProjectTest(t *testing.T) {
	t.Run("create project", func(t *testing.T) {
		t.Run("launchpad create project - OBL Project", func(t *testing.T) {
			projectName := "OBL Launchpad Project"
			rewardTokenPath := "gno.land/r/onbloc/obl"
			rewardAmount := uint64(1_000_000_000)
			conditionsToken := "gno.land/r/gnoswap/v1/gov/xgns"
			conditionsAmount := "1000000"
			tier30Ratio := uint64(10)
			tier90Ratio := uint64(20)
			tier180Ratio := uint64(70)
			startTime := uint64(time.Now().Unix() + 10)

			testing.SetRealm(aliceRealm)
			access.SetRole(access.ROLE_ADMIN, adminAddr)

			testing.SetRealm(adminRealm)
			obl.Approve(launchpadAddr, rewardAmount)
			projectId := CreateProject(
				projectName,
				rewardTokenPath,
				projectAddr,
				rewardAmount,
				conditionsToken,
				conditionsAmount,
				tier30Ratio,  // 100000000
				tier90Ratio,  // 200000000
				tier180Ratio, // 700000000
				startTime,    // 5 block later
			)
			uassert.Equal(t, "gno.land/r/onbloc/obl:123", projectId)

			// validate project info
			projectStats := unmarshal(ApiGetProjectStatisticsByProjectId(projectId))
			uassert.Equal(t, "OBL Launchpad Project", projectStats.MustKey("name").MustString())
			uassert.Equal(t, "gno.land/r/onbloc/obl", projectStats.MustKey("tokenPath").MustString())
			uassert.Equal(t, "1000000000", projectStats.MustKey("depositAmount").MustString())
			uassert.Equal(t, "10", projectStats.MustKey("tier30Ratio").MustString())
			uassert.Equal(t, "20", projectStats.MustKey("tier90Ratio").MustString())
			uassert.Equal(t, "70", projectStats.MustKey("tier180Ratio").MustString())

			// validate tier info
			tier30Stats := unmarshal(ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:30", projectId)))
			uassert.Equal(t, "100000000", tier30Stats.MustKey("tierAmount").MustString())
			uassert.Equal(t, "129600", tier30Stats.MustKey("collectWaitDuration").MustString())

			tier90Stats := unmarshal(ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:90", projectId)))
			uassert.Equal(t, "200000000", tier90Stats.MustKey("tierAmount").MustString())
			uassert.Equal(t, "302400", tier90Stats.MustKey("collectWaitDuration").MustString())

			tier180Stats := unmarshal(ApiGetProjectStatisticsByProjectTierId(ufmt.Sprintf("%s:180", projectId)))
			uassert.Equal(t, "700000000", tier180Stats.MustKey("tierAmount").MustString())
			uassert.Equal(t, "604800", tier180Stats.MustKey("collectWaitDuration").MustString())
		})
	})
}

func mockProtocolFeeTest(t *testing.T) {
	t.Run("mock protocol fee", func(t *testing.T) {
		// admin > protocol_fee
		// send qux, bar for testing
		testing.SetRealm(adminRealm)
		bar.Transfer(protocolFeeAddr, 1000)
		qux.Transfer(protocolFeeAddr, 2500)

		testing.SetRealm(stakerRealm)
		pf.AddToProtocolFee(barPath, 1000)
		pf.AddToProtocolFee(quxPath, 2500)
		testing.SkipHeights(1)

		uassert.Equal(t, uint64(1000), bar.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(2500), qux.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(1000), pf.GetAmountOfToken(barPath))
		uassert.Equal(t, uint64(2500), pf.GetAmountOfToken(quxPath))

		data := unmarshal(pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, "124", data.MustKey("height").MustString())
		uassert.Equal(t, "1234567895", data.MustKey("now").MustString())
		uassert.Equal(t, "1000", data.MustKey("gno.land/r/onbloc/bar").MustString())
		uassert.Equal(t, "2500", data.MustKey("gno.land/r/onbloc/qux").MustString())

		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(barPath))
		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(quxPath))
		testing.SkipHeights(1)
	})
}

func depositGnsToOblProjectTier30Test(t *testing.T) {
	adminAddr := consts.ADMIN
	adminRealm := std.NewUserRealm(adminAddr)

	t.Run("launchpad deposit to tier 30 success test", func(t *testing.T) {
		depositAmount := uint64(1_000_000)
		delegateAmount := depositAmount
		projectId := "gno.land/r/onbloc/obl:123"
		projectTier30Id := "gno.land/r/onbloc/obl:123:30"

		data := unmarshal(pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, "1000", data.MustKey("gno.land/r/onbloc/bar").MustString())
		uassert.Equal(t, "2500", data.MustKey("gno.land/r/onbloc/qux").MustString())

		testing.SetRealm(adminRealm)
		gns.Transfer(bobAddr, depositAmount*2) // to deposit

		// delegate gns to gov staker
		testing.SetRealm(bobRealm)
		gns.Approve(govStakerAddr, delegateAmount)
		gs.Delegate(bobAddr, delegateAmount, "") // bob has xgns 1_000_000

		project, _ := getProject(projectId)
		uassert.Equal(t, "false", strconv.FormatBool(isProjectActive(project, uint64(std.ChainHeight()))))

		testing.SkipHeights(4) // project is active
		gns.Approve(launchpadAddr, depositAmount)
		depositId := DepositGns(
			projectTier30Id,
			depositAmount,
			"",
		)
		uassert.Equal(t, "gno.land/r/onbloc/obl:123:30:g1vfhkyh6lta047h6lta047h6lta047h6l03vdhu:129", depositId)

		// validate deposit
		depositStats := unmarshal(ApiGetDepositByDepositId(depositId))
		uassert.Equal(t, "1000000", depositStats.MustKey("amount").MustString())
		uassert.Equal(t, "30", depositStats.MustKey("tier").MustString())
		uassert.Equal(t, "g1vfhkyh6lta047h6lta047h6lta047h6l03vdhu", depositStats.MustKey("depositor").MustString())

		// validate protocol fee
		protocolFeeStats := unmarshal(pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, "129", protocolFeeStats.MustKey("height").MustString())

		testing.SkipHeights(1)
	})
}

func mockProtocolFeeTest2(t *testing.T) {
	t.Run("mock protocol fee2", func(t *testing.T) {
		// admin > protocol_fee
		// send qux, bar for testing
		testing.SetRealm(adminRealm)
		bar.Transfer(protocolFeeAddr, 1000)
		qux.Transfer(protocolFeeAddr, 2500)

		testing.SetRealm(stakerRealm)
		pf.AddToProtocolFee(barPath, 1000)
		pf.AddToProtocolFee(quxPath, 2500)
		testing.SkipHeights(1)

		uassert.Equal(t, uint64(1000), bar.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(2500), qux.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(1000), pf.GetAmountOfToken(barPath))
		uassert.Equal(t, uint64(2500), pf.GetAmountOfToken(quxPath))

		data := unmarshal(pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, "131", data.MustKey("height").MustString())
		uassert.Equal(t, "1234567930", data.MustKey("now").MustString())
		uassert.Equal(t, "1000", data.MustKey("gno.land/r/onbloc/bar").MustString())
		uassert.Equal(t, "2500", data.MustKey("gno.land/r/onbloc/qux").MustString())
		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(barPath))
		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(quxPath))

		testing.SkipHeights(1)
	})
}

func collectProtocolFeeForOblProjectRecipient(t *testing.T) {
	t.Run("collect protocol fee", func(t *testing.T) {
		data := unmarshal(pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, "132", data.MustKey("height").MustString())
		uassert.Equal(t, "1234567935", data.MustKey("now").MustString())
		uassert.Equal(t, "1000", data.MustKey("gno.land/r/onbloc/bar").MustString())
		uassert.Equal(t, "2500", data.MustKey("gno.land/r/onbloc/qux").MustString())

		testing.SetRealm(projectRealm)

		// protocol fee has bar, qux
		uassert.Equal(t, uint64(1000), bar.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(2500), qux.BalanceOf(protocolFeeAddr))

		testing.SetRealm(projectRealm)
		CollectProtocolFee()

		// 1000 + 1000 - 499 = 1501
		// 2500 + 2500 - 1249 = 3751
		uassert.Equal(t, uint64(1501), bar.BalanceOf(govStakerAddr))
		uassert.Equal(t, uint64(3751), qux.BalanceOf(govStakerAddr))

		// 1000 / 2 * 1 = 500
		// 2500 / 2 * 1 = 1250
		uassert.Equal(t, uint64(499), bar.BalanceOf(projectAddr))
		uassert.Equal(t, uint64(1249), qux.BalanceOf(projectAddr))
	})
}

func depositAgainGnsToOblProjectTier30Test(t *testing.T) {
	adminAddr := consts.ADMIN
	adminRealm := std.NewUserRealm(adminAddr)

	t.Run("launchpad deposit to tier 30 success test2", func(t *testing.T) {
		depositAmount := uint64(1_000_000)
		delegateAmount := depositAmount
		projectId := "gno.land/r/onbloc/obl:123"
		projectTier30Id := "gno.land/r/onbloc/obl:123:30"

		data := unmarshal(pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, "132", data.MustKey("height").MustString())
		uassert.Equal(t, "1234567935", data.MustKey("now").MustString())

		testing.SetRealm(adminRealm)
		gns.Transfer(aliceAddr, depositAmount*2) // to deposit

		// delegate gns to gov staker
		testing.SetRealm(aliceRealm)
		gns.Approve(govStakerAddr, delegateAmount)
		gs.Delegate(aliceAddr, delegateAmount, "") // bob has xgns 1_000_000

		project, _ := getProject(projectId)
		uassert.Equal(t, "true", strconv.FormatBool(isProjectActive(project, uint64(std.ChainHeight()))))

		gns.Approve(launchpadAddr, depositAmount)
		depositId := DepositGns(
			projectTier30Id,
			depositAmount,
			"",
		)
		uassert.Equal(t, "gno.land/r/onbloc/obl:123:30:g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh:132", depositId)

		// validate deposits
		depositStats := unmarshal(ApiGetDepositByDepositId(depositId))
		uassert.Equal(t, "1000000", depositStats.MustKey("amount").MustString())
		uassert.Equal(t, "30", depositStats.MustKey("tier").MustString())
		uassert.Equal(t, "g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh", depositStats.MustKey("depositor").MustString())

		// check protocol fee
		protocolFeeStats := json.Must(json.Unmarshal([]byte(pf.ApiGetTokenListWithAmountOverZero())))
		uassert.Equal(t, "132", protocolFeeStats.MustKey("height").MustString())

		testing.SkipHeights(1)
	})
}

func mockProtocolFeeTest3(t *testing.T) {
	t.Run("mock protocol fee3", func(t *testing.T) {
		// admin > protocol_fee
		// send qux, bar for testing
		testing.SetRealm(adminRealm)
		bar.Transfer(protocolFeeAddr, 1000)
		qux.Transfer(protocolFeeAddr, 2500)

		testing.SetRealm(stakerRealm)
		pf.AddToProtocolFee(barPath, 1000)
		pf.AddToProtocolFee(quxPath, 2500)
		testing.SkipHeights(1)

		uassert.Equal(t, uint64(1000), bar.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(2500), qux.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(1000), pf.GetAmountOfToken(barPath))
		uassert.Equal(t, uint64(2500), pf.GetAmountOfToken(quxPath))

		data := unmarshal(pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, "134", data.MustKey("height").MustString())
		uassert.Equal(t, "1234567945", data.MustKey("now").MustString())
		uassert.Equal(t, "1000", data.MustKey("gno.land/r/onbloc/bar").MustString())
		uassert.Equal(t, "2500", data.MustKey("gno.land/r/onbloc/qux").MustString())

		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(barPath))
		uassert.Equal(t, uint64(0), pf.GetAccuTransferToGovStakerByTokenPath(quxPath))
		testing.SkipHeights(1)
	})
}

func collectProtocolFeeForOblProjectRecipient2(t *testing.T) {
	t.Run("collect protocol fee", func(t *testing.T) {
		data := unmarshal(pf.ApiGetTokenListWithAmountOverZero())
		uassert.Equal(t, "135", data.MustKey("height").MustString())
		uassert.Equal(t, "1234567950", data.MustKey("now").MustString())
		uassert.Equal(t, "1000", data.MustKey("gno.land/r/onbloc/bar").MustString())
		uassert.Equal(t, "2500", data.MustKey("gno.land/r/onbloc/qux").MustString())

		testing.SetRealm(projectRealm)

		// protocol fee has bar, qux
		uassert.Equal(t, uint64(1000), bar.BalanceOf(protocolFeeAddr))
		uassert.Equal(t, uint64(2500), qux.BalanceOf(protocolFeeAddr))
		testing.SkipHeights(1)

		testing.SetRealm(projectRealm)
		CollectProtocolFee()

		// 1501 + 1000 = 2501
		// 3751 + 2500 = 6251
		uassert.Equal(t, uint64(2501), bar.BalanceOf(govStakerAddr))
		uassert.Equal(t, uint64(6251), qux.BalanceOf(govStakerAddr))

		uassert.Equal(t, uint64(499), bar.BalanceOf(projectAddr))
		uassert.Equal(t, uint64(1249), qux.BalanceOf(projectAddr))

		testing.SkipHeights(1)
	})
}
