package emission

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/gns"

	"gno.land/r/gnoswap/consts"
)

func TestMintAndDistributeGns_Initial(t *testing.T) {
	// check initial state
	shouldEQ(t, lastExecutedHeight, 0)
	shouldEQ(t, gns.TotalSupply(), 100000000000000)

	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), 0)
	shouldEQ(t, gnsBalance(consts.DEV_OPS), 0)
	shouldEQ(t, gnsBalance(consts.COMMUNITY_POOL_ADDR), 0)
	shouldEQ(t, gnsBalance(consts.X_GNS_ADDR), 0)
	shouldEQ(t, gnsBalance(emissionAddr), 0)

	MintAndDistributeGns()                           // 1 ~ 123 height
	shouldEQ(t, lastExecutedHeight, std.GetHeight()) // after MintAndDistributeGns, flag(height) should be updated

	shouldEQ(t, gns.TotalSupply(), 100000000000000+1755136938)

	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), 1316352703)       // 75% of 1755136938
	shouldEQ(t, gnsBalance(consts.DEV_OPS), 351027387)            // 20% of 1755136938
	shouldEQ(t, gnsBalance(consts.COMMUNITY_POOL_ADDR), 87756846) // 5% of 1755136938
	shouldEQ(t, gnsBalance(consts.X_GNS_ADDR), 0)                 // 0% of 1755136938
	shouldEQ(t, gnsBalance(emissionAddr), 2)                      // 1755136938 - (1316352703 + 351027387 + 87756846) = 2
}

func TestMintAndDistributeGns_SameBlock(t *testing.T) {
	// we're still in the same block, so MintAndDistributeGns should not mint again
	shouldEQ(t, lastExecutedHeight, std.GetHeight())
	MintAndDistributeGns()

	shouldEQ(t, gns.TotalSupply(), 100000000000000+1755136938)
	shouldEQ(t, gnsBalance(consts.STAKER_ADDR), 1316352703)
	shouldEQ(t, gnsBalance(consts.DEV_OPS), 351027387)
	shouldEQ(t, gnsBalance(consts.COMMUNITY_POOL_ADDR), 87756846)
	shouldEQ(t, gnsBalance(consts.X_GNS_ADDR), 0)
	shouldEQ(t, gnsBalance(emissionAddr), 2)
}

func TestMintAndDistributeGns_After5Block(t *testing.T) {
	std.TestSkipHeights(5)
	height := std.GetHeight()

	// we're in a new block, so MintAndDistributeGns should mint again
	shouldEQ(t, lastExecutedHeight, height-5)
	MintAndDistributeGns()
	shouldEQ(t, lastExecutedHeight, height)
}
