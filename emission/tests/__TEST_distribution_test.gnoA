package emission

import (
	"std"
	"testing"

	"gno.land/r/gnoswap/v2/gns"
)

func Test_mintGns(t *testing.T) {
	shouldEQ(t, gns.TotalSupply(), uint64(100000000000000)) // GSA has
	shouldEQ(t, gnsBalance(emissionAddr), uint64(0))

	std.TestSkipHeights(123)
	mintGns() // 1 ~ 123 height

	shouldEQ(t, gnsBalance(emissionAddr), uint64(1_755_136_938))
	shouldEQ(t, gns.TotalSupply(), uint64(100000000000000+1_755_136_938))

	shouldEQ(t, std.GetHeight(), int64(246))
}

func Test_distributeToTarget(t *testing.T) {
	shouldEQ(t, gnsBalance(emissionAddr), uint64(1_755_136_938))
	distributeToTarget(gnsBalance(emissionAddr))
	shouldEQ(t, gnsBalance(emissionAddr), uint64(2)) // left due to division
}

func Test_distributeToTarget_After5Block(t *testing.T) {
	// current 1 block will mint 14_269_406
	std.TestSkipHeights(5) // increase 14_269_406 * 5 = 71_347_030
	mintGns()
	shouldEQ(t, gnsBalance(emissionAddr), uint64(71_347_032)) // 2 + 71_347_030

	distributeToTarget(gnsBalance(emissionAddr))
	shouldEQ(t, gnsBalance(emissionAddr), uint64(1))
}

func TestChangeDistributionPct_ByAdmin(t *testing.T) {
	std.TestSetRealm(gsaRealm)

	shouldEQ(t, GetDistributionPct(int(1)), uint64(7500))
	shouldEQ(t, GetDistributionPct(int(2)), uint64(2000))
	shouldEQ(t, GetDistributionPct(int(3)), uint64(500))
	shouldEQ(t, GetDistributionPct(int(4)), uint64(0))

	ChangeDistributionPct(
		1, 10000,
		2, 0,
		3, 0,
		4, 0,
	)
	shouldEQ(t, GetDistributionPct(int(1)), uint64(10000))
	shouldEQ(t, GetDistributionPct(int(2)), uint64(0))
	shouldEQ(t, GetDistributionPct(int(3)), uint64(0))
	shouldEQ(t, GetDistributionPct(int(4)), uint64(0))
}
