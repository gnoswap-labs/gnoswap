// upgrade with filetest
package main

import (
	"chain"
	"chain/runtime"
	"testing"
	"time"

	"gno.land/p/nt/testutils"
	"gno.land/p/nt/uassert"
	"gno.land/p/nt/ufmt"

	prbac "gno.land/p/gnoswap/rbac"
	"gno.land/r/gnoswap/halt"
	"gno.land/r/gnoswap/v1/gnft"
	"gno.land/r/gnoswap/v1/launchpad"
	sr "gno.land/r/gnoswap/v1/staker"

	"gno.land/r/gnoswap/access"
	"gno.land/r/gnoswap/emission"
	"gno.land/r/gnoswap/gns"
	"gno.land/r/gnoswap/rbac"
	"gno.land/r/gnoswap/v1/common"
	gov_staker "gno.land/r/gnoswap/v1/gov/staker"
	"gno.land/r/gnoswap/v1/pool"
	"gno.land/r/gnoswap/v1/position"
	"gno.land/r/gnoswap/v1/router"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
)

var t *testing.T

const (
	INT64_MAX int64 = 9223372036854775807

	MIN_PRICE string = "4295128740"                                        // MIN_SQRT_RATIO + 1
	MAX_PRICE string = "1461446703485210103287273052203988822378723970341" // MAX_SQRT_RATIO - 1
)

var (
	adminAddr, _ = access.GetAddress(prbac.ROLE_ADMIN.String())
	adminRealm   = testing.NewUserRealm(adminAddr)

	aliceAddr  = testutils.TestAddress("alice")
	aliceRealm = testing.NewUserRealm(aliceAddr)

	// current distribution targets
	stakerAddr, _        = access.GetAddress(prbac.ROLE_STAKER.String())
	govStakerAddr, _     = access.GetAddress(prbac.ROLE_GOV_STAKER.String())
	devOpsAddr, _        = access.GetAddress(prbac.ROLE_DEVOPS.String())
	communityPoolAddr, _ = access.GetAddress(prbac.ROLE_COMMUNITY_POOL.String())
	poolAddr, _          = access.GetAddress(prbac.ROLE_POOL.String())
	routerAddr, _        = access.GetAddress(prbac.ROLE_ROUTER.String())
	launchpadAddr, _     = access.GetAddress(prbac.ROLE_LAUNCHPAD.String())

	// v2 contract paths
	commonV2PackagePath        = "gno.land/r/gnoswap/v2/common"
	communityPoolV2PackagePath = "gno.land/r/gnoswap/v2/community_pool"
	gnftV2PackagePath          = "gno.land/r/gnoswap/v2/gnft"
	govGovernanceV2PackagePath = "gno.land/r/gnoswap/v2/gov/governance"
	govStakerV2PackagePath     = "gno.land/r/gnoswap/v2/gov/staker"
	govXgnsV2PackagePath       = "gno.land/r/gnoswap/v2/gov/xgns"
	poolV2PackagePath          = "gno.land/r/gnoswap/v2/pool"
	positionV2PackagePath      = "gno.land/r/gnoswap/v2/position"
	protocolFeeV2PackagePath   = "gno.land/r/gnoswap/v2/protocol_fee"
	routerV2PackagePath        = "gno.land/r/gnoswap/v2/router"
	stakerV2PackagePath        = "gno.land/r/gnoswap/v2/staker"
	launchpadV2PackagePath     = "gno.land/r/gnoswap/v2/launchpad"

	// v2 contract addresses
	commonV2Addr        = chain.PackageAddress(commonV2PackagePath)
	communityPoolV2Addr = chain.PackageAddress(communityPoolV2PackagePath)
	gnftV2Addr          = chain.PackageAddress(gnftV2PackagePath)
	govGovernanceV2Addr = chain.PackageAddress(govGovernanceV2PackagePath)
	govStakerV2Addr     = chain.PackageAddress(govStakerV2PackagePath)
	govXgnsV2Addr       = chain.PackageAddress(govXgnsV2PackagePath)
	poolV2Addr          = chain.PackageAddress(poolV2PackagePath)
	positionV2Addr      = chain.PackageAddress(positionV2PackagePath)
	protocolFeeV2Addr   = chain.PackageAddress(protocolFeeV2PackagePath)
	routerV2Addr        = chain.PackageAddress(routerV2PackagePath)
	stakerV2Addr        = chain.PackageAddress(stakerV2PackagePath)
	launchpadV2Addr     = chain.PackageAddress(launchpadV2PackagePath)

	devOpsV2Addr = testutils.TestAddress("devops2")

	// paths
	barPath = "gno.land/r/onbloc/bar"
	fooPath = "gno.land/r/onbloc/foo"
)

func main() {
	println("[SCENARIO] 1. Initialize emission")
	initEmission()
	println()

	ufmt.Println("[SCENARIO] 2. Mint to distribution target (before upgrade)")
	mintAndDistribute()
	println()

	println("[SCENARIO] 3. Mint position")
	createPool()
	mintPositionAndStake()
	println()

	println("[SCENARIO] 4. Delegate to gov staker")
	delegation()
	println()

	println("[SCENARIO] 5. Swap for fee distribution")
	swap()
	println()

	println("[SCENARIO] 6. Create launchpad project")
	createLaunchpadProject()
	println()

	println("[SCENARIO] 6.1. Skip 720 heights to start launchpad project")
	testing.SkipHeights(60 * 60 / 5)
	println()

	println("[SCENARIO] 7. Deposit to launchpad project")
	depositToLaunchpadProject()
	println()

	println("[SCENARIO] 6. Upgrade role addresses")
	updateRoleAddresses()
	println()

	println("[SCENARIO] 6.1. Set halt level to complete")
	haltAndSetNextVersion()
	println()

	println("[SCENARIO] 6.1. Skip 100 heights to check time based reward")
	testing.SkipHeights(100)
	println("[INFO] current block height", runtime.ChainHeight())
	println()

	println("[SCENARIO] 7. Mint to distribution target (after upgrade)")
	mintAndDistribute()
	println()

	println("[SCENARIO] 8. Withdraw collect fee of previous contract")
	testing.SkipHeights(1)
	checkHaltAndResume(withdrawCollectFee)
	println()

	println("[SCENARIO] 9. Withdraw collect reward of previous contract")
	checkHaltAndResume(withdrawCollectReward)
	println()

	println("[SCENARIO] 10. Unstake token and remove position of previous contract")
	checkHaltAndResume(unStakeTokenAndRemovePosition)
	println()

	println("[SCENARIO] 11. Undelegate and collect governance reward of previous contract")
	checkHaltAndResume(unDelegateAndCollectGovernanceReward)
	println()

	println("[SCENARIO] 12. Collect launchpad reward")
	checkHaltAndResume(collectLaunchpadReward)
	println()

	println("[SCENARIO] 12.1. Skip 518,400 heights to collect launchpad deposit")
	testing.SkipHeights(60 * 60 * 24 * 30 / 5)
	println()

	println("[SCENARIO] 13. Collect launchpad deposit")
	checkHaltAndResume(collectLaunchpadDeposit)
	println()
}

func haltAndSetNextVersion() {
	testing.SetRealm(adminRealm)
	halt.SetHaltLevel(cross, halt.HaltLevelComplete)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeLaunchpad, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeGovernance, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeGovStaker, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeXGns, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypePool, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypePosition, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeProtocolFee, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeRouter, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeStaker, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeCommunityPool, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeEmission, false)
	halt.SetOperationStatusNextVersion(cross, halt.OpTypeWithdraw, false)
}

func initEmission() {
	testing.SetRealm(adminRealm)
	emission.SetDistributionStartTime(cross, time.Now().Unix()+1)
	emission.MintAndDistributeGns(cross)

	defaultTokenAmount := int64(10000000000)

	bar.Transfer(cross, aliceAddr, defaultTokenAmount)
	foo.Transfer(cross, aliceAddr, defaultTokenAmount)
	gns.Transfer(cross, aliceAddr, defaultTokenAmount)
}

func mintAndDistribute() {
	testing.SetRealm(adminRealm)

	// clear previous distribution
	emission.MintAndDistributeGns(cross)

	println("[INFO] current block height", runtime.ChainHeight())
	testing.SkipHeights(1)

	testing.SetRealm(testing.NewCodeRealm("gno.land/r/gnoswap/emission"))

	previousStakerBalance := gns.BalanceOf(stakerAddr)
	previousGovStakerBalance := gns.BalanceOf(govStakerAddr)
	previousDevOpsBalance := gns.BalanceOf(devOpsAddr)
	previousCommunityPoolBalance := gns.BalanceOf(communityPoolAddr)

	previousNewStakerBalance := gns.BalanceOf(stakerV2Addr)
	previousNewGovStakerBalance := gns.BalanceOf(govStakerV2Addr)
	previousNewDevOpsBalance := gns.BalanceOf(devOpsV2Addr)
	previousNewCommunityPoolBalance := gns.BalanceOf(communityPoolV2Addr)

	emission.MintAndDistributeGns(cross)

	stakerBalanceChange := gns.BalanceOf(stakerAddr) - previousStakerBalance
	govStakerBalanceChange := gns.BalanceOf(govStakerAddr) - previousGovStakerBalance
	devOpsBalanceChange := gns.BalanceOf(devOpsAddr) - previousDevOpsBalance
	communityPoolBalanceChange := gns.BalanceOf(communityPoolAddr) - previousCommunityPoolBalance

	newStakerBalanceChange := gns.BalanceOf(stakerV2Addr) - previousNewStakerBalance
	newGovStakerBalanceChange := gns.BalanceOf(govStakerV2Addr) - previousNewGovStakerBalance
	newDevOpsBalanceChange := gns.BalanceOf(devOpsV2Addr) - previousNewDevOpsBalance
	newCommunityPoolBalanceChange := gns.BalanceOf(communityPoolV2Addr) - previousNewCommunityPoolBalance

	totalMintedAmount := gns.MintedEmissionAmount()

	ufmt.Printf("[EXPECTED] total minted amount should be %d\n", totalMintedAmount)
	ufmt.Printf("[EXPECTED] (v1) staker balance change should be %d\n", stakerBalanceChange)
	ufmt.Printf("[EXPECTED] (v1) gov staker balance change should be %d\n", govStakerBalanceChange)
	ufmt.Printf("[EXPECTED] (v1) dev ops balance change should be %d\n", devOpsBalanceChange)
	ufmt.Printf("[EXPECTED] (v1) community pool balance change should be %d\n", communityPoolBalanceChange)

	ufmt.Printf("[EXPECTED] (v2) staker balance change should be %d\n", newStakerBalanceChange)
	ufmt.Printf("[EXPECTED] (v2) gov staker balance change should be %d\n", newGovStakerBalanceChange)
	ufmt.Printf("[EXPECTED] (v2) dev ops balance change should be %d\n", newDevOpsBalanceChange)
	ufmt.Printf("[EXPECTED] (v2) community pool balance change should be %d\n", newCommunityPoolBalanceChange)
}

func createPool() {
	testing.SetRealm(adminRealm)
	pool.SetPoolCreationFee(cross, 0)

	testing.SetRealm(aliceRealm)
	bar.Approve(cross, poolAddr, INT64_MAX)
	foo.Approve(cross, poolAddr, INT64_MAX)

	ufmt.Println("[INFO] Creating pool")
	pool.CreatePool(
		cross,
		barPath,
		fooPath,
		uint32(3000),
		common.TickMathGetSqrtRatioAtTick(0).ToString(),
	)

	poolPath := pool.GetPoolPath(barPath, fooPath, uint32(3000))
	ufmt.Printf("[INFO] Pool created: %s\n", poolPath)

	testing.SetRealm(adminRealm)

	tier1 := uint64(1)
	sr.SetPoolTier(cross, poolPath, tier1)
	ufmt.Printf("[INFO]  %s pool tier set: Tier%d\n", poolPath, tier1)
}

func mintPositionAndStake() {
	testing.SetRealm(aliceRealm)
	bar.Approve(cross, poolAddr, INT64_MAX)
	foo.Approve(cross, poolAddr, INT64_MAX)

	ufmt.Println("[INFO] Minting position")
	positionId, liquidity, amount0, amount1 := position.Mint(
		cross,
		barPath,
		fooPath,
		uint32(3000),
		-960,
		960,
		"50000000",
		"50000000",
		"0",
		"0",
		time.Now().Unix()+3600,
		aliceAddr,
		aliceAddr,
		"",
	)

	ufmt.Printf("[EXPECTED] Position ID should be %d\n", positionId)
	ufmt.Printf("[EXPECTED] Liquidity should be %s\n", liquidity)
	ufmt.Printf("[EXPECTED] Amount0 should be %s\n", amount0)
	ufmt.Printf("[EXPECTED] Amount1 should be %s\n", amount1)

	testing.SetRealm(aliceRealm)
	gnft.Approve(cross, stakerAddr, "1")
	sr.StakeToken(cross, uint64(1), "")

	ufmt.Printf("[EXPECTED] Staked position ID should be %d\n", positionId)
}

func swap() {
	testing.SetRealm(aliceRealm)
	bar.Approve(cross, routerAddr, INT64_MAX)
	foo.Approve(cross, routerAddr, INT64_MAX)

	testing.SetOriginSend(chain.Coins{})
	amountIn, amountOut := router.ExactInSwapRoute(
		cross,
		barPath,
		fooPath,
		"10000000",
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000",
		"100",
		"1",
		time.Now().Add(time.Hour).Unix(),
		"",
	)

	ufmt.Printf("[EXPECTED] AmountIn should be %s\n", amountIn)
	ufmt.Printf("[EXPECTED] AmountOut should be %s\n", amountOut)
}

func delegation() {
	testing.SetRealm(aliceRealm)

	gns.Approve(cross, govStakerAddr, 10000000)
	delegatedAmount := gov_staker.Delegate(cross, aliceAddr, 10000000, "")

	ufmt.Printf("[EXPECTED] Delegated amount should be %d\n", delegatedAmount)
}

func createLaunchpadProject() {
	testing.SetRealm(adminRealm)
	bar.Approve(cross, launchpadAddr, 10000000)

	projectID := launchpad.CreateProject(
		cross,
		"Test Project",
		"gno.land/r/onbloc/bar",
		aliceAddr,
		10000000,
		"",
		"",
		20,
		30,
		50,
		1234571495,
	)

	ufmt.Printf("[EXPECTED] Project created: %s\n", projectID)
}

func depositToLaunchpadProject() {
	testing.SetRealm(aliceRealm)

	projectPoolID := "gno.land/r/onbloc/bar:124:30"
	gns.Approve(cross, launchpadAddr, 10000000)
	depositID := launchpad.DepositGns(cross, projectPoolID, 10000000, "")

	ufmt.Printf("[EXPECTED] Deposited to project pool: %s, Deposit ID: %s\n", projectPoolID, depositID)
}

func updateRoleAddresses() {
	testing.SetOriginCaller(adminAddr)

	emission.MintAndDistributeGns(cross)

	previousCommunityPoolAddr, _ := access.GetAddress(prbac.ROLE_COMMUNITY_POOL.String())
	previousGovGovernanceAddr, _ := access.GetAddress(prbac.ROLE_GOVERNANCE.String())
	previousGovStakerAddr, _ := access.GetAddress(prbac.ROLE_GOV_STAKER.String())
	previousGovXgnsAddr, _ := access.GetAddress(prbac.ROLE_XGNS.String())
	previousPoolAddr, _ := access.GetAddress(prbac.ROLE_POOL.String())
	previousPositionAddr, _ := access.GetAddress(prbac.ROLE_POSITION.String())
	previousProtocolFeeAddr, _ := access.GetAddress(prbac.ROLE_PROTOCOL_FEE.String())
	previousRouterAddr, _ := access.GetAddress(prbac.ROLE_ROUTER.String())
	previousStakerAddr, _ := access.GetAddress(prbac.ROLE_STAKER.String())
	previousDevOpsAddr, _ := access.GetAddress(prbac.ROLE_DEVOPS.String())
	previousLaunchpadAddr, _ := access.GetAddress(prbac.ROLE_LAUNCHPAD.String())

	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_COMMUNITY_POOL.String(), communityPoolV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_GOVERNANCE.String(), govGovernanceV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_GOV_STAKER.String(), govStakerV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_XGNS.String(), govXgnsV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_POOL.String(), poolV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_POSITION.String(), positionV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_PROTOCOL_FEE.String(), protocolFeeV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_ROUTER.String(), routerV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_STAKER.String(), stakerV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_DEVOPS.String(), devOpsV2Addr)
	rbac.UpdateRoleAddressNextVersion(cross, prbac.ROLE_LAUNCHPAD.String(), launchpadV2Addr)

	updatedCommunityPoolAddr, _ := access.GetAddress(prbac.ROLE_COMMUNITY_POOL.String())
	updatedGovGovernanceAddr, _ := access.GetAddress(prbac.ROLE_GOVERNANCE.String())
	updatedGovStakerAddr, _ := access.GetAddress(prbac.ROLE_GOV_STAKER.String())
	updatedGovXgnsAddr, _ := access.GetAddress(prbac.ROLE_XGNS.String())
	updatedPoolAddr, _ := access.GetAddress(prbac.ROLE_POOL.String())
	updatedPositionAddr, _ := access.GetAddress(prbac.ROLE_POSITION.String())
	updatedProtocolFeeAddr, _ := access.GetAddress(prbac.ROLE_PROTOCOL_FEE.String())
	updatedRouterAddr, _ := access.GetAddress(prbac.ROLE_ROUTER.String())
	updatedStakerAddr, _ := access.GetAddress(prbac.ROLE_STAKER.String())
	updatedDevOpsAddr, _ := access.GetAddress(prbac.ROLE_DEVOPS.String())
	updatedLaunchpadAddr, _ := access.GetAddress(prbac.ROLE_LAUNCHPAD.String())

	testing.SetRealm(testing.NewUserRealm(stakerV2Addr))
	emission.SetOnDistributionPctChangeCallback(cross, func(emissionAmountPerSecond int64) {
		ufmt.Printf("[INFO] emission amount per second should be %d\n", emissionAmountPerSecond)
	})

	ufmt.Printf("[EXPECTED] community_pool should be changed %s to %s\n", previousCommunityPoolAddr, updatedCommunityPoolAddr)
	ufmt.Printf("[EXPECTED] gov_governance should be changed %s to %s\n", previousGovGovernanceAddr, updatedGovGovernanceAddr)
	ufmt.Printf("[EXPECTED] gov_staker should be changed %s to %s\n", previousGovStakerAddr, updatedGovStakerAddr)
	ufmt.Printf("[EXPECTED] gov_xgns should be changed %s to %s\n", previousGovXgnsAddr, updatedGovXgnsAddr)
	ufmt.Printf("[EXPECTED] pool should be changed %s to %s\n", previousPoolAddr, updatedPoolAddr)
	ufmt.Printf("[EXPECTED] position should be changed %s to %s\n", previousPositionAddr, updatedPositionAddr)
	ufmt.Printf("[EXPECTED] protocol_fee should be changed %s to %s\n", previousProtocolFeeAddr, updatedProtocolFeeAddr)
	ufmt.Printf("[EXPECTED] router should be changed %s to %s\n", previousRouterAddr, updatedRouterAddr)
	ufmt.Printf("[EXPECTED] staker should be changed %s to %s\n", previousStakerAddr, updatedStakerAddr)
	ufmt.Printf("[EXPECTED] dev ops should be changed %s to %s\n", previousDevOpsAddr, updatedDevOpsAddr)
	ufmt.Printf("[EXPECTED] launchpad should be changed %s to %s\n", previousLaunchpadAddr, updatedLaunchpadAddr)
}

func checkHaltAndResume(callback func()) {
	testing.SetRealm(adminRealm)
	halt.SetOperationStatus(cross, halt.OpTypePool, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypePosition, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeProtocolFee, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeRouter, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeStaker, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeLaunchpad, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeGovernance, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeGovStaker, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeXGns, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeCommunityPool, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeEmission, 1, true)
	halt.SetOperationStatus(cross, halt.OpTypeWithdraw, 1, true)

	uassert.AbortsContains(t, "halted", func() {
		callback()
	})

	println("[INFO] check halt panic then resume and try again")
	testing.SetRealm(adminRealm)

	halt.SetOperationStatus(cross, halt.OpTypePool, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypePosition, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeProtocolFee, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeRouter, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeStaker, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeLaunchpad, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeGovernance, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeGovStaker, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeXGns, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeCommunityPool, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeEmission, 1, false)
	halt.SetOperationStatus(cross, halt.OpTypeWithdraw, 1, false)

	callback()
}

func withdrawCollectFee() {
	testing.SetRealm(aliceRealm)

	beforeBarBalance := bar.BalanceOf(aliceAddr)
	beforeFooBalance := foo.BalanceOf(aliceAddr)

	position.CollectFee(cross, uint64(1), false)

	afterBarBalance := bar.BalanceOf(aliceAddr)
	afterFooBalance := foo.BalanceOf(aliceAddr)

	ufmt.Printf("[EXPECTED] alice bar balance changes should be %d\n", afterBarBalance-beforeBarBalance)
	ufmt.Printf("[EXPECTED] alice foo balance changes should be %d\n", afterFooBalance-beforeFooBalance)
}

func withdrawCollectReward() {
	testing.SetRealm(aliceRealm)

	beforeGnsBalance := gns.BalanceOf(aliceAddr)

	sr.CollectReward(cross, uint64(1), false)

	afterGnsBalance := gns.BalanceOf(aliceAddr)

	ufmt.Printf("[EXPECTED] alice gns balance changes should be %d\n", afterGnsBalance-beforeGnsBalance)
}

func unStakeTokenAndRemovePosition() {
	testing.SetRealm(aliceRealm)

	positionId := uint64(1)

	sr.UnStakeToken(cross, positionId, false)
	ufmt.Printf("[EXPECTED] Unstaked position ID should be %d\n", positionId)

	positionLiquidity := position.PositionGetPositionLiquidityStr(positionId)
	position.DecreaseLiquidity(cross, positionId, positionLiquidity, "0", "0", time.Now().Add(time.Hour).Unix(), false)
	isBurned := position.PositionGetPositionIsBurned(positionId)

	ufmt.Printf("[EXPECTED] Decreased liquidity position ID should be %d\n", positionId)
	ufmt.Printf("[EXPECTED] Decreased liquidity position liquidity should be %s\n", positionLiquidity)
	ufmt.Printf("[EXPECTED] Decreased liquidity position is burned should be %t\n", isBurned)
}

func unDelegateAndCollectGovernanceReward() {
	testing.SetRealm(aliceRealm)

	beforeBarBalance := bar.BalanceOf(aliceAddr)
	beforeFooBalance := foo.BalanceOf(aliceAddr)

	gov_staker.CollectReward(cross)
	afterBarBalance := bar.BalanceOf(aliceAddr)
	afterFooBalance := foo.BalanceOf(aliceAddr)

	ufmt.Printf("[EXPECTED] Governance reward alice bar balance changes should be %d\n", afterBarBalance-beforeBarBalance)
	ufmt.Printf("[EXPECTED] Governance reward alice foo balance changes should be %d\n", afterFooBalance-beforeFooBalance)

	beforeGnsBalance := gns.BalanceOf(aliceAddr)

	unDelegatedAmount := gov_staker.Undelegate(cross, aliceAddr, 10000000)
	ufmt.Printf("[EXPECTED] Undelegated amount should be %d\n", unDelegatedAmount)

	// skip 7 days
	testing.SkipHeights(60 * 60 * 24 * 7)
	gov_staker.CollectUndelegatedGns(cross)
	afterUndelegateGnsBalance := gns.BalanceOf(aliceAddr)

	ufmt.Printf("[EXPECTED] Undelegated gns balance changes should be %d\n", afterUndelegateGnsBalance-beforeGnsBalance)
}

func collectLaunchpadReward() {
	testing.SetRealm(aliceRealm)

	depositID := "1"
	rewardAmount := launchpad.CollectRewardByDepositId(cross, depositID)
	ufmt.Printf("[EXPECTED] Launchpad reward amount should be %d\n", rewardAmount)
}

func collectLaunchpadDeposit() {
	testing.SetRealm(aliceRealm)

	depositID := "1"
	withdrawalAmount, _ := launchpad.CollectDepositGns(cross, depositID)
	ufmt.Printf("[EXPECTED] Launchpad withdrawal amount should be %d\n", withdrawalAmount)
}

// Output:
// [SCENARIO] 1. Initialize emission
//
// [SCENARIO] 2. Mint to distribution target (before upgrade)
// [INFO] current block height 123
// [EXPECTED] total minted amount should be 35673515
// [EXPECTED] (v1) staker balance change should be 26755136
// [EXPECTED] (v1) gov staker balance change should be 0
// [EXPECTED] (v1) dev ops balance change should be 7134703
// [EXPECTED] (v1) community pool balance change should be 1783675
// [EXPECTED] (v2) staker balance change should be 0
// [EXPECTED] (v2) gov staker balance change should be 0
// [EXPECTED] (v2) dev ops balance change should be 0
// [EXPECTED] (v2) community pool balance change should be 0
//
// [SCENARIO] 3. Mint position
// [INFO] Creating pool
// [INFO] Pool created: gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000
// [INFO]  gno.land/r/onbloc/bar:gno.land/r/onbloc/foo:3000 pool tier set: Tier1
// [INFO] Minting position
// [EXPECTED] Position ID should be 1
// [EXPECTED] Liquidity should be 1066918731
// [EXPECTED] Amount0 should be 50000000
// [EXPECTED] Amount1 should be 50000000
// [EXPECTED] Staked position ID should be 1
//
// [SCENARIO] 4. Delegate to gov staker
// [EXPECTED] Delegated amount should be 10000000
//
// [SCENARIO] 5. Swap for fee distribution
// [EXPECTED] AmountIn should be 10000000
// [EXPECTED] AmountOut should be -9862880
//
// [SCENARIO] 6. Create launchpad project
// [EXPECTED] Project created: gno.land/r/onbloc/bar:124
//
// [SCENARIO] 6.1. Skip 720 heights to start launchpad project
//
// [SCENARIO] 7. Deposit to launchpad project
// [EXPECTED] Deposited to project pool: gno.land/r/onbloc/bar:124:30, Deposit ID: 1
//
// [SCENARIO] 6. Upgrade role addresses
// [EXPECTED] community_pool should be changed g100fnnlz5eh87p5hvwt8pf279lxaelm8k8md049 to g1r79m0scwztcdvk3c6sy4rjrtv3rnnzrs9ddh9w
// [EXPECTED] gov_governance should be changed g17s8w2ve7k85fwfnrk59lmlhthkjdted8whvqxd to g1eudq5dvx9sem5ascp0etlpk3kpxylz8kcy8cf5
// [EXPECTED] gov_staker should be changed g17e3ykyqk9jmqe2y9wxe9zhep3p7cw56davjqwa to g1gt2xzjcmhp2t08yh0nkmc3q822sr87t5n92rm0
// [EXPECTED] gov_xgns should be changed g1wwh55uwzlz2zzr2qcvvxf83qhcvmx2t8779l9r to g16gjmzf8725njf48325nl3yx3ve53wdu4ru53vm
// [EXPECTED] pool should be changed g148tjamj80yyrm309z7rk690an22thd2l3z8ank to g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8
// [EXPECTED] position should be changed g1q646ctzhvn60v492x8ucvyqnrj2w30cwh6efk5 to g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2
// [EXPECTED] protocol_fee should be changed g1f7wpek7q67tkns27sw495u5yuu3a5wwjxw5l6l to g1397dea8xlfv5858xzhsly7k998xm2zlvrm93t2
// [EXPECTED] router should be changed g1lm2l7tf49h3mykesct7rhfml30yx8dw5xrval7 to g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5
// [EXPECTED] staker should be changed g1cceshmzzlmrh7rr3z30j2t5mrvsq9yccysw9nu to g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l
// [EXPECTED] dev ops should be changed g1mjvd83nnjee3z2g7683er55me9f09688pd4mj9 to g1v3jhvmmswve97h6lta047h6lta047h6luwedp9
// [EXPECTED] launchpad should be changed g122mau2lp2rc0scs8d27pkkuys4w54mdy2tuer3 to g1qslhn7vn69e09zwmz5hlz0273v3c33u5z8d9j7
//
// [SCENARIO] 6.1. Set halt level to complete
//
// [SCENARIO] 6.1. Skip 100 heights to check time based reward
// [INFO] current block height 944
//
// [SCENARIO] 7. Mint to distribution target (after upgrade)
// [INFO] current block height 944
// [EXPECTED] total minted amount should be 29323629330
// [EXPECTED] (v1) staker balance change should be 0
// [EXPECTED] (v1) gov staker balance change should be 0
// [EXPECTED] (v1) dev ops balance change should be 0
// [EXPECTED] (v1) community pool balance change should be 0
// [EXPECTED] (v2) staker balance change should be 26755137
// [EXPECTED] (v2) gov staker balance change should be 0
// [EXPECTED] (v2) dev ops balance change should be 7134703
// [EXPECTED] (v2) community pool balance change should be 1783675
//
// [SCENARIO] 8. Withdraw collect fee of previous contract
// [INFO] check halt panic then resume and try again
// [EXPECTED] alice bar balance changes should be 29700
// [EXPECTED] alice foo balance changes should be 0
//
// [SCENARIO] 9. Withdraw collect reward of previous contract
// [INFO] check halt panic then resume and try again
// [EXPECTED] alice gns balance changes should be 2860658499
//
// [SCENARIO] 10. Unstake token and remove position of previous contract
// [INFO] check halt panic then resume and try again
// [EXPECTED] Unstaked position ID should be 1
// [EXPECTED] Decreased liquidity position ID should be 1
// [EXPECTED] Decreased liquidity position liquidity should be 1066918731
// [EXPECTED] Decreased liquidity position is burned should be true
//
// [SCENARIO] 11. Undelegate and collect governance reward of previous contract
// [INFO] check halt panic then resume and try again
// [EXPECTED] Governance reward alice bar balance changes should be 149
// [EXPECTED] Governance reward alice foo balance changes should be 14815
// [EXPECTED] Undelegated amount should be 10000000
// [EXPECTED] Undelegated gns balance changes should be 10000000
//
// [SCENARIO] 12. Collect launchpad reward
// [INFO] check halt panic then resume and try again
// [EXPECTED] Launchpad reward amount should be 1999999
//
// [SCENARIO] 12.1. Skip 518,400 heights to collect launchpad deposit
//
// [SCENARIO] 13. Collect launchpad deposit
// [INFO] check halt panic then resume and try again
// [EXPECTED] Launchpad withdrawal amount should be 10000000
