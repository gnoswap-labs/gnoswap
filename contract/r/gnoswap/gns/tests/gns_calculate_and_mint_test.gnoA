package gns

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"
	"gno.land/r/gnoswap/v1/halt"
)

var (
	emissionRealm = std.NewCodeRealm(consts.EMISSION_PATH)
	adminRealm    = std.NewUserRealm(adminAddr)
)

func TestCalculateAmountToMint(t *testing.T) {
	t.Run("1 block for same year 01", func(t *testing.T) {
		amount := calculateAmountToMint(GetLastMintedHeight()+1, GetLastMintedHeight()+1)
		uassert.Equal(t, GetAmountPerBlockPerHalvingYear(1), amount)
	})

	t.Run("2 block for same year 01", func(t *testing.T) {
		amount := calculateAmountToMint(GetLastMintedHeight()+2, GetLastMintedHeight()+3)
		uassert.Equal(t, GetAmountPerBlockPerHalvingYear(1)*2, amount)
	})

	t.Run("entire block for year 01 + 1 block for year 02", func(t *testing.T) {
		minted := calculateAmountToMint(GetLastMintedHeight()+4, GetHalvingYearStartBlock(2))
		if minted != 224999971461188 {
			println("minted", minted)
		}

		// minted all amount for year 01
		uassert.Equal(t, GetHalvingYearMaxAmount(1), GetHalvingYearMintAmount(1))

		// minted 1 block for year 02
		uassert.Equal(t, GetAmountPerBlockPerHalvingYear(1), GetHalvingYearMintAmount(2))
	})

	t.Run("entire block for 12 years", func(t *testing.T) {
		calculateAmountToMint(GetHalvingYearStartBlock(1), GetHalvingYearEndBlock(12))

		for year := int64(1); year <= 12; year++ {
			uassert.Equal(t, GetHalvingYearMaxAmount(year), GetHalvingYearMintAmount(year))
		}
	})

	t.Run("no emission amount for after 12 years", func(t *testing.T) {
		amount := calculateAmountToMint(GetHalvingYearStartBlock(12), GetHalvingYearEndBlock(12)+1)
		uassert.Equal(t, int64(0), amount)
	})

	t.Run("handles invalid block range - fromHeight > toHeight", func(t *testing.T) {
		// Test when fromHeight is greater than toHeight
		amount := calculateAmountToMint(GetLastMintedHeight()+10, GetLastMintedHeight()+5)
		uassert.Equal(t, int64(0), amount)
	})

	t.Run("handles negative block heights correctly", func(t *testing.T) {
		// Negative heights should be before emission start, so should return 0
		negativeStart := GetHalvingYearStartBlock(1) - 100
		amount := calculateAmountToMint(negativeStart, GetHalvingYearStartBlock(1)-1)
		uassert.Equal(t, int64(0), amount)
	})
}

func TestMintGns(t *testing.T) {
	t.Run("panic for swap is halted", func(t *testing.T) {
		testing.SetRealm(std.NewUserRealm(adminAddr))
		testing.SkipHeights(123)         // pass some block to bypass last block check
		cross(halt.SetHaltByAdmin)(true) // set halt
		uassert.AbortsWithMessage(t, "halted", func() {
			cross(MintGns)(adminAddr)
		})

		cross(halt.SetHaltByAdmin)(false) // unset halt
	})

	t.Run("panic if caller is not emission contract", func(t *testing.T) {
		testing.SetRealm(std.NewUserRealm(testutils.TestAddress("user")))
		uassert.AbortsWithMessage(t, "caller(g1w4ek2ujlta047h6lta047h6lta047h6lkvk347) has no permission", func() {
			cross(MintGns)(adminAddr)
		})
	})

	t.Run("do not mint for same block", func(t *testing.T) {
		testing.SetRealm(std.NewCodeRealm(consts.EMISSION_PATH))
		testing.SkipHeights(-123) // revert height to get caught by last block check
		mintedAmount := cross(MintGns)(adminAddr)
		uassert.Equal(t, int64(0), mintedAmount)
	})
}
