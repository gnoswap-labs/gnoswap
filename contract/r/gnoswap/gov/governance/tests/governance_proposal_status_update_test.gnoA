package governance

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/r/gnoswap/v1/gns"
	gs "gno.land/r/gnoswap/v1/gov/staker"
)

var (
	oldHeight uint64
	oldTime   uint64

	nowHeight uint64
	nowTime   uint64
)

type proposalStateTest struct {
	name     string
	field    interface{}
	expected interface{}
}

func assertProposalState(t *testing.T, stat ProposalStateInfo, tests []proposalStateTest) {
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			switch tt.name {
			case "Created":
				uassert.Equal(t, tt.expected, stat.State.HasState(StateCreated), "Created")
			case "Upcoming":
				uassert.Equal(t, tt.expected, stat.State.HasState(StateUpcoming), "Upcoming")
			case "Active":
				uassert.Equal(t, tt.expected, stat.State.HasState(StateActive), "Active")
			case "Passed":
				uassert.Equal(t, tt.expected, stat.State.HasState(StatePassed), "Passed")
			case "Rejected":
				uassert.Equal(t, tt.expected, stat.State.HasState(StateRejected), "Rejected")
			case "Canceled":
				uassert.Equal(t, tt.expected, stat.State.HasState(StateCanceled), "Canceled")
			case "Executed":
				uassert.Equal(t, tt.expected, stat.State.HasState(StateExecuted), "Executed")
			case "Expired":
				uassert.Equal(t, tt.expected, stat.State.HasState(StateExpired), "Expired")
			case "CreatedAt":
				uassert.Equal(t, tt.expected, stat.Timestamp, "CreatedAt")
			}
		})
	}
}

func TestProposeText_ProposalStatusUpdate(t *testing.T) {
	t.Run("initial state", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		gns.Approve(govStakerAddr, uint64(1_000_000))
		gs.Delegate(admin, uint64(1_000_000), "")
		testing.SkipHeights(11) // VotingWeightSmoothingDuration is 10 block

		// overwrite config for testcase
		config = Config{
			VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
			VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
			VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
			Quorum:                        uint64(50),   // 50% of total xGNS supply
			ProposalCreationThreshold:     uint64(100),  //
			ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
			ExecutionWindow:               uint64(1000), // 500 block
		}
		setConfigVersion(1, config)
	})

	oldHeight = uint64(std.ChainHeight())
	oldTime = uint64(time.Now().Unix())

	nowHeight = oldHeight
	nowTime = oldTime

	t.Run("create text proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		proposalId := ProposeText("test_title_1", "test_description_1")
		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", true, true},
			{"Active", false, false},
			{"Passed", false, false},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("vote YES", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(5)

		nowHeight = uint64(std.ChainHeight())
		nowTime = uint64(time.Now().Unix())

		voteKey := Vote(proposalId, true)

		voted := GetVoteByVoteKey(voteKey)
		uassert.True(t, voted)

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", true, true},
			{"Passed", false, false},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("skip time to check proposal pass/reject", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(31)

		nowHeight = uint64(std.ChainHeight())
		nowTime = uint64(time.Now().Unix())

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", true, true},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("skip long to check proposal status", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(500)

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", true, true},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("create new text proposal and cancel", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		proposalId := ProposeText("test_title_2", "test_description_2")
		Cancel(proposalId)

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		nowHeight = uint64(std.ChainHeight())
		nowTime = uint64(time.Now().Unix())

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", nowTime, nowTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", false, false},
			{"Rejected", false, false},
			{"Canceled", true, true},
			{"Executed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})
}

func TestParamaterChange(t *testing.T) {
	t.Run("initial state", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		gns.Approve(govStakerAddr, uint64(1_000_000))
		gs.Delegate(admin, uint64(1_000_000), "")
		testing.SkipHeights(5)

		// overwrite config for testcase
		config = Config{
			VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
			VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
			VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
			Quorum:                        uint64(50),   // 50% of total xGNS supply
			ProposalCreationThreshold:     uint64(100),  //
			ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
			ExecutionWindow:               uint64(1000), // 500 block
		}
		setConfigVersion(1, config)
	})

	oldHeight = uint64(std.ChainHeight())
	oldTime = uint64(time.Now().Unix())

	nowHeight = oldHeight
	nowTime = oldTime

	t.Run("create param change", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		proposalId := ProposeParameterChange("test_title_3", "test_description_3", uint64(1), "gno.land/r/gnoswap/v1/gns*EXE*SetAvgBlockTimeInMs*EXE*100")
		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", true, true},
			{"Active", false, false},
			{"Passed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("vote YES", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(5)

		nowHeight = uint64(std.ChainHeight())
		nowTime = uint64(time.Now().Unix())

		voteKey := Vote(proposalId, true)
		voted := GetVoteByVoteKey(voteKey)
		uassert.True(t, voted)

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", true, true},
			{"Passed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("skip time to check proposal pass/reject => pass", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(31)

		nowHeight = uint64(std.ChainHeight())
		nowTime = uint64(time.Now().Unix())

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", true, true},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("execute", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		Execute(proposalId)
		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		nowHeight = uint64(std.ChainHeight())
		nowTime = uint64(time.Now().Unix())

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", true, true},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", true, true},
			{"ExecutedAt", nowTime, nowTime},
			{"Expired", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("skip long time after execute", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(1000)
		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", true, true},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", true, true},
			{"ExecutedAt", nowTime, nowTime},
			{"Expired", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("create new param change proposal and cancel", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(100)
		proposalId := ProposeParameterChange("test_title_3", "test_description_3", uint64(1), "gno.land/r/gnoswap/v1/gns*EXE*SetAvgBlockTimeInMs*EXE*300")
		Cancel(proposalId)

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		nowHeight = uint64(std.ChainHeight())
		nowTime = uint64(time.Now().Unix())

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", nowTime, nowTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", false, false},
			{"Rejected", false, false},
			{"Canceled", true, true},
			{"Executed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("skip long time after cancel", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		oldTime = nowTime
		oldHeight = nowHeight

		testing.SkipHeights(1000)
		nowTime = uint64(time.Now().Unix())
		nowHeight = uint64(std.ChainHeight())

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", false, false},
			{"PassedAt", uint64(0), uint64(0)},
			{"Rejected", false, false},
			{"Canceled", true, true},
			{"CanceledAt", oldTime, oldTime},
			{"Executed", false, false},
			{"Expired", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("create new param change proposal and pass", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(100)
		proposalId := ProposeParameterChange("test_title_4", "test_description_4", uint64(1), "gno.land/r/gnoswap/v1/gns*EXE*SetAvgBlockTimeInMs*EXE*300")
		oldHeight = uint64(std.ChainHeight())
		oldTime = uint64(time.Now().Unix())

		testing.SkipHeights(5) // voting start
		Vote(proposalId, true)
		testing.SkipHeights(31) // finish voting

		nowHeight = uint64(std.ChainHeight())
		nowTime = uint64(time.Now().Unix())

		updateProposalsState()
		proposalStat := mustGetProposal(proposalId).State

		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldTime, oldTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", true, true},
			{"PassedAt", nowTime, nowTime},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", false, false},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("skip long time after passed => make expired", func(t *testing.T) {
		testing.SetRealm(adminRealm)

		oldOldTime := oldTime
		oldTime = nowTime
		oldHeight = nowHeight

		testing.SkipHeights(600)
		updateProposalsState()
		nowTime = uint64(time.Now().Unix())
		nowHeight = uint64(std.ChainHeight())

		proposalStat := mustGetProposal(proposalId).State
		tests := []proposalStateTest{
			{"Created", true, true},
			{"CreatedAt", oldOldTime, oldOldTime},
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", true, true},
			{"PassedAt", oldTime, oldTime},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", false, false},
			{"Expired", true, true},
			{"ExpiredAt", nowTime, nowTime},
		}
		assertProposalState(t, proposalStat, tests)
	})

	t.Run("skip long time after expired", func(t *testing.T) {
		testing.SetRealm(adminRealm)

		testing.SkipHeights(100)
		updateProposalsState()

		proposalStat := mustGetProposal(proposalId).State
		tests := []proposalStateTest{
			{"Upcoming", false, false},
			{"Active", false, false},
			{"Passed", true, true},
			{"PassedAt", oldTime, oldTime},
			{"Rejected", false, false},
			{"Canceled", false, false},
			{"Executed", false, false},
			{"Expired", true, true},
			{"ExpiredAt", nowTime, nowTime},
		}
		assertProposalState(t, proposalStat, tests)
	})
}
