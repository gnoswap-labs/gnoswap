package governance

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"
	u256 "gno.land/p/gnoswap/uint256"

	"gno.land/r/gnoswap/v1/gns"
	gs "gno.land/r/gnoswap/v1/gov/staker"
)

func init() {
	// overwrite config for testcase
	config = Config{
		VotingStartDelay:              uint64(10),   // 10s ≈ 5 block
		VotingPeriod:                  uint64(30),   // 30s ≈ 15 block
		VotingWeightSmoothingDuration: uint64(10),   // 10s ≈ 5 block
		Quorum:                        uint64(50),   // 50% of total xGNS supply
		ProposalCreationThreshold:     uint64(100),  //
		ExecutionDelay:                uint64(10),   // 10s ≈ 5 block
		ExecutionWindow:               uint64(1000), // 500 block
	}
	setConfigVersion(1, config)
}

func TestProposeText_Scenario(t *testing.T) {
	proposeText(t)
	vote(t)
	cancel(t)
	execute(t)
}

func proposeText(t *testing.T) {
	t.Run("ProposeText with insufficient delegation", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-004] not enough balance || proposer(g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d) has not enough xGNS, balance(0), wanted(100)",
			func() {
				ProposeText("title", "text")
			})
	})

	t.Run("Successful text proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		proposalsJson := GetProposals()
		uassert.Equal(t, proposalsJson, ``)

		testing.SetRealm(adminRealm)
		gns.Approve(govStakerAddr, uint64(1_000_000))
		gs.Delegate(admin, uint64(1_000_000), "")
		testing.SkipHeights(11) // VotingWeightSmoothingDuration is 10 block

		proposalID := ProposeText("test_title", "test_description")
		uassert.Equal(t, proposalID, uint64(1))

		// test proposal object
		pp, exists := proposals.Get(formatUint(proposalID))
		uassert.True(t, exists)
		proposal := pp.(ProposalInfo)

		proposalTests := []struct {
			name     string
			actual   any
			expected any
		}{
			{"Proposer", proposal.Proposer, admin},
			{"ProposalType", string(proposal.ProposalType), "TEXT"},
			{"Created", proposal.State.Created, true},
			{"Upcoming", proposal.State.Upcoming, true},
			{"Yea equals Nay", proposal.Yea.ToString(), proposal.Nay.ToString()},
			{"ConfigVersion", proposal.ConfigVersion, uint64(1)},
			{"Title", proposal.Title, "test_title"},
			{"Description", proposal.Description, "test_description"},
		}

		for _, tt := range proposalTests {
			t.Run(tt.name, func(t *testing.T) {
				uassert.Equal(t, tt.expected, tt.actual)
			})
		}

		// test GetProposals API response
		proposals := unmarshal(GetProposals())
		pps := proposals.MustKey("proposals").MustArray()[0]

		apiTests := []struct {
			name     string
			key      string
			expected string
		}{
			{"ID", "id", "1"},
			{"Type", "type", "TEXT"},
			{"Title", "title", "test_title"},
			{"Description", "description", "test_description"},
			{"Proposer", "proposer", admin.String()},
		}

		for _, tt := range apiTests {
			t.Run(tt.name, func(t *testing.T) {
				actual := pps.MustKey(tt.key).MustString()
				uassert.Equal(t, tt.expected, actual)
			})
		}
	})
}

func vote(t *testing.T) {
	t.Run("Vote non existent proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-003] requested data not found || proposalId(123) not found",
			func() {
				Vote(uint64(123), true)
			})
	})

	proposalId := uint64(1) // text proposal id

	t.Run("Vote before voting period", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-014] unable to vote out of voting period",
			func() {
				Vote(proposalId, true)
			})
	})

	t.Run("Successful vote YES", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(5)

		voteKey := Vote(proposalId, true)
		voted := GetVoteByVoteKey(voteKey)
		uassert.True(t, voted)

		// validate proposal object
		pp, exists := proposals.Get(formatUint(proposalId))
		uassert.True(t, exists)
		proposal := pp.(ProposalInfo)

		proposalTests := []struct {
			name     string
			actual   interface{}
			expected interface{}
		}{
			{"Yea amount", proposal.Yea.Cmp(u256.NewUint(1_000_000)), 0},
			{"Nay amount", proposal.Nay.ToString(), "0"},
			{"Upcoming status", proposal.State.Upcoming, false},
			{"Active status", proposal.State.Active, true},
		}

		for _, tt := range proposalTests {
			t.Run(tt.name, func(t *testing.T) {
				uassert.Equal(t, tt.expected, tt.actual)
			})
		}

		proposals := unmarshal(GetProposals())

		pps := proposals.MustKey("proposals").MustArray()[0]

		apiTests := []struct {
			name     string
			key      string
			expected string
		}{
			{"ID", "id", "1"},
			{"Type", "type", "TEXT"},
			{"Title", "title", "test_title"},
			{"Description", "description", "test_description"},
		}

		for _, tt := range apiTests {
			t.Run(tt.name, func(t *testing.T) {
				actual := pps.MustKey(tt.key).MustString()
				uassert.Equal(t, tt.expected, actual)
			})
		}

		votes := unmarshal(GetVotesByAddress(admin))
		addrVoteJson := GetVoteByAddressFromProposalById(admin, proposalId)
		data := unmarshal(addrVoteJson)

		expectedFields := []struct {
			key      string
			expected string
		}{
			{"proposalId", "1"},
			{"voteYes", "true"},
			{"voteWeight", "1000000"},
			{"voteHeight", "139"},
		}

		for _, field := range expectedFields {
			votesValue := votes.MustKey("votes").MustArray()[0].MustKey(field.key).MustString()
			dataValue := data.MustKey("votes").MustArray()[0].MustKey(field.key).MustString()

			uassert.Equal(t, field.expected, votesValue)
			uassert.Equal(t, votesValue, dataValue)
		}
	})

	t.Run("Vote twice", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-006] can not vote twice",
			func() {
				Vote(proposalId, true)
			})
	})

	t.Run("Vote after voting period", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(2001)

		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-014] unable to vote out of voting period",
			func() {
				Vote(proposalId, true)
			})
	})

	t.Run("Proposal status after voting period", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		updateProposalsState()

		// proposal := proposals[proposalId]
		pp, exists := proposals.Get(formatUint(proposalId))
		uassert.True(t, exists)

		proposal := pp.(ProposalInfo)
		uassert.False(t, proposal.State.Active)

		uassert.False(t, proposal.State.Rejected)
		uassert.False(t, proposal.State.Executed)
	})
}

func cancel(t *testing.T) {
	t.Run("Cancel non existent proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-003] requested data not found || proposalId(123) not found",
			func() {
				Cancel(uint64(123))
			})
	})

	t.Run("new text proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		proposalId := ProposeText("test2_title", "test2_description")
		testing.SkipHeights(1)
	})

	t.Run("Cancel new text proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		Cancel(proposalId)

		pp, exists := proposals.Get(formatUint(proposalId))
		uassert.True(t, exists)

		proposal := pp.(ProposalInfo)
		uassert.True(t, proposal.State.Canceled)
		uassert.False(t, proposal.State.Active)
		uassert.False(t, proposal.State.Upcoming)
	})

	t.Run("Cancel already canceled proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-008] can not cancel already canceled proposal || proposalId(2) has already canceled",
			func() {
				Cancel(proposalId)
			})
	})

	t.Run("Cancel after voting period", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		proposalId = ProposeText("test3_title", "test3_description")
		testing.SkipHeights(11)

		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-009] unable to cancel voting proposal || voting has already started for proposalId(3)",
			func() {
				Cancel(proposalId)
			})
	})
}

func execute(t *testing.T) {
	t.Run("Execute non existent proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		uassert.PanicsWithMessage(t,
			"proposal 123 not found",
			func() {
				Execute(uint64(123))
			})
	})

	t.Run("Execute text proposal", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		testing.SkipHeights(11)
		uassert.PanicsWithMessage(t,
			"[GNOSWAP-GOVERNANCE-011] can not execute text proposal",
			func() {
				Execute(uint64(1))
			})
	})
}
