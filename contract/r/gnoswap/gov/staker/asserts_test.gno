package staker

import (
	"std"
	"testing"

	"gno.land/p/demo/uassert"
)

// Test assertIsNotHaltedWithdraw
func TestAssertIsNotHaltedWithdraw(t *testing.T) {
	tests := []struct {
		name        string
		description string
	}{
		{
			name:        "Normal operation when not halted",
			description: "Should not panic when system is not halted",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// When: Call assertIsNotHaltedWithdraw
			// Then: Should not panic under normal conditions
			// Note: This test assumes the system is not halted during testing
			// In a real test environment, you would mock the halt module
			assertIsNotHaltedWithdraw()
		})
	}
}

// Test assertCallerIsAdmin
func TestAssertCallerIsAdmin(t *testing.T) {
	tests := []struct {
		name          string
		caller        std.Address
		shouldPanic   bool
		expectedError string
	}{
		{
			name:          "Non-admin caller should panic",
			caller:        std.Address("user1"),
			shouldPanic:   true,
			expectedError: "caller(user1) has no permission",
		},
		{
			name:          "Invalid address should panic",
			caller:        std.Address(""),
			shouldPanic:   true,
			expectedError: "caller() has no permission",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.shouldPanic {
				// When & Then: Should panic with expected message
				uassert.PanicsWithMessage(t, tt.expectedError, func() {
					assertCallerIsAdmin(tt.caller)
				})
			} else {
				// When: Call with admin caller
				// Then: Should not panic
				assertCallerIsAdmin(tt.caller)
			}
		})
	}
}

// Test assertCallerIsLaunchpad
func TestAssertCallerIsLaunchpad(t *testing.T) {
	tests := []struct {
		name          string
		caller        std.Address
		shouldPanic   bool
		expectedError string
	}{
		{
			name:          "Non-launchpad caller should panic",
			caller:        std.Address("user1"),
			shouldPanic:   true,
			expectedError: "caller(user1) has no permission",
		},
		{
			name:          "Invalid address should panic",
			caller:        std.Address(""),
			shouldPanic:   true,
			expectedError: "caller() has no permission",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.shouldPanic {
				// When & Then: Should panic with expected message
				uassert.PanicsWithMessage(t, tt.expectedError, func() {
					assertCallerIsLaunchpad(tt.caller)
				})
			} else {
				// When: Call with launchpad caller
				// Then: Should not panic
				assertCallerIsLaunchpad(tt.caller)
			}
		})
	}
}

// Test assertValidAddress
func TestAssertValidAddress(t *testing.T) {
	tests := []struct {
		name          string
		address       std.Address
		shouldPanic   bool
		expectedError string
	}{
		{
			name:          "Empty address should panic",
			address:       std.Address(""),
			shouldPanic:   true,
			expectedError: "[GNOSWAP-GOV_STAKER-008] invalid address || invalid address ",
		},
		{
			name:          "Invalid address format should panic",
			address:       std.Address("invalid"),
			shouldPanic:   true,
			expectedError: "[GNOSWAP-GOV_STAKER-008] invalid address || invalid address invalid",
		},
		{
			name:        "Valid address should not panic",
			address:     std.Address("g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq"),
			shouldPanic: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.shouldPanic {
				// When & Then: Should panic with expected message
				uassert.PanicsWithMessage(t, tt.expectedError, func() {
					assertValidAddress(tt.address)
				})
			} else {
				// When: Call with valid address
				// Then: Should not panic
				assertValidAddress(tt.address)
			}
		})
	}
}

// Test assertCallerIsDelegator
func TestAssertCallerIsDelegator(t *testing.T) {
	tests := []struct {
		name          string
		caller        std.Address
		from          std.Address
		shouldPanic   bool
		expectedError string
	}{
		{
			name:          "Different caller and from addresses should panic",
			caller:        std.Address("g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq"),
			from:          std.Address("g1v7n2w36m8q5p9vc6fmpcprgey4ck233jdgw3kl"),
			shouldPanic:   true,
			expectedError: "[GNOSWAP-GOV_STAKER-008] invalid address || caller and from address are the same",
		},
		{
			name:        "Same caller and from addresses should not panic",
			caller:      std.Address("g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq"),
			from:        std.Address("g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq"),
			shouldPanic: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.shouldPanic {
				// When & Then: Should panic with expected message
				uassert.PanicsWithMessage(t, tt.expectedError, func() {
					assertCallerIsDelegator(tt.caller, tt.from)
				})
			} else {
				// When: Call with matching addresses
				// Then: Should not panic
				assertCallerIsDelegator(tt.caller, tt.from)
			}
		})
	}
}

// Test assert functions edge cases
func TestAssertFunctions_EdgeCases(t *testing.T) {
	tests := []struct {
		name        string
		testFunc    func()
		shouldPanic bool
		description string
	}{
		{
			name: "assertValidAddress with nil-like address",
			testFunc: func() {
				assertValidAddress(std.Address(""))
			},
			shouldPanic: true,
			description: "[GNOSWAP-GOV_STAKER-008] invalid address || invalid address ",
		},
		{
			name: "assertCallerIsDelegator with empty addresses",
			testFunc: func() {
				assertCallerIsDelegator(std.Address(""), std.Address(""))
			},
			shouldPanic: false,
			description: "Both empty addresses should be considered equal",
		},
		{
			name: "assertCallerIsDelegator with one empty address",
			testFunc: func() {
				assertCallerIsDelegator(std.Address("g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq"), std.Address(""))
			},
			shouldPanic: true,
			description: "[GNOSWAP-GOV_STAKER-008] invalid address || caller and from address are the same",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.shouldPanic {
				// When & Then: Should panic
				uassert.PanicsWithMessage(t, tt.description, tt.testFunc)
			} else {
				// When: Call function
				// Then: Should not panic
				tt.testFunc()
			}
		})
	}
}

// Test assert functions with various address formats
func TestAssertFunctions_AddressFormats(t *testing.T) {
	tests := []struct {
		name           string
		address        std.Address
		expectedHasPanic bool
		expectedPanicMessage string
	}{
		{
			name:           "Standard valid gno address",
			address:        std.Address("g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq"),
			expectedHasPanic: false,
		},
		{
			name:           "Short address",
			address:        std.Address("g1"),
			expectedHasPanic: true,
			expectedPanicMessage: "[GNOSWAP-GOV_STAKER-008] invalid address || invalid address g1",
		},
		{
			name:           "Very long address",
			address:        std.Address("g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zqverylongaddress"),
			expectedHasPanic: true,
			expectedPanicMessage: "[GNOSWAP-GOV_STAKER-008] invalid address || invalid address g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zqverylongaddress",
		},
		{
			name:           "Address with special characters",
			address:        std.Address("g1@#$%^&*()"),
			expectedHasPanic: true,
			expectedPanicMessage: "[GNOSWAP-GOV_STAKER-008] invalid address || invalid address g1@#$%^&*()",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Test assertValidAddress
			if tt.expectedHasPanic {
				uassert.PanicsWithMessage(t, tt.expectedPanicMessage, func() {
					assertValidAddress(tt.address)
				})
			} else {
				assertValidAddress(tt.address)
			}
		})
	}
}

// Helper function to check if slice contains string
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
} 