package router

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/uassert"

	"gno.land/p/gnoswap/consts"

	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"

	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
	"gno.land/r/onbloc/foo"
)

func TestExactOutSwapRoute_7(t *testing.T) {
	testing.SetRealm(adminRealm)
	gns.Approve(poolAddr, pl.GetPoolCreationFee()*2)

	pl.CreatePool(barPath, bazPath, 3000, "79228162514264337593543950336")
	pl.CreatePool(bazPath, fooPath, 3000, "79228162514264337593543950336")

	bar.Approve(poolAddr, consts.UINT64_MAX)
	baz.Approve(poolAddr, consts.UINT64_MAX)
	foo.Approve(poolAddr, consts.UINT64_MAX)

	cross(pn.Mint)(barPath, bazPath, uint32(3000), int32(-887220), int32(887220), "1000000", "1000000", "0", "0", max_timeout, adminAddr, adminAddr, "")
	cross(pn.Mint)(bazPath, fooPath, uint32(3000), int32(-887220), int32(887220), "1000000", "1000000", "0", "0", max_timeout, adminAddr, adminAddr, "")

	bar.Approve(routerAddr, 1000000)
	foo.Approve(routerAddr, 1000000)

	token0Before := bar.BalanceOf(adminAddr)
	token2Before := foo.BalanceOf(adminAddr)

	amountIn, amountOut := ExactOutSwapRoute(
		barPath, // inputToken
		fooPath, // outputToken
		"1",     // amountSpecified
		"gno.land/r/onbloc/bar:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/foo:3000", // strRouteArr
		"100", // quoteArr
		"5",   // tokenAmountLimit
		time.Now().Add(time.Hour).Unix(),
		"", // referrer
	)

	token0After := bar.BalanceOf(adminAddr)
	token2After := foo.BalanceOf(adminAddr)

	uassert.Equal(t, amountIn, "5")
	uassert.Equal(t, amountOut, "-1")

	uassert.Equal(t, token0After, token0Before-5)
	uassert.Equal(t, token2After, token2Before+1)
}
