// PKGPATH: gno.land/r/gnoswap/v1/staker_test
// 1 pool for tier 1 (gnot:gns:0.3%)
// - same pool has 2 external incentives
//   1. bar
//   2. gns
//    > internal gns and external gns must not affect each other

package staker_test

import (
	"std"
	"strconv"

	"gno.land/p/demo/grc/grc721"

	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/gnoswap/v1/consts"

	"gno.land/r/demo/wugnot"
	"gno.land/r/gnoswap/v1/gns"
	"gno.land/r/onbloc/bar"
	_ "gno.land/r/onbloc/baz"

	"gno.land/r/gnoswap/v1/gnft"

	en "gno.land/r/gnoswap/v1/emission"
	pl "gno.land/r/gnoswap/v1/pool"
	pn "gno.land/r/gnoswap/v1/position"
	sr "gno.land/r/gnoswap/v1/staker"
)

var (
	adminAddr  = consts.ADMIN
	adminUser  = common.AddrToUser(adminAddr)
	adminRealm = std.NewUserRealm(adminAddr)

	stakerAddr  = consts.STAKER_ADDR
	stakerUser  = common.AddrToUser(stakerAddr)
	stakerRealm = std.NewCodeRealm(consts.STAKER_PATH)

	wugnotAddr = consts.WUGNOT_ADDR

	fooPath = "gno.land/r/onbloc/foo"
	barPath = "gno.land/r/onbloc/bar"
	bazPath = "gno.land/r/onbloc/baz"
	quxPath = "gno.land/r/onbloc/qux"
	oblPath = "gno.land/r/onbloc/obl"

	gnsPath    = "gno.land/r/gnoswap/v1/gns"
	wugnotPath = "gno.land/r/demo/wugnot"

	fee100  uint32 = 100
	fee500  uint32 = 500
	fee3000 uint32 = 3000

	max_timeout int64 = 9999999999

	// external incentive deposit fee
	depositGnsAmount uint64 = 1_000_000_000 // 1_000 GNS

	TIMESTAMP_90DAYS  int64 = 90 * 24 * 60 * 60
	TIMESTAMP_180DAYS int64 = 180 * 24 * 60 * 60
	TIMESTAMP_365DAYS int64 = 365 * 24 * 60 * 60
)

func main() {
	testInit()
	testCreatePool()
	testMintWugnotGns01()
	testCreateExternalIncentiveBar()
	testCreateExternalIncentiveGns()
	testStakeToken01()
	testRewardCheckBeforeActive()
	testRewardCheckAfterActive()
	testDuration200()
	testCollectReward()
	testCollectRewardSameBlockNoReward()
	testCollectRewardSingleBlock()
}

func testInit() {
	std.TestSetRealm(adminRealm)

	// issue ugnot coins
	std.TestIssueCoins(adminAddr, std.Coins{{"ugnot", 100_000_000_000_000}})

	// prepare wugnot
	banker := std.GetBanker(std.BankerTypeRealmSend)
	banker.SendCoins(adminAddr, wugnotAddr, std.Coins{{"ugnot", 50_000_000_000_000}})
	std.TestSetOrigSend(std.Coins{{"ugnot", 50_000_000_000_000}}, nil)
	wugnot.Deposit()
	std.TestSetOrigSend(nil, nil)
}

func testCreatePool() {
	std.TestSetRealm(adminRealm)

	pl.SetPoolCreationFeeByAdmin(0)

	std.TestSkipHeights(1)
	// tier 1 by default
	pl.CreatePool(
		wugnotPath,
		gnsPath,
		fee3000,
		common.TickMathGetSqrtRatioAtTick(0).ToString(), // 79228162514264337593543950337
	)

	// wil be set to tier 2, and change to tier 1
	pl.CreatePool(
		barPath,
		bazPath,
		fee100,
		common.TickMathGetSqrtRatioAtTick(0).ToString(), // 79228162514264337593543950337
	)
}

func testMintWugnotGns01() {
	std.TestSetRealm(adminRealm)

	wugnot.Approve(common.AddrToUser(consts.POOL_ADDR), consts.UINT64_MAX)
	gns.Approve(common.AddrToUser(consts.POOL_ADDR), consts.UINT64_MAX)

	std.TestSkipHeights(1)
	pn.Mint(
		wugnotPath,
		gnsPath,
		fee3000,
		int32(-1020),
		int32(1020),
		"500000000",
		"500000000",
		"1",
		"1",
		max_timeout,
		adminAddr,
		adminAddr,
	)
}

func testCreateExternalIncentiveBar() {
	std.TestSetRealm(adminRealm)

	bar.Approve(common.AddrToUser(consts.STAKER_ADDR), consts.UINT64_MAX)
	gns.Approve(common.AddrToUser(consts.STAKER_ADDR), depositGnsAmount)

	std.TestSkipHeights(1)
	sr.AddToken(barPath)
	sr.CreateExternalIncentive(
		"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000",
		barPath,
		20000000,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)
}

func testCreateExternalIncentiveGns() {
	std.TestSetRealm(adminRealm)

	gns.Approve(common.AddrToUser(consts.STAKER_ADDR), consts.UINT64_MAX)

	std.TestSkipHeights(1)
	sr.CreateExternalIncentive(
		"gno.land/r/demo/wugnot:gno.land/r/gnoswap/v1/gns:3000",
		gnsPath,
		20000000,
		1234569600,
		1234569600+TIMESTAMP_90DAYS,
	)
}

func testStakeToken01() {
	std.TestSetRealm(adminRealm)

	gnft.Approve(stakerAddr, tokenIdFrom(1))

	std.TestSkipHeights(1)
	sr.StakeToken(1)
	// TODO: (after fixing unit test) check reward by querying with api funcs
}

func testRewardCheckBeforeActive() {
	std.TestSkipHeights(1)
	en.MintAndDistributeGns()

	// TODO: (after fixing unit test) check reward by querying with api funcs
}

func testRewardCheckAfterActive() {
	std.TestSkipHeights(849) // in active
	std.TestSkipHeights(1)   // active // but no block passed since active
	std.TestSkipHeights(50)  // skip 50 more block

	// TODO: (after fixing unit test) check reward by querying with api funcs
}

func testDuration200() {
	std.TestSkipHeights(200)

	// TODO: (after fixing unit test) check reward by querying with api funcs
}

func testCollectReward() {
	std.TestSetRealm(adminRealm)

	oldBar := bar.BalanceOf(adminUser)
	oldGns := gns.BalanceOf(adminUser)

	std.TestSkipHeights(1)
	sr.CollectReward(1, false)

	newBar := bar.BalanceOf(adminUser)
	newGns := gns.BalanceOf(adminUser)

	println("oldBar", oldBar)
	println("newBar", newBar)

	// TODO: this gns balance will have both internal and external gns
	// need to check how much gns is from internal and how much is from external
	println("oldGns", oldGns)
	println("newGns", newGns)
}

func testCollectRewardSameBlockNoReward() {
	std.TestSetRealm(adminRealm)

	oldBar := bar.BalanceOf(adminUser)
	oldGns := gns.BalanceOf(adminUser)

	// std.TestSkipHeights(1) // DO NOT SKIP HEIGHT
	// current logic is to test collect reward in the same block
	sr.CollectReward(1, false)

	newBar := bar.BalanceOf(adminUser)
	newGns := gns.BalanceOf(adminUser)

	println("oldBar", oldBar)
	println("newBar", newBar)

	// TODO: this gns balance will have both internal and external gns
	// need to check how much gns is from internal and how much is from external
	println("oldGns", oldGns)
	println("newGns", newGns)
}

func testCollectRewardSingleBlock() {
	std.TestSetRealm(adminRealm)

	oldBar := bar.BalanceOf(adminUser)
	oldGns := gns.BalanceOf(adminUser)

	std.TestSkipHeights(1) // ONLY 1 BLOCK PASSED
	sr.CollectReward(1, false)

	newBar := bar.BalanceOf(adminUser)
	newGns := gns.BalanceOf(adminUser)

	println("oldBar", oldBar)
	println("newBar", newBar)

	// TODO: this gns balance will have both internal and external gns
	// need to check how much gns is from internal and how much is from external
	println("oldGns", oldGns)
	println("newGns", newGns)
}

// NOTE: filetest can not access helper functions in origin package
// so we need to implement the helper function here

func tokenIdFrom(tokenId interface{}) grc721.TokenID {
	if tokenId == nil {
		panic("tokenId is nil")
	}

	switch tokenId.(type) {
	case string:
		return grc721.TokenID(tokenId.(string))
	case int:
		return grc721.TokenID(strconv.Itoa(tokenId.(int)))
	case uint64:
		return grc721.TokenID(strconv.Itoa(int(tokenId.(uint64))))
	case grc721.TokenID:
		return tokenId.(grc721.TokenID)
	default:
		panic("unsupported tokenId type")
	}
}

func ugnotBalanceOf(addr std.Address) uint64 {
	testBanker := std.GetBanker(std.BankerTypeReadonly)

	coins := testBanker.GetCoins(addr)
	if len(coins) == 0 {
		return 0
	}

	return uint64(coins.AmountOf("ugnot"))
}
