package router

import (
	"std"
	"testing"

	"gno.land/p/nt/uassert"
	i256 "gno.land/p/gnoswap/int256"
	u256 "gno.land/p/gnoswap/uint256"

	prabc "gno.land/p/gnoswap/rbac"

	"gno.land/r/gnoswap/access"
	"gno.land/r/gnoswap/v1/common"
	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/baz"
)

func TestCalculateSqrtPriceLimitForSwap(t *testing.T) {
	tests := []struct {
		name              string
		zeroForOne        bool
		fee               uint32
		sqrtPriceLimitX96 *u256.Uint
		expected          *u256.Uint
	}{
		{
			name:              "already set sqrtPriceLimit",
			zeroForOne:        true,
			fee:               500,
			sqrtPriceLimitX96: u256.NewUint(1000),
			expected:          u256.NewUint(1000),
		},
		{
			name:              "when zeroForOne is true, calculate min tick",
			zeroForOne:        true,
			fee:               500,
			sqrtPriceLimitX96: u256.Zero(),
			expected: u256.Zero().Add(
				common.TickMathGetSqrtRatioAtTick(getMinTick(500)+1),
				u256.One(),
			),
		},
		{
			name:              "when zeroForOne is false, calculate max tick",
			zeroForOne:        false,
			fee:               500,
			sqrtPriceLimitX96: u256.Zero(),
			expected: u256.Zero().Sub(
				common.TickMathGetSqrtRatioAtTick(getMaxTick(500)-1),
				u256.One(),
			),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := calculateSqrtPriceLimitForSwap(
				tt.zeroForOne,
				tt.fee,
				tt.sqrtPriceLimitX96,
			)
			uassert.Equal(t, result.ToString(), tt.expected.ToString())
		})
	}
}

func TestSwapInner(t *testing.T) {
	routerAddr, _ := access.GetAddress(prabc.ROLE_ROUTER.String())
	poolAddr, _ := access.GetAddress(prabc.ROLE_POOL.String())

	tests := []struct {
		name              string
		setupFn           func(*TestEnv)
		amountSpecified   *i256.Int
		recipient         std.Address
		sqrtPriceLimitX96 *u256.Uint
		data              SwapCallbackData
		expectedRecv      string
		expectedOut       string
		expectError       bool
		expectedErrorMsg  string
	}{
		{
			name: "normal swap - exact input",
			setupFn: func(env *TestEnv) {
				defaultSetupFn(env)
				TokenFaucet(t, barPath, alice)
			},
			amountSpecified:   i256.MustFromDecimal("100"),
			recipient:         alice,
			sqrtPriceLimitX96: u256.NewUint(4295128740),
			data: SwapCallbackData{
				tokenIn:  barPath,
				tokenOut: bazPath,
				fee:      3000,
				payer:    alice,
			},
			expectedRecv: "100",
			expectedOut:  "98",
			expectError:  false,
		},
		{
			name: "overflow case - large amount",
			setupFn: func(env *TestEnv) {
				defaultSetupFn(env)
				TokenFaucet(t, barPath, alice)
			},
			amountSpecified:   i256.MustFromDecimal("92267581029952440000000"), // Large amount
			recipient:         alice,
			sqrtPriceLimitX96: u256.NewUint(4295128740),
			data: SwapCallbackData{
				tokenIn:  barPath,
				tokenOut: bazPath,
				fee:      3000,
				payer:    alice,
			},
			expectedRecv:     "0",
			expectedOut:      "0",
			expectError:      true,
			expectedErrorMsg: "[GNOSWAP-POOL-005] out of range for numeric value: amount(92267581029952440000000) overflows int64 range (max 9223372036854775807)",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			env := NewTestEnv(t)

			if tt.setupFn != nil {
				tt.setupFn(env)
			}

			// Additional setup for swapInner test requirements
			aliceRealm := std.NewUserRealm(alice)
			testing.SetRealm(aliceRealm)
			bar.Approve(cross, routerAddr, maxApprove)
			baz.Approve(cross, routerAddr, maxApprove)
			bar.Approve(cross, poolAddr, maxApprove)
			baz.Approve(cross, poolAddr, maxApprove)
			TokenFaucet(t, barPath, routerAddr)

			swapInnerFn := func(cur realm) (*u256.Uint, *u256.Uint) {
				func() {
					ctx := testing.GetContext()
					ctx.CurrentRealm = routerRealm
					ctx.OriginCaller = tt.data.payer
					testing.SetContext(ctx)
				}()
				
				return swapInner(
					tt.amountSpecified,
					tt.recipient,
					tt.sqrtPriceLimitX96,
					tt.data,
				)
			}

			if tt.expectError {
				uassert.AbortsWithMessage(t, tt.expectedErrorMsg, func() {
					swapInnerFn(cross)
				})
			} else {
				poolRecv, poolOut := swapInnerFn(cross)

				if !tt.expectError {
					uassert.Equal(t, poolRecv.ToString(), tt.expectedRecv)
					uassert.Equal(t, poolOut.ToString(), tt.expectedOut)
				}
			}
		})
	}
}
