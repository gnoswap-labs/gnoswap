package launchpad

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/uassert"

	"gno.land/r/onbloc/bar"
	"gno.land/r/onbloc/foo"
	"gno.land/r/onbloc/obl"

	"gno.land/r/gnoswap/v1/gns"
)

var (
	user01      = testutils.TestAddress("user01")
	user01Realm = std.NewUserRealm(user01)
)

func TestTier90RewardByTier(t *testing.T) {
	t.Skip("fix this code")
	testCreateProject(t)
	testDepositGnsTier90(t)
	testCollectReward(t)
}

func testCreateProject(t *testing.T) {
	t.Run("create project", func(t *testing.T) {
		testing.SetRealm(adminRealm)

		obl.Approve(launchpadAddr, uint64(1_000_000_000))
		testing.SkipHeights(1)

		projectId := CreateProject(
			"Obl Protocol",
			oblPath,
			projectAddr,
			uint64(1_000_000_000), // 1000000000
			"gno.land/r/onbloc/foo*PAD*gno.land/r/onbloc/bar",
			"1*PAD*2",
			uint64(10),                   // 100000000
			uint64(20),                   // 200000000
			uint64(70),                   // 700000000
			uint64(time.Now().Unix()+10), // 10s later
		)
		uassert.Equal(t, projectId, `gno.land/r/onbloc/obl:124`)
		testing.SkipHeights(1)
	})
}

func testDepositGnsTier90(t *testing.T) {
	t.Run("deposit gns to tier 90", func(t *testing.T) {
		testing.SetRealm(adminRealm)
		gns.Transfer(user01, uint64(1_000_000)) // to deposit
		// transfer some grc20 tokens to bypass project condition
		foo.Transfer(user01, uint64(10))
		bar.Transfer(user01, uint64(10))

		testing.SetRealm(user01Realm)
		gns.Approve(launchpadAddr, uint64(1_000_000))

		// skip some blocks to make project active
		testing.SkipHeights(4)
		depositId := DepositGns("gno.land/r/onbloc/obl:124:90", uint64(1_000_000), "")
		uassert.Equal(t, depositId, `gno.land/r/onbloc/obl:124:90:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		testing.SkipHeights(1)
	})
}

func testCollectReward(t *testing.T) {
	testing.SetRealm(user01Realm)

	t.Run("claim reward before 7 days(for 90day tier's init reward)", func(t *testing.T) {
		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:90:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		uassert.Equal(t, reward, uint64(0))
		testing.SkipHeights(1)
	})

	t.Run("claim reward before 7 days(for 90day tier's init reward)", func(t *testing.T) {
		testing.SkipHeights(123)
		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:90:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		uassert.Equal(t, reward, uint64(0))
		testing.SkipHeights(1)
	})

	t.Run("claim after 7 days", func(t *testing.T) {
		testing.SkipHeights(int64(TIMESTAMP_7DAYS) / 2)
		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:90:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		uassert.Equal(t, reward, uint64(24888888))
	})

	t.Run("no more claim in same block", func(t *testing.T) {
		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:90:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		uassert.Equal(t, reward, uint64(0))
	})

	t.Run("wait 1 more block, then claim", func(t *testing.T) {
		testing.SkipHeights(1)
		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:90:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		uassert.Equal(t, reward, uint64(74074))
	})

	t.Run("90day tier is over", func(t *testing.T) {
		testing.SkipHeights(int64(TIMESTAMP_90DAYS) / 2)
		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:90:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		uassert.Equal(t, reward, uint64(175037037))
	})

	t.Run("more block after 90 days", func(t *testing.T) {
		testing.SkipHeights(int64(TIMESTAMP_90DAYS) / 2)
		reward := CollectRewardByDepositId(`gno.land/r/onbloc/obl:124:90:g1w4ek2u3sx9047h6lta047h6lta047h6lh0ssfv:129`)
		uassert.Equal(t, reward, uint64(0))
	})
}
