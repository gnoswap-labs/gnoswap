// mint gns by skipping blocks
package main

import (
	"std"
	"testing"
	"time"

	"gno.land/p/demo/testutils"
	"gno.land/p/demo/ufmt"

	prbac "gno.land/p/gnoswap/rbac"
	"gno.land/r/gnoswap/emission"
	"gno.land/r/gnoswap/gns"

	_ "gno.land/r/gnoswap/v1/staker"

	"gno.land/r/gnoswap/access"
)

var t *testing.T

var (
	user01Addr  = testutils.TestAddress("user01Addr")
	user01Realm = std.NewUserRealm(user01Addr)

	adminAddr, _ = access.GetAddress(prbac.ROLE_ADMIN.String())
)

func main() {
	ufmt.Println("[SCENARIO] 1. Initialize emission callback")
	initEmissionCallback()
	println()

	ufmt.Println("[SCENARIO] 2. Mint GNS when initialized")
	mintGNS()
	println()

	ufmt.Println("[SCENARIO] 3. Skip 50 blocks")
	testing.SkipHeights(50)
	println()

	ufmt.Println("[SCENARIO] 4. Mint GNS when skipped 50 blocks")
	mintGNS()
}

func initEmissionCallback() {
	testing.SetOriginCaller(adminAddr)
	emission.SetDistributionStartTime(cross, time.Now().Unix()+1)
	testing.SkipHeights(1)
}

func mintGNS() {
	testing.SetRealm(std.NewCodeRealm("gno.land/r/gnoswap/emission"))

	mintedAmount := gns.MintGns(cross, user01Addr)

	ufmt.Printf("[EXPECTED] minted amount should be %d\n", mintedAmount)
}

// Output:
// [SCENARIO] 1. Initialize emission callback
//
// [SCENARIO] 2. Mint GNS when initialized
// [EXPECTED] minted amount should be 35673515
//
// [SCENARIO] 3. Skip 50 blocks
//
// [SCENARIO] 4. Mint GNS when skipped 50 blocks
// [EXPECTED] minted amount should be 1783675750
